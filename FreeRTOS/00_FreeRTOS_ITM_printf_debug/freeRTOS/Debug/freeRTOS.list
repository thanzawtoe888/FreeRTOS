
freeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005088  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  08005218  08005218  00015218  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080052b0  080052b0  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  080052b0  080052b0  000152b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080052b8  080052b8  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080052b8  080052b8  000152b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080052bc  080052bc  000152bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  080052c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002006c  2**0
                  CONTENTS
 10 .bss          00004b10  2000006c  2000006c  0002006c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20004b7c  20004b7c  0002006c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001299f  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002cd6  00000000  00000000  00032a7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000011f8  00000000  00000000  00035758  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000dcb  00000000  00000000  00036950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000043cf  00000000  00000000  0003771b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00012fe7  00000000  00000000  0003baea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d4b3d  00000000  00000000  0004ead1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005168  00000000  00000000  00123610  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000058  00000000  00000000  00128778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005200 	.word	0x08005200

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	08005200 	.word	0x08005200

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b970 	b.w	80004c8 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9e08      	ldr	r6, [sp, #32]
 8000206:	460d      	mov	r5, r1
 8000208:	4604      	mov	r4, r0
 800020a:	460f      	mov	r7, r1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d14a      	bne.n	80002a6 <__udivmoddi4+0xa6>
 8000210:	428a      	cmp	r2, r1
 8000212:	4694      	mov	ip, r2
 8000214:	d965      	bls.n	80002e2 <__udivmoddi4+0xe2>
 8000216:	fab2 f382 	clz	r3, r2
 800021a:	b143      	cbz	r3, 800022e <__udivmoddi4+0x2e>
 800021c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000220:	f1c3 0220 	rsb	r2, r3, #32
 8000224:	409f      	lsls	r7, r3
 8000226:	fa20 f202 	lsr.w	r2, r0, r2
 800022a:	4317      	orrs	r7, r2
 800022c:	409c      	lsls	r4, r3
 800022e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000232:	fa1f f58c 	uxth.w	r5, ip
 8000236:	fbb7 f1fe 	udiv	r1, r7, lr
 800023a:	0c22      	lsrs	r2, r4, #16
 800023c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000240:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000244:	fb01 f005 	mul.w	r0, r1, r5
 8000248:	4290      	cmp	r0, r2
 800024a:	d90a      	bls.n	8000262 <__udivmoddi4+0x62>
 800024c:	eb1c 0202 	adds.w	r2, ip, r2
 8000250:	f101 37ff 	add.w	r7, r1, #4294967295
 8000254:	f080 811c 	bcs.w	8000490 <__udivmoddi4+0x290>
 8000258:	4290      	cmp	r0, r2
 800025a:	f240 8119 	bls.w	8000490 <__udivmoddi4+0x290>
 800025e:	3902      	subs	r1, #2
 8000260:	4462      	add	r2, ip
 8000262:	1a12      	subs	r2, r2, r0
 8000264:	b2a4      	uxth	r4, r4
 8000266:	fbb2 f0fe 	udiv	r0, r2, lr
 800026a:	fb0e 2210 	mls	r2, lr, r0, r2
 800026e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000272:	fb00 f505 	mul.w	r5, r0, r5
 8000276:	42a5      	cmp	r5, r4
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x90>
 800027a:	eb1c 0404 	adds.w	r4, ip, r4
 800027e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000282:	f080 8107 	bcs.w	8000494 <__udivmoddi4+0x294>
 8000286:	42a5      	cmp	r5, r4
 8000288:	f240 8104 	bls.w	8000494 <__udivmoddi4+0x294>
 800028c:	4464      	add	r4, ip
 800028e:	3802      	subs	r0, #2
 8000290:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000294:	1b64      	subs	r4, r4, r5
 8000296:	2100      	movs	r1, #0
 8000298:	b11e      	cbz	r6, 80002a2 <__udivmoddi4+0xa2>
 800029a:	40dc      	lsrs	r4, r3
 800029c:	2300      	movs	r3, #0
 800029e:	e9c6 4300 	strd	r4, r3, [r6]
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d908      	bls.n	80002bc <__udivmoddi4+0xbc>
 80002aa:	2e00      	cmp	r6, #0
 80002ac:	f000 80ed 	beq.w	800048a <__udivmoddi4+0x28a>
 80002b0:	2100      	movs	r1, #0
 80002b2:	e9c6 0500 	strd	r0, r5, [r6]
 80002b6:	4608      	mov	r0, r1
 80002b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002bc:	fab3 f183 	clz	r1, r3
 80002c0:	2900      	cmp	r1, #0
 80002c2:	d149      	bne.n	8000358 <__udivmoddi4+0x158>
 80002c4:	42ab      	cmp	r3, r5
 80002c6:	d302      	bcc.n	80002ce <__udivmoddi4+0xce>
 80002c8:	4282      	cmp	r2, r0
 80002ca:	f200 80f8 	bhi.w	80004be <__udivmoddi4+0x2be>
 80002ce:	1a84      	subs	r4, r0, r2
 80002d0:	eb65 0203 	sbc.w	r2, r5, r3
 80002d4:	2001      	movs	r0, #1
 80002d6:	4617      	mov	r7, r2
 80002d8:	2e00      	cmp	r6, #0
 80002da:	d0e2      	beq.n	80002a2 <__udivmoddi4+0xa2>
 80002dc:	e9c6 4700 	strd	r4, r7, [r6]
 80002e0:	e7df      	b.n	80002a2 <__udivmoddi4+0xa2>
 80002e2:	b902      	cbnz	r2, 80002e6 <__udivmoddi4+0xe6>
 80002e4:	deff      	udf	#255	; 0xff
 80002e6:	fab2 f382 	clz	r3, r2
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	f040 8090 	bne.w	8000410 <__udivmoddi4+0x210>
 80002f0:	1a8a      	subs	r2, r1, r2
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2101      	movs	r1, #1
 80002fc:	fbb2 f5f7 	udiv	r5, r2, r7
 8000300:	fb07 2015 	mls	r0, r7, r5, r2
 8000304:	0c22      	lsrs	r2, r4, #16
 8000306:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800030a:	fb0e f005 	mul.w	r0, lr, r5
 800030e:	4290      	cmp	r0, r2
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x124>
 8000312:	eb1c 0202 	adds.w	r2, ip, r2
 8000316:	f105 38ff 	add.w	r8, r5, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x122>
 800031c:	4290      	cmp	r0, r2
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2b8>
 8000322:	4645      	mov	r5, r8
 8000324:	1a12      	subs	r2, r2, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb2 f0f7 	udiv	r0, r2, r7
 800032c:	fb07 2210 	mls	r2, r7, r0, r2
 8000330:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x14e>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 32ff 	add.w	r2, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x14c>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2c2>
 800034c:	4610      	mov	r0, r2
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000356:	e79f      	b.n	8000298 <__udivmoddi4+0x98>
 8000358:	f1c1 0720 	rsb	r7, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa05 f401 	lsl.w	r4, r5, r1
 800036a:	fa20 f307 	lsr.w	r3, r0, r7
 800036e:	40fd      	lsrs	r5, r7
 8000370:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000374:	4323      	orrs	r3, r4
 8000376:	fbb5 f8f9 	udiv	r8, r5, r9
 800037a:	fa1f fe8c 	uxth.w	lr, ip
 800037e:	fb09 5518 	mls	r5, r9, r8, r5
 8000382:	0c1c      	lsrs	r4, r3, #16
 8000384:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000388:	fb08 f50e 	mul.w	r5, r8, lr
 800038c:	42a5      	cmp	r5, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	fa00 f001 	lsl.w	r0, r0, r1
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b0>
 8000398:	eb1c 0404 	adds.w	r4, ip, r4
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2b4>
 80003a4:	42a5      	cmp	r5, r4
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2b4>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4464      	add	r4, ip
 80003b0:	1b64      	subs	r4, r4, r5
 80003b2:	b29d      	uxth	r5, r3
 80003b4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b8:	fb09 4413 	mls	r4, r9, r3, r4
 80003bc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003c4:	45a6      	cmp	lr, r4
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1da>
 80003c8:	eb1c 0404 	adds.w	r4, ip, r4
 80003cc:	f103 35ff 	add.w	r5, r3, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2ac>
 80003d2:	45a6      	cmp	lr, r4
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2ac>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	4464      	add	r4, ip
 80003da:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003de:	fba3 9502 	umull	r9, r5, r3, r2
 80003e2:	eba4 040e 	sub.w	r4, r4, lr
 80003e6:	42ac      	cmp	r4, r5
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46ae      	mov	lr, r5
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x29c>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x298>
 80003f0:	b156      	cbz	r6, 8000408 <__udivmoddi4+0x208>
 80003f2:	ebb0 0208 	subs.w	r2, r0, r8
 80003f6:	eb64 040e 	sbc.w	r4, r4, lr
 80003fa:	fa04 f707 	lsl.w	r7, r4, r7
 80003fe:	40ca      	lsrs	r2, r1
 8000400:	40cc      	lsrs	r4, r1
 8000402:	4317      	orrs	r7, r2
 8000404:	e9c6 7400 	strd	r7, r4, [r6]
 8000408:	4618      	mov	r0, r3
 800040a:	2100      	movs	r1, #0
 800040c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000410:	f1c3 0120 	rsb	r1, r3, #32
 8000414:	fa02 fc03 	lsl.w	ip, r2, r3
 8000418:	fa20 f201 	lsr.w	r2, r0, r1
 800041c:	fa25 f101 	lsr.w	r1, r5, r1
 8000420:	409d      	lsls	r5, r3
 8000422:	432a      	orrs	r2, r5
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000430:	fb07 1510 	mls	r5, r7, r0, r1
 8000434:	0c11      	lsrs	r1, r2, #16
 8000436:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800043a:	fb00 f50e 	mul.w	r5, r0, lr
 800043e:	428d      	cmp	r5, r1
 8000440:	fa04 f403 	lsl.w	r4, r4, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x258>
 8000446:	eb1c 0101 	adds.w	r1, ip, r1
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000450:	428d      	cmp	r5, r1
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000454:	3802      	subs	r0, #2
 8000456:	4461      	add	r1, ip
 8000458:	1b49      	subs	r1, r1, r5
 800045a:	b292      	uxth	r2, r2
 800045c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000460:	fb07 1115 	mls	r1, r7, r5, r1
 8000464:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000468:	fb05 f10e 	mul.w	r1, r5, lr
 800046c:	4291      	cmp	r1, r2
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x282>
 8000470:	eb1c 0202 	adds.w	r2, ip, r2
 8000474:	f105 38ff 	add.w	r8, r5, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2a8>
 800047a:	4291      	cmp	r1, r2
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2a8>
 800047e:	3d02      	subs	r5, #2
 8000480:	4462      	add	r2, ip
 8000482:	1a52      	subs	r2, r2, r1
 8000484:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0xfc>
 800048a:	4631      	mov	r1, r6
 800048c:	4630      	mov	r0, r6
 800048e:	e708      	b.n	80002a2 <__udivmoddi4+0xa2>
 8000490:	4639      	mov	r1, r7
 8000492:	e6e6      	b.n	8000262 <__udivmoddi4+0x62>
 8000494:	4610      	mov	r0, r2
 8000496:	e6fb      	b.n	8000290 <__udivmoddi4+0x90>
 8000498:	4548      	cmp	r0, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f0>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004a4:	3b01      	subs	r3, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f0>
 80004a8:	4645      	mov	r5, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x282>
 80004ac:	462b      	mov	r3, r5
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1da>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x258>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b0>
 80004b8:	3d02      	subs	r5, #2
 80004ba:	4462      	add	r2, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x124>
 80004be:	4608      	mov	r0, r1
 80004c0:	e70a      	b.n	80002d8 <__udivmoddi4+0xd8>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x14e>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d0:	f000 fac4 	bl	8000a5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d4:	f000 f824 	bl	8000520 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d8:	f000 f88c 	bl	80005f4 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80004dc:	f001 fb7e 	bl	8001bdc <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Task1 */
  Task1Handle = osThreadNew(StartTask1, NULL, &Task1_attributes);
 80004e0:	4a09      	ldr	r2, [pc, #36]	; (8000508 <main+0x3c>)
 80004e2:	2100      	movs	r1, #0
 80004e4:	4809      	ldr	r0, [pc, #36]	; (800050c <main+0x40>)
 80004e6:	f001 fbc3 	bl	8001c70 <osThreadNew>
 80004ea:	4603      	mov	r3, r0
 80004ec:	4a08      	ldr	r2, [pc, #32]	; (8000510 <main+0x44>)
 80004ee:	6013      	str	r3, [r2, #0]

  /* creation of Task2 */
  Task2Handle = osThreadNew(StartTask2, NULL, &Task2_attributes);
 80004f0:	4a08      	ldr	r2, [pc, #32]	; (8000514 <main+0x48>)
 80004f2:	2100      	movs	r1, #0
 80004f4:	4808      	ldr	r0, [pc, #32]	; (8000518 <main+0x4c>)
 80004f6:	f001 fbbb 	bl	8001c70 <osThreadNew>
 80004fa:	4603      	mov	r3, r0
 80004fc:	4a07      	ldr	r2, [pc, #28]	; (800051c <main+0x50>)
 80004fe:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000500:	f001 fb90 	bl	8001c24 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000504:	e7fe      	b.n	8000504 <main+0x38>
 8000506:	bf00      	nop
 8000508:	08005250 	.word	0x08005250
 800050c:	08000645 	.word	0x08000645
 8000510:	20000088 	.word	0x20000088
 8000514:	08005274 	.word	0x08005274
 8000518:	08000661 	.word	0x08000661
 800051c:	2000008c 	.word	0x2000008c

08000520 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b094      	sub	sp, #80	; 0x50
 8000524:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000526:	f107 0320 	add.w	r3, r7, #32
 800052a:	2230      	movs	r2, #48	; 0x30
 800052c:	2100      	movs	r1, #0
 800052e:	4618      	mov	r0, r3
 8000530:	f004 fba2 	bl	8004c78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000534:	f107 030c 	add.w	r3, r7, #12
 8000538:	2200      	movs	r2, #0
 800053a:	601a      	str	r2, [r3, #0]
 800053c:	605a      	str	r2, [r3, #4]
 800053e:	609a      	str	r2, [r3, #8]
 8000540:	60da      	str	r2, [r3, #12]
 8000542:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000544:	2300      	movs	r3, #0
 8000546:	60bb      	str	r3, [r7, #8]
 8000548:	4b28      	ldr	r3, [pc, #160]	; (80005ec <SystemClock_Config+0xcc>)
 800054a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800054c:	4a27      	ldr	r2, [pc, #156]	; (80005ec <SystemClock_Config+0xcc>)
 800054e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000552:	6413      	str	r3, [r2, #64]	; 0x40
 8000554:	4b25      	ldr	r3, [pc, #148]	; (80005ec <SystemClock_Config+0xcc>)
 8000556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000558:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800055c:	60bb      	str	r3, [r7, #8]
 800055e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000560:	2300      	movs	r3, #0
 8000562:	607b      	str	r3, [r7, #4]
 8000564:	4b22      	ldr	r3, [pc, #136]	; (80005f0 <SystemClock_Config+0xd0>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	4a21      	ldr	r2, [pc, #132]	; (80005f0 <SystemClock_Config+0xd0>)
 800056a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800056e:	6013      	str	r3, [r2, #0]
 8000570:	4b1f      	ldr	r3, [pc, #124]	; (80005f0 <SystemClock_Config+0xd0>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000578:	607b      	str	r3, [r7, #4]
 800057a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800057c:	2302      	movs	r3, #2
 800057e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000580:	2301      	movs	r3, #1
 8000582:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000584:	2310      	movs	r3, #16
 8000586:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000588:	2302      	movs	r3, #2
 800058a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800058c:	2300      	movs	r3, #0
 800058e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000590:	2308      	movs	r3, #8
 8000592:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000594:	2332      	movs	r3, #50	; 0x32
 8000596:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000598:	2304      	movs	r3, #4
 800059a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800059c:	2307      	movs	r3, #7
 800059e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005a0:	f107 0320 	add.w	r3, r7, #32
 80005a4:	4618      	mov	r0, r3
 80005a6:	f000 fb7d 	bl	8000ca4 <HAL_RCC_OscConfig>
 80005aa:	4603      	mov	r3, r0
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d001      	beq.n	80005b4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005b0:	f000 f87e 	bl	80006b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005b4:	230f      	movs	r3, #15
 80005b6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005b8:	2302      	movs	r3, #2
 80005ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005bc:	2300      	movs	r3, #0
 80005be:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005c0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005c4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005ca:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005cc:	f107 030c 	add.w	r3, r7, #12
 80005d0:	2100      	movs	r1, #0
 80005d2:	4618      	mov	r0, r3
 80005d4:	f000 fdde 	bl	8001194 <HAL_RCC_ClockConfig>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d001      	beq.n	80005e2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80005de:	f000 f867 	bl	80006b0 <Error_Handler>
  }
}
 80005e2:	bf00      	nop
 80005e4:	3750      	adds	r7, #80	; 0x50
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	40023800 	.word	0x40023800
 80005f0:	40007000 	.word	0x40007000

080005f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005f4:	b480      	push	{r7}
 80005f6:	b083      	sub	sp, #12
 80005f8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005fa:	2300      	movs	r3, #0
 80005fc:	607b      	str	r3, [r7, #4]
 80005fe:	4b10      	ldr	r3, [pc, #64]	; (8000640 <MX_GPIO_Init+0x4c>)
 8000600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000602:	4a0f      	ldr	r2, [pc, #60]	; (8000640 <MX_GPIO_Init+0x4c>)
 8000604:	f043 0301 	orr.w	r3, r3, #1
 8000608:	6313      	str	r3, [r2, #48]	; 0x30
 800060a:	4b0d      	ldr	r3, [pc, #52]	; (8000640 <MX_GPIO_Init+0x4c>)
 800060c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060e:	f003 0301 	and.w	r3, r3, #1
 8000612:	607b      	str	r3, [r7, #4]
 8000614:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000616:	2300      	movs	r3, #0
 8000618:	603b      	str	r3, [r7, #0]
 800061a:	4b09      	ldr	r3, [pc, #36]	; (8000640 <MX_GPIO_Init+0x4c>)
 800061c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061e:	4a08      	ldr	r2, [pc, #32]	; (8000640 <MX_GPIO_Init+0x4c>)
 8000620:	f043 0302 	orr.w	r3, r3, #2
 8000624:	6313      	str	r3, [r2, #48]	; 0x30
 8000626:	4b06      	ldr	r3, [pc, #24]	; (8000640 <MX_GPIO_Init+0x4c>)
 8000628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062a:	f003 0302 	and.w	r3, r3, #2
 800062e:	603b      	str	r3, [r7, #0]
 8000630:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000632:	bf00      	nop
 8000634:	370c      	adds	r7, #12
 8000636:	46bd      	mov	sp, r7
 8000638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063c:	4770      	bx	lr
 800063e:	bf00      	nop
 8000640:	40023800 	.word	0x40023800

08000644 <StartTask1>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask1 */
void StartTask1(void *argument)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b082      	sub	sp, #8
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	printf("Task-1 \n");
 800064c:	4803      	ldr	r0, [pc, #12]	; (800065c <StartTask1+0x18>)
 800064e:	f004 fa33 	bl	8004ab8 <puts>
    osDelay(1000);
 8000652:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000656:	f001 fbca 	bl	8001dee <osDelay>
	printf("Task-1 \n");
 800065a:	e7f7      	b.n	800064c <StartTask1+0x8>
 800065c:	08005228 	.word	0x08005228

08000660 <StartTask2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask2 */
void StartTask2(void *argument)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask2 */
  /* Infinite loop */
  for(;;)
  {
	printf("Task-2 \n");
 8000668:	4806      	ldr	r0, [pc, #24]	; (8000684 <StartTask2+0x24>)
 800066a:	f004 fa25 	bl	8004ab8 <puts>
    osDelay(1000);
 800066e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000672:	f001 fbbc 	bl	8001dee <osDelay>
    osThreadTerminate(Task1Handle);
 8000676:	4b04      	ldr	r3, [pc, #16]	; (8000688 <StartTask2+0x28>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	4618      	mov	r0, r3
 800067c:	f001 fb8a 	bl	8001d94 <osThreadTerminate>
	printf("Task-2 \n");
 8000680:	e7f2      	b.n	8000668 <StartTask2+0x8>
 8000682:	bf00      	nop
 8000684:	08005230 	.word	0x08005230
 8000688:	20000088 	.word	0x20000088

0800068c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b082      	sub	sp, #8
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a04      	ldr	r2, [pc, #16]	; (80006ac <HAL_TIM_PeriodElapsedCallback+0x20>)
 800069a:	4293      	cmp	r3, r2
 800069c:	d101      	bne.n	80006a2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800069e:	f000 f9ff 	bl	8000aa0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80006a2:	bf00      	nop
 80006a4:	3708      	adds	r7, #8
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	40001000 	.word	0x40001000

080006b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006b0:	b480      	push	{r7}
 80006b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006b4:	b672      	cpsid	i
}
 80006b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006b8:	e7fe      	b.n	80006b8 <Error_Handler+0x8>
	...

080006bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b082      	sub	sp, #8
 80006c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006c2:	2300      	movs	r3, #0
 80006c4:	607b      	str	r3, [r7, #4]
 80006c6:	4b12      	ldr	r3, [pc, #72]	; (8000710 <HAL_MspInit+0x54>)
 80006c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006ca:	4a11      	ldr	r2, [pc, #68]	; (8000710 <HAL_MspInit+0x54>)
 80006cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006d0:	6453      	str	r3, [r2, #68]	; 0x44
 80006d2:	4b0f      	ldr	r3, [pc, #60]	; (8000710 <HAL_MspInit+0x54>)
 80006d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006da:	607b      	str	r3, [r7, #4]
 80006dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006de:	2300      	movs	r3, #0
 80006e0:	603b      	str	r3, [r7, #0]
 80006e2:	4b0b      	ldr	r3, [pc, #44]	; (8000710 <HAL_MspInit+0x54>)
 80006e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e6:	4a0a      	ldr	r2, [pc, #40]	; (8000710 <HAL_MspInit+0x54>)
 80006e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006ec:	6413      	str	r3, [r2, #64]	; 0x40
 80006ee:	4b08      	ldr	r3, [pc, #32]	; (8000710 <HAL_MspInit+0x54>)
 80006f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006f6:	603b      	str	r3, [r7, #0]
 80006f8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80006fa:	2200      	movs	r2, #0
 80006fc:	210f      	movs	r1, #15
 80006fe:	f06f 0001 	mvn.w	r0, #1
 8000702:	f000 faa5 	bl	8000c50 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000706:	bf00      	nop
 8000708:	3708      	adds	r7, #8
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	40023800 	.word	0x40023800

08000714 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b08e      	sub	sp, #56	; 0x38
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800071c:	2300      	movs	r3, #0
 800071e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000720:	2300      	movs	r3, #0
 8000722:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000724:	2300      	movs	r3, #0
 8000726:	60fb      	str	r3, [r7, #12]
 8000728:	4b33      	ldr	r3, [pc, #204]	; (80007f8 <HAL_InitTick+0xe4>)
 800072a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800072c:	4a32      	ldr	r2, [pc, #200]	; (80007f8 <HAL_InitTick+0xe4>)
 800072e:	f043 0310 	orr.w	r3, r3, #16
 8000732:	6413      	str	r3, [r2, #64]	; 0x40
 8000734:	4b30      	ldr	r3, [pc, #192]	; (80007f8 <HAL_InitTick+0xe4>)
 8000736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000738:	f003 0310 	and.w	r3, r3, #16
 800073c:	60fb      	str	r3, [r7, #12]
 800073e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000740:	f107 0210 	add.w	r2, r7, #16
 8000744:	f107 0314 	add.w	r3, r7, #20
 8000748:	4611      	mov	r1, r2
 800074a:	4618      	mov	r0, r3
 800074c:	f000 ff2e 	bl	80015ac <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000750:	6a3b      	ldr	r3, [r7, #32]
 8000752:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000756:	2b00      	cmp	r3, #0
 8000758:	d103      	bne.n	8000762 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800075a:	f000 ff13 	bl	8001584 <HAL_RCC_GetPCLK1Freq>
 800075e:	6378      	str	r0, [r7, #52]	; 0x34
 8000760:	e004      	b.n	800076c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000762:	f000 ff0f 	bl	8001584 <HAL_RCC_GetPCLK1Freq>
 8000766:	4603      	mov	r3, r0
 8000768:	005b      	lsls	r3, r3, #1
 800076a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800076c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800076e:	4a23      	ldr	r2, [pc, #140]	; (80007fc <HAL_InitTick+0xe8>)
 8000770:	fba2 2303 	umull	r2, r3, r2, r3
 8000774:	0c9b      	lsrs	r3, r3, #18
 8000776:	3b01      	subs	r3, #1
 8000778:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800077a:	4b21      	ldr	r3, [pc, #132]	; (8000800 <HAL_InitTick+0xec>)
 800077c:	4a21      	ldr	r2, [pc, #132]	; (8000804 <HAL_InitTick+0xf0>)
 800077e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000780:	4b1f      	ldr	r3, [pc, #124]	; (8000800 <HAL_InitTick+0xec>)
 8000782:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000786:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000788:	4a1d      	ldr	r2, [pc, #116]	; (8000800 <HAL_InitTick+0xec>)
 800078a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800078c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800078e:	4b1c      	ldr	r3, [pc, #112]	; (8000800 <HAL_InitTick+0xec>)
 8000790:	2200      	movs	r2, #0
 8000792:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000794:	4b1a      	ldr	r3, [pc, #104]	; (8000800 <HAL_InitTick+0xec>)
 8000796:	2200      	movs	r2, #0
 8000798:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800079a:	4b19      	ldr	r3, [pc, #100]	; (8000800 <HAL_InitTick+0xec>)
 800079c:	2200      	movs	r2, #0
 800079e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80007a0:	4817      	ldr	r0, [pc, #92]	; (8000800 <HAL_InitTick+0xec>)
 80007a2:	f000 ff35 	bl	8001610 <HAL_TIM_Base_Init>
 80007a6:	4603      	mov	r3, r0
 80007a8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80007ac:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d11b      	bne.n	80007ec <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80007b4:	4812      	ldr	r0, [pc, #72]	; (8000800 <HAL_InitTick+0xec>)
 80007b6:	f000 ff85 	bl	80016c4 <HAL_TIM_Base_Start_IT>
 80007ba:	4603      	mov	r3, r0
 80007bc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80007c0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d111      	bne.n	80007ec <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80007c8:	2036      	movs	r0, #54	; 0x36
 80007ca:	f000 fa5d 	bl	8000c88 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	2b0f      	cmp	r3, #15
 80007d2:	d808      	bhi.n	80007e6 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80007d4:	2200      	movs	r2, #0
 80007d6:	6879      	ldr	r1, [r7, #4]
 80007d8:	2036      	movs	r0, #54	; 0x36
 80007da:	f000 fa39 	bl	8000c50 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80007de:	4a0a      	ldr	r2, [pc, #40]	; (8000808 <HAL_InitTick+0xf4>)
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	6013      	str	r3, [r2, #0]
 80007e4:	e002      	b.n	80007ec <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80007e6:	2301      	movs	r3, #1
 80007e8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80007ec:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80007f0:	4618      	mov	r0, r3
 80007f2:	3738      	adds	r7, #56	; 0x38
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	40023800 	.word	0x40023800
 80007fc:	431bde83 	.word	0x431bde83
 8000800:	20000090 	.word	0x20000090
 8000804:	40001000 	.word	0x40001000
 8000808:	20000004 	.word	0x20000004

0800080c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000810:	e7fe      	b.n	8000810 <NMI_Handler+0x4>

08000812 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000812:	b480      	push	{r7}
 8000814:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000816:	e7fe      	b.n	8000816 <HardFault_Handler+0x4>

08000818 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800081c:	e7fe      	b.n	800081c <MemManage_Handler+0x4>

0800081e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800081e:	b480      	push	{r7}
 8000820:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000822:	e7fe      	b.n	8000822 <BusFault_Handler+0x4>

08000824 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000828:	e7fe      	b.n	8000828 <UsageFault_Handler+0x4>

0800082a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800082a:	b480      	push	{r7}
 800082c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800082e:	bf00      	nop
 8000830:	46bd      	mov	sp, r7
 8000832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000836:	4770      	bx	lr

08000838 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800083c:	4802      	ldr	r0, [pc, #8]	; (8000848 <TIM6_DAC_IRQHandler+0x10>)
 800083e:	f000 ffb1 	bl	80017a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000842:	bf00      	nop
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	20000090 	.word	0x20000090

0800084c <ITM_SendChar>:
//ITM Register Address
#define ITM_STIMULUS_PORT0	*((volatile uint32_t*) 0xE0000000)
#define ITM_TRACE_EN		*((volatile uint32_t*) 0xE0000E00)

void ITM_SendChar(uint8_t ch)
{
 800084c:	b480      	push	{r7}
 800084e:	b083      	sub	sp, #12
 8000850:	af00      	add	r7, sp, #0
 8000852:	4603      	mov	r3, r0
 8000854:	71fb      	strb	r3, [r7, #7]
	// Enable TRCENA
	DEMCR |= (1<<24);
 8000856:	4b0f      	ldr	r3, [pc, #60]	; (8000894 <ITM_SendChar+0x48>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	4a0e      	ldr	r2, [pc, #56]	; (8000894 <ITM_SendChar+0x48>)
 800085c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000860:	6013      	str	r3, [r2, #0]

	// Enable Stimulus Port0
	ITM_TRACE_EN |=(1<<0);
 8000862:	4b0d      	ldr	r3, [pc, #52]	; (8000898 <ITM_SendChar+0x4c>)
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	4a0c      	ldr	r2, [pc, #48]	; (8000898 <ITM_SendChar+0x4c>)
 8000868:	f043 0301 	orr.w	r3, r3, #1
 800086c:	6013      	str	r3, [r2, #0]

	// Read FIFO Status in bit[0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 800086e:	bf00      	nop
 8000870:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	f003 0301 	and.w	r3, r3, #1
 800087a:	2b00      	cmp	r3, #0
 800087c:	d0f8      	beq.n	8000870 <ITM_SendChar+0x24>

	// Write to ITM Stimulus Port0
	ITM_STIMULUS_PORT0 = ch;
 800087e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8000882:	79fb      	ldrb	r3, [r7, #7]
 8000884:	6013      	str	r3, [r2, #0]
}
 8000886:	bf00      	nop
 8000888:	370c      	adds	r7, #12
 800088a:	46bd      	mov	sp, r7
 800088c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000890:	4770      	bx	lr
 8000892:	bf00      	nop
 8000894:	e000edfc 	.word	0xe000edfc
 8000898:	e0000e00 	.word	0xe0000e00

0800089c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b086      	sub	sp, #24
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	60f8      	str	r0, [r7, #12]
 80008a4:	60b9      	str	r1, [r7, #8]
 80008a6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008a8:	2300      	movs	r3, #0
 80008aa:	617b      	str	r3, [r7, #20]
 80008ac:	e00a      	b.n	80008c4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80008ae:	f3af 8000 	nop.w
 80008b2:	4601      	mov	r1, r0
 80008b4:	68bb      	ldr	r3, [r7, #8]
 80008b6:	1c5a      	adds	r2, r3, #1
 80008b8:	60ba      	str	r2, [r7, #8]
 80008ba:	b2ca      	uxtb	r2, r1
 80008bc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008be:	697b      	ldr	r3, [r7, #20]
 80008c0:	3301      	adds	r3, #1
 80008c2:	617b      	str	r3, [r7, #20]
 80008c4:	697a      	ldr	r2, [r7, #20]
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	429a      	cmp	r2, r3
 80008ca:	dbf0      	blt.n	80008ae <_read+0x12>
  }

  return len;
 80008cc:	687b      	ldr	r3, [r7, #4]
}
 80008ce:	4618      	mov	r0, r3
 80008d0:	3718      	adds	r7, #24
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}

080008d6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80008d6:	b580      	push	{r7, lr}
 80008d8:	b086      	sub	sp, #24
 80008da:	af00      	add	r7, sp, #0
 80008dc:	60f8      	str	r0, [r7, #12]
 80008de:	60b9      	str	r1, [r7, #8]
 80008e0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008e2:	2300      	movs	r3, #0
 80008e4:	617b      	str	r3, [r7, #20]
 80008e6:	e009      	b.n	80008fc <_write+0x26>
  {
    //__io_putchar(*ptr++);
    ITM_SendChar(*ptr++);
 80008e8:	68bb      	ldr	r3, [r7, #8]
 80008ea:	1c5a      	adds	r2, r3, #1
 80008ec:	60ba      	str	r2, [r7, #8]
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	4618      	mov	r0, r3
 80008f2:	f7ff ffab 	bl	800084c <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008f6:	697b      	ldr	r3, [r7, #20]
 80008f8:	3301      	adds	r3, #1
 80008fa:	617b      	str	r3, [r7, #20]
 80008fc:	697a      	ldr	r2, [r7, #20]
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	429a      	cmp	r2, r3
 8000902:	dbf1      	blt.n	80008e8 <_write+0x12>
  }
  return len;
 8000904:	687b      	ldr	r3, [r7, #4]
}
 8000906:	4618      	mov	r0, r3
 8000908:	3718      	adds	r7, #24
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}

0800090e <_close>:

int _close(int file)
{
 800090e:	b480      	push	{r7}
 8000910:	b083      	sub	sp, #12
 8000912:	af00      	add	r7, sp, #0
 8000914:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000916:	f04f 33ff 	mov.w	r3, #4294967295
}
 800091a:	4618      	mov	r0, r3
 800091c:	370c      	adds	r7, #12
 800091e:	46bd      	mov	sp, r7
 8000920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000924:	4770      	bx	lr

08000926 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000926:	b480      	push	{r7}
 8000928:	b083      	sub	sp, #12
 800092a:	af00      	add	r7, sp, #0
 800092c:	6078      	str	r0, [r7, #4]
 800092e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000930:	683b      	ldr	r3, [r7, #0]
 8000932:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000936:	605a      	str	r2, [r3, #4]
  return 0;
 8000938:	2300      	movs	r3, #0
}
 800093a:	4618      	mov	r0, r3
 800093c:	370c      	adds	r7, #12
 800093e:	46bd      	mov	sp, r7
 8000940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000944:	4770      	bx	lr

08000946 <_isatty>:

int _isatty(int file)
{
 8000946:	b480      	push	{r7}
 8000948:	b083      	sub	sp, #12
 800094a:	af00      	add	r7, sp, #0
 800094c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800094e:	2301      	movs	r3, #1
}
 8000950:	4618      	mov	r0, r3
 8000952:	370c      	adds	r7, #12
 8000954:	46bd      	mov	sp, r7
 8000956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095a:	4770      	bx	lr

0800095c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800095c:	b480      	push	{r7}
 800095e:	b085      	sub	sp, #20
 8000960:	af00      	add	r7, sp, #0
 8000962:	60f8      	str	r0, [r7, #12]
 8000964:	60b9      	str	r1, [r7, #8]
 8000966:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000968:	2300      	movs	r3, #0
}
 800096a:	4618      	mov	r0, r3
 800096c:	3714      	adds	r7, #20
 800096e:	46bd      	mov	sp, r7
 8000970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000974:	4770      	bx	lr
	...

08000978 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b086      	sub	sp, #24
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000980:	4a14      	ldr	r2, [pc, #80]	; (80009d4 <_sbrk+0x5c>)
 8000982:	4b15      	ldr	r3, [pc, #84]	; (80009d8 <_sbrk+0x60>)
 8000984:	1ad3      	subs	r3, r2, r3
 8000986:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000988:	697b      	ldr	r3, [r7, #20]
 800098a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800098c:	4b13      	ldr	r3, [pc, #76]	; (80009dc <_sbrk+0x64>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	2b00      	cmp	r3, #0
 8000992:	d102      	bne.n	800099a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000994:	4b11      	ldr	r3, [pc, #68]	; (80009dc <_sbrk+0x64>)
 8000996:	4a12      	ldr	r2, [pc, #72]	; (80009e0 <_sbrk+0x68>)
 8000998:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800099a:	4b10      	ldr	r3, [pc, #64]	; (80009dc <_sbrk+0x64>)
 800099c:	681a      	ldr	r2, [r3, #0]
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	4413      	add	r3, r2
 80009a2:	693a      	ldr	r2, [r7, #16]
 80009a4:	429a      	cmp	r2, r3
 80009a6:	d207      	bcs.n	80009b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009a8:	f004 f9b4 	bl	8004d14 <__errno>
 80009ac:	4603      	mov	r3, r0
 80009ae:	220c      	movs	r2, #12
 80009b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009b2:	f04f 33ff 	mov.w	r3, #4294967295
 80009b6:	e009      	b.n	80009cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009b8:	4b08      	ldr	r3, [pc, #32]	; (80009dc <_sbrk+0x64>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009be:	4b07      	ldr	r3, [pc, #28]	; (80009dc <_sbrk+0x64>)
 80009c0:	681a      	ldr	r2, [r3, #0]
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	4413      	add	r3, r2
 80009c6:	4a05      	ldr	r2, [pc, #20]	; (80009dc <_sbrk+0x64>)
 80009c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009ca:	68fb      	ldr	r3, [r7, #12]
}
 80009cc:	4618      	mov	r0, r3
 80009ce:	3718      	adds	r7, #24
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	20020000 	.word	0x20020000
 80009d8:	00000400 	.word	0x00000400
 80009dc:	200000d8 	.word	0x200000d8
 80009e0:	20004b80 	.word	0x20004b80

080009e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009e8:	4b06      	ldr	r3, [pc, #24]	; (8000a04 <SystemInit+0x20>)
 80009ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009ee:	4a05      	ldr	r2, [pc, #20]	; (8000a04 <SystemInit+0x20>)
 80009f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009f8:	bf00      	nop
 80009fa:	46bd      	mov	sp, r7
 80009fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop
 8000a04:	e000ed00 	.word	0xe000ed00

08000a08 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000a08:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a40 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000a0c:	f7ff ffea 	bl	80009e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a10:	480c      	ldr	r0, [pc, #48]	; (8000a44 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a12:	490d      	ldr	r1, [pc, #52]	; (8000a48 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a14:	4a0d      	ldr	r2, [pc, #52]	; (8000a4c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a18:	e002      	b.n	8000a20 <LoopCopyDataInit>

08000a1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a1e:	3304      	adds	r3, #4

08000a20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a24:	d3f9      	bcc.n	8000a1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a26:	4a0a      	ldr	r2, [pc, #40]	; (8000a50 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a28:	4c0a      	ldr	r4, [pc, #40]	; (8000a54 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a2c:	e001      	b.n	8000a32 <LoopFillZerobss>

08000a2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a30:	3204      	adds	r2, #4

08000a32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a34:	d3fb      	bcc.n	8000a2e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a36:	f004 f973 	bl	8004d20 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a3a:	f7ff fd47 	bl	80004cc <main>
  bx  lr    
 8000a3e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000a40:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a48:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000a4c:	080052c0 	.word	0x080052c0
  ldr r2, =_sbss
 8000a50:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000a54:	20004b7c 	.word	0x20004b7c

08000a58 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a58:	e7fe      	b.n	8000a58 <ADC_IRQHandler>
	...

08000a5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a60:	4b0e      	ldr	r3, [pc, #56]	; (8000a9c <HAL_Init+0x40>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	4a0d      	ldr	r2, [pc, #52]	; (8000a9c <HAL_Init+0x40>)
 8000a66:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a6a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a6c:	4b0b      	ldr	r3, [pc, #44]	; (8000a9c <HAL_Init+0x40>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	4a0a      	ldr	r2, [pc, #40]	; (8000a9c <HAL_Init+0x40>)
 8000a72:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a76:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a78:	4b08      	ldr	r3, [pc, #32]	; (8000a9c <HAL_Init+0x40>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	4a07      	ldr	r2, [pc, #28]	; (8000a9c <HAL_Init+0x40>)
 8000a7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a82:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a84:	2003      	movs	r0, #3
 8000a86:	f000 f8d8 	bl	8000c3a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a8a:	200f      	movs	r0, #15
 8000a8c:	f7ff fe42 	bl	8000714 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a90:	f7ff fe14 	bl	80006bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a94:	2300      	movs	r3, #0
}
 8000a96:	4618      	mov	r0, r3
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	40023c00 	.word	0x40023c00

08000aa0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000aa4:	4b06      	ldr	r3, [pc, #24]	; (8000ac0 <HAL_IncTick+0x20>)
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	461a      	mov	r2, r3
 8000aaa:	4b06      	ldr	r3, [pc, #24]	; (8000ac4 <HAL_IncTick+0x24>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	4413      	add	r3, r2
 8000ab0:	4a04      	ldr	r2, [pc, #16]	; (8000ac4 <HAL_IncTick+0x24>)
 8000ab2:	6013      	str	r3, [r2, #0]
}
 8000ab4:	bf00      	nop
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abc:	4770      	bx	lr
 8000abe:	bf00      	nop
 8000ac0:	20000008 	.word	0x20000008
 8000ac4:	200000dc 	.word	0x200000dc

08000ac8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  return uwTick;
 8000acc:	4b03      	ldr	r3, [pc, #12]	; (8000adc <HAL_GetTick+0x14>)
 8000ace:	681b      	ldr	r3, [r3, #0]
}
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop
 8000adc:	200000dc 	.word	0x200000dc

08000ae0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b085      	sub	sp, #20
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	f003 0307 	and.w	r3, r3, #7
 8000aee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000af0:	4b0c      	ldr	r3, [pc, #48]	; (8000b24 <__NVIC_SetPriorityGrouping+0x44>)
 8000af2:	68db      	ldr	r3, [r3, #12]
 8000af4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000af6:	68ba      	ldr	r2, [r7, #8]
 8000af8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000afc:	4013      	ands	r3, r2
 8000afe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b04:	68bb      	ldr	r3, [r7, #8]
 8000b06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b12:	4a04      	ldr	r2, [pc, #16]	; (8000b24 <__NVIC_SetPriorityGrouping+0x44>)
 8000b14:	68bb      	ldr	r3, [r7, #8]
 8000b16:	60d3      	str	r3, [r2, #12]
}
 8000b18:	bf00      	nop
 8000b1a:	3714      	adds	r7, #20
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b22:	4770      	bx	lr
 8000b24:	e000ed00 	.word	0xe000ed00

08000b28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b2c:	4b04      	ldr	r3, [pc, #16]	; (8000b40 <__NVIC_GetPriorityGrouping+0x18>)
 8000b2e:	68db      	ldr	r3, [r3, #12]
 8000b30:	0a1b      	lsrs	r3, r3, #8
 8000b32:	f003 0307 	and.w	r3, r3, #7
}
 8000b36:	4618      	mov	r0, r3
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3e:	4770      	bx	lr
 8000b40:	e000ed00 	.word	0xe000ed00

08000b44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b44:	b480      	push	{r7}
 8000b46:	b083      	sub	sp, #12
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	db0b      	blt.n	8000b6e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b56:	79fb      	ldrb	r3, [r7, #7]
 8000b58:	f003 021f 	and.w	r2, r3, #31
 8000b5c:	4907      	ldr	r1, [pc, #28]	; (8000b7c <__NVIC_EnableIRQ+0x38>)
 8000b5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b62:	095b      	lsrs	r3, r3, #5
 8000b64:	2001      	movs	r0, #1
 8000b66:	fa00 f202 	lsl.w	r2, r0, r2
 8000b6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000b6e:	bf00      	nop
 8000b70:	370c      	adds	r7, #12
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop
 8000b7c:	e000e100 	.word	0xe000e100

08000b80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b80:	b480      	push	{r7}
 8000b82:	b083      	sub	sp, #12
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	4603      	mov	r3, r0
 8000b88:	6039      	str	r1, [r7, #0]
 8000b8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	db0a      	blt.n	8000baa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	b2da      	uxtb	r2, r3
 8000b98:	490c      	ldr	r1, [pc, #48]	; (8000bcc <__NVIC_SetPriority+0x4c>)
 8000b9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b9e:	0112      	lsls	r2, r2, #4
 8000ba0:	b2d2      	uxtb	r2, r2
 8000ba2:	440b      	add	r3, r1
 8000ba4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ba8:	e00a      	b.n	8000bc0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000baa:	683b      	ldr	r3, [r7, #0]
 8000bac:	b2da      	uxtb	r2, r3
 8000bae:	4908      	ldr	r1, [pc, #32]	; (8000bd0 <__NVIC_SetPriority+0x50>)
 8000bb0:	79fb      	ldrb	r3, [r7, #7]
 8000bb2:	f003 030f 	and.w	r3, r3, #15
 8000bb6:	3b04      	subs	r3, #4
 8000bb8:	0112      	lsls	r2, r2, #4
 8000bba:	b2d2      	uxtb	r2, r2
 8000bbc:	440b      	add	r3, r1
 8000bbe:	761a      	strb	r2, [r3, #24]
}
 8000bc0:	bf00      	nop
 8000bc2:	370c      	adds	r7, #12
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bca:	4770      	bx	lr
 8000bcc:	e000e100 	.word	0xe000e100
 8000bd0:	e000ed00 	.word	0xe000ed00

08000bd4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b089      	sub	sp, #36	; 0x24
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	60f8      	str	r0, [r7, #12]
 8000bdc:	60b9      	str	r1, [r7, #8]
 8000bde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	f003 0307 	and.w	r3, r3, #7
 8000be6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000be8:	69fb      	ldr	r3, [r7, #28]
 8000bea:	f1c3 0307 	rsb	r3, r3, #7
 8000bee:	2b04      	cmp	r3, #4
 8000bf0:	bf28      	it	cs
 8000bf2:	2304      	movcs	r3, #4
 8000bf4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bf6:	69fb      	ldr	r3, [r7, #28]
 8000bf8:	3304      	adds	r3, #4
 8000bfa:	2b06      	cmp	r3, #6
 8000bfc:	d902      	bls.n	8000c04 <NVIC_EncodePriority+0x30>
 8000bfe:	69fb      	ldr	r3, [r7, #28]
 8000c00:	3b03      	subs	r3, #3
 8000c02:	e000      	b.n	8000c06 <NVIC_EncodePriority+0x32>
 8000c04:	2300      	movs	r3, #0
 8000c06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c08:	f04f 32ff 	mov.w	r2, #4294967295
 8000c0c:	69bb      	ldr	r3, [r7, #24]
 8000c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c12:	43da      	mvns	r2, r3
 8000c14:	68bb      	ldr	r3, [r7, #8]
 8000c16:	401a      	ands	r2, r3
 8000c18:	697b      	ldr	r3, [r7, #20]
 8000c1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c1c:	f04f 31ff 	mov.w	r1, #4294967295
 8000c20:	697b      	ldr	r3, [r7, #20]
 8000c22:	fa01 f303 	lsl.w	r3, r1, r3
 8000c26:	43d9      	mvns	r1, r3
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c2c:	4313      	orrs	r3, r2
         );
}
 8000c2e:	4618      	mov	r0, r3
 8000c30:	3724      	adds	r7, #36	; 0x24
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr

08000c3a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c3a:	b580      	push	{r7, lr}
 8000c3c:	b082      	sub	sp, #8
 8000c3e:	af00      	add	r7, sp, #0
 8000c40:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c42:	6878      	ldr	r0, [r7, #4]
 8000c44:	f7ff ff4c 	bl	8000ae0 <__NVIC_SetPriorityGrouping>
}
 8000c48:	bf00      	nop
 8000c4a:	3708      	adds	r7, #8
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}

08000c50 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b086      	sub	sp, #24
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	4603      	mov	r3, r0
 8000c58:	60b9      	str	r1, [r7, #8]
 8000c5a:	607a      	str	r2, [r7, #4]
 8000c5c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c62:	f7ff ff61 	bl	8000b28 <__NVIC_GetPriorityGrouping>
 8000c66:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c68:	687a      	ldr	r2, [r7, #4]
 8000c6a:	68b9      	ldr	r1, [r7, #8]
 8000c6c:	6978      	ldr	r0, [r7, #20]
 8000c6e:	f7ff ffb1 	bl	8000bd4 <NVIC_EncodePriority>
 8000c72:	4602      	mov	r2, r0
 8000c74:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c78:	4611      	mov	r1, r2
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f7ff ff80 	bl	8000b80 <__NVIC_SetPriority>
}
 8000c80:	bf00      	nop
 8000c82:	3718      	adds	r7, #24
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}

08000c88 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	4603      	mov	r3, r0
 8000c90:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c96:	4618      	mov	r0, r3
 8000c98:	f7ff ff54 	bl	8000b44 <__NVIC_EnableIRQ>
}
 8000c9c:	bf00      	nop
 8000c9e:	3708      	adds	r7, #8
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}

08000ca4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b086      	sub	sp, #24
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d101      	bne.n	8000cb6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	e267      	b.n	8001186 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	f003 0301 	and.w	r3, r3, #1
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d075      	beq.n	8000dae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000cc2:	4b88      	ldr	r3, [pc, #544]	; (8000ee4 <HAL_RCC_OscConfig+0x240>)
 8000cc4:	689b      	ldr	r3, [r3, #8]
 8000cc6:	f003 030c 	and.w	r3, r3, #12
 8000cca:	2b04      	cmp	r3, #4
 8000ccc:	d00c      	beq.n	8000ce8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000cce:	4b85      	ldr	r3, [pc, #532]	; (8000ee4 <HAL_RCC_OscConfig+0x240>)
 8000cd0:	689b      	ldr	r3, [r3, #8]
 8000cd2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000cd6:	2b08      	cmp	r3, #8
 8000cd8:	d112      	bne.n	8000d00 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000cda:	4b82      	ldr	r3, [pc, #520]	; (8000ee4 <HAL_RCC_OscConfig+0x240>)
 8000cdc:	685b      	ldr	r3, [r3, #4]
 8000cde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ce2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000ce6:	d10b      	bne.n	8000d00 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ce8:	4b7e      	ldr	r3, [pc, #504]	; (8000ee4 <HAL_RCC_OscConfig+0x240>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d05b      	beq.n	8000dac <HAL_RCC_OscConfig+0x108>
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	685b      	ldr	r3, [r3, #4]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d157      	bne.n	8000dac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000cfc:	2301      	movs	r3, #1
 8000cfe:	e242      	b.n	8001186 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	685b      	ldr	r3, [r3, #4]
 8000d04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d08:	d106      	bne.n	8000d18 <HAL_RCC_OscConfig+0x74>
 8000d0a:	4b76      	ldr	r3, [pc, #472]	; (8000ee4 <HAL_RCC_OscConfig+0x240>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	4a75      	ldr	r2, [pc, #468]	; (8000ee4 <HAL_RCC_OscConfig+0x240>)
 8000d10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d14:	6013      	str	r3, [r2, #0]
 8000d16:	e01d      	b.n	8000d54 <HAL_RCC_OscConfig+0xb0>
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	685b      	ldr	r3, [r3, #4]
 8000d1c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000d20:	d10c      	bne.n	8000d3c <HAL_RCC_OscConfig+0x98>
 8000d22:	4b70      	ldr	r3, [pc, #448]	; (8000ee4 <HAL_RCC_OscConfig+0x240>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	4a6f      	ldr	r2, [pc, #444]	; (8000ee4 <HAL_RCC_OscConfig+0x240>)
 8000d28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d2c:	6013      	str	r3, [r2, #0]
 8000d2e:	4b6d      	ldr	r3, [pc, #436]	; (8000ee4 <HAL_RCC_OscConfig+0x240>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	4a6c      	ldr	r2, [pc, #432]	; (8000ee4 <HAL_RCC_OscConfig+0x240>)
 8000d34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d38:	6013      	str	r3, [r2, #0]
 8000d3a:	e00b      	b.n	8000d54 <HAL_RCC_OscConfig+0xb0>
 8000d3c:	4b69      	ldr	r3, [pc, #420]	; (8000ee4 <HAL_RCC_OscConfig+0x240>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4a68      	ldr	r2, [pc, #416]	; (8000ee4 <HAL_RCC_OscConfig+0x240>)
 8000d42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d46:	6013      	str	r3, [r2, #0]
 8000d48:	4b66      	ldr	r3, [pc, #408]	; (8000ee4 <HAL_RCC_OscConfig+0x240>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4a65      	ldr	r2, [pc, #404]	; (8000ee4 <HAL_RCC_OscConfig+0x240>)
 8000d4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d52:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	685b      	ldr	r3, [r3, #4]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d013      	beq.n	8000d84 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d5c:	f7ff feb4 	bl	8000ac8 <HAL_GetTick>
 8000d60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d62:	e008      	b.n	8000d76 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d64:	f7ff feb0 	bl	8000ac8 <HAL_GetTick>
 8000d68:	4602      	mov	r2, r0
 8000d6a:	693b      	ldr	r3, [r7, #16]
 8000d6c:	1ad3      	subs	r3, r2, r3
 8000d6e:	2b64      	cmp	r3, #100	; 0x64
 8000d70:	d901      	bls.n	8000d76 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000d72:	2303      	movs	r3, #3
 8000d74:	e207      	b.n	8001186 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d76:	4b5b      	ldr	r3, [pc, #364]	; (8000ee4 <HAL_RCC_OscConfig+0x240>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d0f0      	beq.n	8000d64 <HAL_RCC_OscConfig+0xc0>
 8000d82:	e014      	b.n	8000dae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d84:	f7ff fea0 	bl	8000ac8 <HAL_GetTick>
 8000d88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d8a:	e008      	b.n	8000d9e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d8c:	f7ff fe9c 	bl	8000ac8 <HAL_GetTick>
 8000d90:	4602      	mov	r2, r0
 8000d92:	693b      	ldr	r3, [r7, #16]
 8000d94:	1ad3      	subs	r3, r2, r3
 8000d96:	2b64      	cmp	r3, #100	; 0x64
 8000d98:	d901      	bls.n	8000d9e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000d9a:	2303      	movs	r3, #3
 8000d9c:	e1f3      	b.n	8001186 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d9e:	4b51      	ldr	r3, [pc, #324]	; (8000ee4 <HAL_RCC_OscConfig+0x240>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d1f0      	bne.n	8000d8c <HAL_RCC_OscConfig+0xe8>
 8000daa:	e000      	b.n	8000dae <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000dac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	f003 0302 	and.w	r3, r3, #2
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d063      	beq.n	8000e82 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000dba:	4b4a      	ldr	r3, [pc, #296]	; (8000ee4 <HAL_RCC_OscConfig+0x240>)
 8000dbc:	689b      	ldr	r3, [r3, #8]
 8000dbe:	f003 030c 	and.w	r3, r3, #12
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d00b      	beq.n	8000dde <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000dc6:	4b47      	ldr	r3, [pc, #284]	; (8000ee4 <HAL_RCC_OscConfig+0x240>)
 8000dc8:	689b      	ldr	r3, [r3, #8]
 8000dca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000dce:	2b08      	cmp	r3, #8
 8000dd0:	d11c      	bne.n	8000e0c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000dd2:	4b44      	ldr	r3, [pc, #272]	; (8000ee4 <HAL_RCC_OscConfig+0x240>)
 8000dd4:	685b      	ldr	r3, [r3, #4]
 8000dd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d116      	bne.n	8000e0c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000dde:	4b41      	ldr	r3, [pc, #260]	; (8000ee4 <HAL_RCC_OscConfig+0x240>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	f003 0302 	and.w	r3, r3, #2
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d005      	beq.n	8000df6 <HAL_RCC_OscConfig+0x152>
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	68db      	ldr	r3, [r3, #12]
 8000dee:	2b01      	cmp	r3, #1
 8000df0:	d001      	beq.n	8000df6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000df2:	2301      	movs	r3, #1
 8000df4:	e1c7      	b.n	8001186 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000df6:	4b3b      	ldr	r3, [pc, #236]	; (8000ee4 <HAL_RCC_OscConfig+0x240>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	691b      	ldr	r3, [r3, #16]
 8000e02:	00db      	lsls	r3, r3, #3
 8000e04:	4937      	ldr	r1, [pc, #220]	; (8000ee4 <HAL_RCC_OscConfig+0x240>)
 8000e06:	4313      	orrs	r3, r2
 8000e08:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e0a:	e03a      	b.n	8000e82 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	68db      	ldr	r3, [r3, #12]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d020      	beq.n	8000e56 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000e14:	4b34      	ldr	r3, [pc, #208]	; (8000ee8 <HAL_RCC_OscConfig+0x244>)
 8000e16:	2201      	movs	r2, #1
 8000e18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e1a:	f7ff fe55 	bl	8000ac8 <HAL_GetTick>
 8000e1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e20:	e008      	b.n	8000e34 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e22:	f7ff fe51 	bl	8000ac8 <HAL_GetTick>
 8000e26:	4602      	mov	r2, r0
 8000e28:	693b      	ldr	r3, [r7, #16]
 8000e2a:	1ad3      	subs	r3, r2, r3
 8000e2c:	2b02      	cmp	r3, #2
 8000e2e:	d901      	bls.n	8000e34 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8000e30:	2303      	movs	r3, #3
 8000e32:	e1a8      	b.n	8001186 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e34:	4b2b      	ldr	r3, [pc, #172]	; (8000ee4 <HAL_RCC_OscConfig+0x240>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	f003 0302 	and.w	r3, r3, #2
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d0f0      	beq.n	8000e22 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e40:	4b28      	ldr	r3, [pc, #160]	; (8000ee4 <HAL_RCC_OscConfig+0x240>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	691b      	ldr	r3, [r3, #16]
 8000e4c:	00db      	lsls	r3, r3, #3
 8000e4e:	4925      	ldr	r1, [pc, #148]	; (8000ee4 <HAL_RCC_OscConfig+0x240>)
 8000e50:	4313      	orrs	r3, r2
 8000e52:	600b      	str	r3, [r1, #0]
 8000e54:	e015      	b.n	8000e82 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000e56:	4b24      	ldr	r3, [pc, #144]	; (8000ee8 <HAL_RCC_OscConfig+0x244>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e5c:	f7ff fe34 	bl	8000ac8 <HAL_GetTick>
 8000e60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e62:	e008      	b.n	8000e76 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e64:	f7ff fe30 	bl	8000ac8 <HAL_GetTick>
 8000e68:	4602      	mov	r2, r0
 8000e6a:	693b      	ldr	r3, [r7, #16]
 8000e6c:	1ad3      	subs	r3, r2, r3
 8000e6e:	2b02      	cmp	r3, #2
 8000e70:	d901      	bls.n	8000e76 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8000e72:	2303      	movs	r3, #3
 8000e74:	e187      	b.n	8001186 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e76:	4b1b      	ldr	r3, [pc, #108]	; (8000ee4 <HAL_RCC_OscConfig+0x240>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	f003 0302 	and.w	r3, r3, #2
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d1f0      	bne.n	8000e64 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	f003 0308 	and.w	r3, r3, #8
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d036      	beq.n	8000efc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	695b      	ldr	r3, [r3, #20]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d016      	beq.n	8000ec4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000e96:	4b15      	ldr	r3, [pc, #84]	; (8000eec <HAL_RCC_OscConfig+0x248>)
 8000e98:	2201      	movs	r2, #1
 8000e9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000e9c:	f7ff fe14 	bl	8000ac8 <HAL_GetTick>
 8000ea0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ea2:	e008      	b.n	8000eb6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000ea4:	f7ff fe10 	bl	8000ac8 <HAL_GetTick>
 8000ea8:	4602      	mov	r2, r0
 8000eaa:	693b      	ldr	r3, [r7, #16]
 8000eac:	1ad3      	subs	r3, r2, r3
 8000eae:	2b02      	cmp	r3, #2
 8000eb0:	d901      	bls.n	8000eb6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8000eb2:	2303      	movs	r3, #3
 8000eb4:	e167      	b.n	8001186 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000eb6:	4b0b      	ldr	r3, [pc, #44]	; (8000ee4 <HAL_RCC_OscConfig+0x240>)
 8000eb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000eba:	f003 0302 	and.w	r3, r3, #2
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d0f0      	beq.n	8000ea4 <HAL_RCC_OscConfig+0x200>
 8000ec2:	e01b      	b.n	8000efc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000ec4:	4b09      	ldr	r3, [pc, #36]	; (8000eec <HAL_RCC_OscConfig+0x248>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000eca:	f7ff fdfd 	bl	8000ac8 <HAL_GetTick>
 8000ece:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ed0:	e00e      	b.n	8000ef0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000ed2:	f7ff fdf9 	bl	8000ac8 <HAL_GetTick>
 8000ed6:	4602      	mov	r2, r0
 8000ed8:	693b      	ldr	r3, [r7, #16]
 8000eda:	1ad3      	subs	r3, r2, r3
 8000edc:	2b02      	cmp	r3, #2
 8000ede:	d907      	bls.n	8000ef0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8000ee0:	2303      	movs	r3, #3
 8000ee2:	e150      	b.n	8001186 <HAL_RCC_OscConfig+0x4e2>
 8000ee4:	40023800 	.word	0x40023800
 8000ee8:	42470000 	.word	0x42470000
 8000eec:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ef0:	4b88      	ldr	r3, [pc, #544]	; (8001114 <HAL_RCC_OscConfig+0x470>)
 8000ef2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000ef4:	f003 0302 	and.w	r3, r3, #2
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d1ea      	bne.n	8000ed2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	f003 0304 	and.w	r3, r3, #4
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	f000 8097 	beq.w	8001038 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f0e:	4b81      	ldr	r3, [pc, #516]	; (8001114 <HAL_RCC_OscConfig+0x470>)
 8000f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d10f      	bne.n	8000f3a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	60bb      	str	r3, [r7, #8]
 8000f1e:	4b7d      	ldr	r3, [pc, #500]	; (8001114 <HAL_RCC_OscConfig+0x470>)
 8000f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f22:	4a7c      	ldr	r2, [pc, #496]	; (8001114 <HAL_RCC_OscConfig+0x470>)
 8000f24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f28:	6413      	str	r3, [r2, #64]	; 0x40
 8000f2a:	4b7a      	ldr	r3, [pc, #488]	; (8001114 <HAL_RCC_OscConfig+0x470>)
 8000f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f32:	60bb      	str	r3, [r7, #8]
 8000f34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000f36:	2301      	movs	r3, #1
 8000f38:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f3a:	4b77      	ldr	r3, [pc, #476]	; (8001118 <HAL_RCC_OscConfig+0x474>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d118      	bne.n	8000f78 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f46:	4b74      	ldr	r3, [pc, #464]	; (8001118 <HAL_RCC_OscConfig+0x474>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	4a73      	ldr	r2, [pc, #460]	; (8001118 <HAL_RCC_OscConfig+0x474>)
 8000f4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f50:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000f52:	f7ff fdb9 	bl	8000ac8 <HAL_GetTick>
 8000f56:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f58:	e008      	b.n	8000f6c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f5a:	f7ff fdb5 	bl	8000ac8 <HAL_GetTick>
 8000f5e:	4602      	mov	r2, r0
 8000f60:	693b      	ldr	r3, [r7, #16]
 8000f62:	1ad3      	subs	r3, r2, r3
 8000f64:	2b02      	cmp	r3, #2
 8000f66:	d901      	bls.n	8000f6c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8000f68:	2303      	movs	r3, #3
 8000f6a:	e10c      	b.n	8001186 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f6c:	4b6a      	ldr	r3, [pc, #424]	; (8001118 <HAL_RCC_OscConfig+0x474>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d0f0      	beq.n	8000f5a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	689b      	ldr	r3, [r3, #8]
 8000f7c:	2b01      	cmp	r3, #1
 8000f7e:	d106      	bne.n	8000f8e <HAL_RCC_OscConfig+0x2ea>
 8000f80:	4b64      	ldr	r3, [pc, #400]	; (8001114 <HAL_RCC_OscConfig+0x470>)
 8000f82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f84:	4a63      	ldr	r2, [pc, #396]	; (8001114 <HAL_RCC_OscConfig+0x470>)
 8000f86:	f043 0301 	orr.w	r3, r3, #1
 8000f8a:	6713      	str	r3, [r2, #112]	; 0x70
 8000f8c:	e01c      	b.n	8000fc8 <HAL_RCC_OscConfig+0x324>
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	689b      	ldr	r3, [r3, #8]
 8000f92:	2b05      	cmp	r3, #5
 8000f94:	d10c      	bne.n	8000fb0 <HAL_RCC_OscConfig+0x30c>
 8000f96:	4b5f      	ldr	r3, [pc, #380]	; (8001114 <HAL_RCC_OscConfig+0x470>)
 8000f98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f9a:	4a5e      	ldr	r2, [pc, #376]	; (8001114 <HAL_RCC_OscConfig+0x470>)
 8000f9c:	f043 0304 	orr.w	r3, r3, #4
 8000fa0:	6713      	str	r3, [r2, #112]	; 0x70
 8000fa2:	4b5c      	ldr	r3, [pc, #368]	; (8001114 <HAL_RCC_OscConfig+0x470>)
 8000fa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000fa6:	4a5b      	ldr	r2, [pc, #364]	; (8001114 <HAL_RCC_OscConfig+0x470>)
 8000fa8:	f043 0301 	orr.w	r3, r3, #1
 8000fac:	6713      	str	r3, [r2, #112]	; 0x70
 8000fae:	e00b      	b.n	8000fc8 <HAL_RCC_OscConfig+0x324>
 8000fb0:	4b58      	ldr	r3, [pc, #352]	; (8001114 <HAL_RCC_OscConfig+0x470>)
 8000fb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000fb4:	4a57      	ldr	r2, [pc, #348]	; (8001114 <HAL_RCC_OscConfig+0x470>)
 8000fb6:	f023 0301 	bic.w	r3, r3, #1
 8000fba:	6713      	str	r3, [r2, #112]	; 0x70
 8000fbc:	4b55      	ldr	r3, [pc, #340]	; (8001114 <HAL_RCC_OscConfig+0x470>)
 8000fbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000fc0:	4a54      	ldr	r2, [pc, #336]	; (8001114 <HAL_RCC_OscConfig+0x470>)
 8000fc2:	f023 0304 	bic.w	r3, r3, #4
 8000fc6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	689b      	ldr	r3, [r3, #8]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d015      	beq.n	8000ffc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000fd0:	f7ff fd7a 	bl	8000ac8 <HAL_GetTick>
 8000fd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000fd6:	e00a      	b.n	8000fee <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000fd8:	f7ff fd76 	bl	8000ac8 <HAL_GetTick>
 8000fdc:	4602      	mov	r2, r0
 8000fde:	693b      	ldr	r3, [r7, #16]
 8000fe0:	1ad3      	subs	r3, r2, r3
 8000fe2:	f241 3288 	movw	r2, #5000	; 0x1388
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d901      	bls.n	8000fee <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8000fea:	2303      	movs	r3, #3
 8000fec:	e0cb      	b.n	8001186 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000fee:	4b49      	ldr	r3, [pc, #292]	; (8001114 <HAL_RCC_OscConfig+0x470>)
 8000ff0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ff2:	f003 0302 	and.w	r3, r3, #2
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d0ee      	beq.n	8000fd8 <HAL_RCC_OscConfig+0x334>
 8000ffa:	e014      	b.n	8001026 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ffc:	f7ff fd64 	bl	8000ac8 <HAL_GetTick>
 8001000:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001002:	e00a      	b.n	800101a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001004:	f7ff fd60 	bl	8000ac8 <HAL_GetTick>
 8001008:	4602      	mov	r2, r0
 800100a:	693b      	ldr	r3, [r7, #16]
 800100c:	1ad3      	subs	r3, r2, r3
 800100e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001012:	4293      	cmp	r3, r2
 8001014:	d901      	bls.n	800101a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001016:	2303      	movs	r3, #3
 8001018:	e0b5      	b.n	8001186 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800101a:	4b3e      	ldr	r3, [pc, #248]	; (8001114 <HAL_RCC_OscConfig+0x470>)
 800101c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800101e:	f003 0302 	and.w	r3, r3, #2
 8001022:	2b00      	cmp	r3, #0
 8001024:	d1ee      	bne.n	8001004 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001026:	7dfb      	ldrb	r3, [r7, #23]
 8001028:	2b01      	cmp	r3, #1
 800102a:	d105      	bne.n	8001038 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800102c:	4b39      	ldr	r3, [pc, #228]	; (8001114 <HAL_RCC_OscConfig+0x470>)
 800102e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001030:	4a38      	ldr	r2, [pc, #224]	; (8001114 <HAL_RCC_OscConfig+0x470>)
 8001032:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001036:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	699b      	ldr	r3, [r3, #24]
 800103c:	2b00      	cmp	r3, #0
 800103e:	f000 80a1 	beq.w	8001184 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001042:	4b34      	ldr	r3, [pc, #208]	; (8001114 <HAL_RCC_OscConfig+0x470>)
 8001044:	689b      	ldr	r3, [r3, #8]
 8001046:	f003 030c 	and.w	r3, r3, #12
 800104a:	2b08      	cmp	r3, #8
 800104c:	d05c      	beq.n	8001108 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	699b      	ldr	r3, [r3, #24]
 8001052:	2b02      	cmp	r3, #2
 8001054:	d141      	bne.n	80010da <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001056:	4b31      	ldr	r3, [pc, #196]	; (800111c <HAL_RCC_OscConfig+0x478>)
 8001058:	2200      	movs	r2, #0
 800105a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800105c:	f7ff fd34 	bl	8000ac8 <HAL_GetTick>
 8001060:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001062:	e008      	b.n	8001076 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001064:	f7ff fd30 	bl	8000ac8 <HAL_GetTick>
 8001068:	4602      	mov	r2, r0
 800106a:	693b      	ldr	r3, [r7, #16]
 800106c:	1ad3      	subs	r3, r2, r3
 800106e:	2b02      	cmp	r3, #2
 8001070:	d901      	bls.n	8001076 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001072:	2303      	movs	r3, #3
 8001074:	e087      	b.n	8001186 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001076:	4b27      	ldr	r3, [pc, #156]	; (8001114 <HAL_RCC_OscConfig+0x470>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800107e:	2b00      	cmp	r3, #0
 8001080:	d1f0      	bne.n	8001064 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	69da      	ldr	r2, [r3, #28]
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	6a1b      	ldr	r3, [r3, #32]
 800108a:	431a      	orrs	r2, r3
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001090:	019b      	lsls	r3, r3, #6
 8001092:	431a      	orrs	r2, r3
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001098:	085b      	lsrs	r3, r3, #1
 800109a:	3b01      	subs	r3, #1
 800109c:	041b      	lsls	r3, r3, #16
 800109e:	431a      	orrs	r2, r3
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010a4:	061b      	lsls	r3, r3, #24
 80010a6:	491b      	ldr	r1, [pc, #108]	; (8001114 <HAL_RCC_OscConfig+0x470>)
 80010a8:	4313      	orrs	r3, r2
 80010aa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80010ac:	4b1b      	ldr	r3, [pc, #108]	; (800111c <HAL_RCC_OscConfig+0x478>)
 80010ae:	2201      	movs	r2, #1
 80010b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010b2:	f7ff fd09 	bl	8000ac8 <HAL_GetTick>
 80010b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80010b8:	e008      	b.n	80010cc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80010ba:	f7ff fd05 	bl	8000ac8 <HAL_GetTick>
 80010be:	4602      	mov	r2, r0
 80010c0:	693b      	ldr	r3, [r7, #16]
 80010c2:	1ad3      	subs	r3, r2, r3
 80010c4:	2b02      	cmp	r3, #2
 80010c6:	d901      	bls.n	80010cc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80010c8:	2303      	movs	r3, #3
 80010ca:	e05c      	b.n	8001186 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80010cc:	4b11      	ldr	r3, [pc, #68]	; (8001114 <HAL_RCC_OscConfig+0x470>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d0f0      	beq.n	80010ba <HAL_RCC_OscConfig+0x416>
 80010d8:	e054      	b.n	8001184 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80010da:	4b10      	ldr	r3, [pc, #64]	; (800111c <HAL_RCC_OscConfig+0x478>)
 80010dc:	2200      	movs	r2, #0
 80010de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010e0:	f7ff fcf2 	bl	8000ac8 <HAL_GetTick>
 80010e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80010e6:	e008      	b.n	80010fa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80010e8:	f7ff fcee 	bl	8000ac8 <HAL_GetTick>
 80010ec:	4602      	mov	r2, r0
 80010ee:	693b      	ldr	r3, [r7, #16]
 80010f0:	1ad3      	subs	r3, r2, r3
 80010f2:	2b02      	cmp	r3, #2
 80010f4:	d901      	bls.n	80010fa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80010f6:	2303      	movs	r3, #3
 80010f8:	e045      	b.n	8001186 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80010fa:	4b06      	ldr	r3, [pc, #24]	; (8001114 <HAL_RCC_OscConfig+0x470>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001102:	2b00      	cmp	r3, #0
 8001104:	d1f0      	bne.n	80010e8 <HAL_RCC_OscConfig+0x444>
 8001106:	e03d      	b.n	8001184 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	699b      	ldr	r3, [r3, #24]
 800110c:	2b01      	cmp	r3, #1
 800110e:	d107      	bne.n	8001120 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001110:	2301      	movs	r3, #1
 8001112:	e038      	b.n	8001186 <HAL_RCC_OscConfig+0x4e2>
 8001114:	40023800 	.word	0x40023800
 8001118:	40007000 	.word	0x40007000
 800111c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001120:	4b1b      	ldr	r3, [pc, #108]	; (8001190 <HAL_RCC_OscConfig+0x4ec>)
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	699b      	ldr	r3, [r3, #24]
 800112a:	2b01      	cmp	r3, #1
 800112c:	d028      	beq.n	8001180 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001138:	429a      	cmp	r2, r3
 800113a:	d121      	bne.n	8001180 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001146:	429a      	cmp	r2, r3
 8001148:	d11a      	bne.n	8001180 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800114a:	68fa      	ldr	r2, [r7, #12]
 800114c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001150:	4013      	ands	r3, r2
 8001152:	687a      	ldr	r2, [r7, #4]
 8001154:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001156:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001158:	4293      	cmp	r3, r2
 800115a:	d111      	bne.n	8001180 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001166:	085b      	lsrs	r3, r3, #1
 8001168:	3b01      	subs	r3, #1
 800116a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800116c:	429a      	cmp	r2, r3
 800116e:	d107      	bne.n	8001180 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800117a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800117c:	429a      	cmp	r2, r3
 800117e:	d001      	beq.n	8001184 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001180:	2301      	movs	r3, #1
 8001182:	e000      	b.n	8001186 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001184:	2300      	movs	r3, #0
}
 8001186:	4618      	mov	r0, r3
 8001188:	3718      	adds	r7, #24
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	40023800 	.word	0x40023800

08001194 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b084      	sub	sp, #16
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
 800119c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d101      	bne.n	80011a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80011a4:	2301      	movs	r3, #1
 80011a6:	e0cc      	b.n	8001342 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80011a8:	4b68      	ldr	r3, [pc, #416]	; (800134c <HAL_RCC_ClockConfig+0x1b8>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f003 0307 	and.w	r3, r3, #7
 80011b0:	683a      	ldr	r2, [r7, #0]
 80011b2:	429a      	cmp	r2, r3
 80011b4:	d90c      	bls.n	80011d0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011b6:	4b65      	ldr	r3, [pc, #404]	; (800134c <HAL_RCC_ClockConfig+0x1b8>)
 80011b8:	683a      	ldr	r2, [r7, #0]
 80011ba:	b2d2      	uxtb	r2, r2
 80011bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80011be:	4b63      	ldr	r3, [pc, #396]	; (800134c <HAL_RCC_ClockConfig+0x1b8>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f003 0307 	and.w	r3, r3, #7
 80011c6:	683a      	ldr	r2, [r7, #0]
 80011c8:	429a      	cmp	r2, r3
 80011ca:	d001      	beq.n	80011d0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80011cc:	2301      	movs	r3, #1
 80011ce:	e0b8      	b.n	8001342 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f003 0302 	and.w	r3, r3, #2
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d020      	beq.n	800121e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f003 0304 	and.w	r3, r3, #4
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d005      	beq.n	80011f4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80011e8:	4b59      	ldr	r3, [pc, #356]	; (8001350 <HAL_RCC_ClockConfig+0x1bc>)
 80011ea:	689b      	ldr	r3, [r3, #8]
 80011ec:	4a58      	ldr	r2, [pc, #352]	; (8001350 <HAL_RCC_ClockConfig+0x1bc>)
 80011ee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80011f2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f003 0308 	and.w	r3, r3, #8
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d005      	beq.n	800120c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001200:	4b53      	ldr	r3, [pc, #332]	; (8001350 <HAL_RCC_ClockConfig+0x1bc>)
 8001202:	689b      	ldr	r3, [r3, #8]
 8001204:	4a52      	ldr	r2, [pc, #328]	; (8001350 <HAL_RCC_ClockConfig+0x1bc>)
 8001206:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800120a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800120c:	4b50      	ldr	r3, [pc, #320]	; (8001350 <HAL_RCC_ClockConfig+0x1bc>)
 800120e:	689b      	ldr	r3, [r3, #8]
 8001210:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	689b      	ldr	r3, [r3, #8]
 8001218:	494d      	ldr	r1, [pc, #308]	; (8001350 <HAL_RCC_ClockConfig+0x1bc>)
 800121a:	4313      	orrs	r3, r2
 800121c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f003 0301 	and.w	r3, r3, #1
 8001226:	2b00      	cmp	r3, #0
 8001228:	d044      	beq.n	80012b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	2b01      	cmp	r3, #1
 8001230:	d107      	bne.n	8001242 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001232:	4b47      	ldr	r3, [pc, #284]	; (8001350 <HAL_RCC_ClockConfig+0x1bc>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800123a:	2b00      	cmp	r3, #0
 800123c:	d119      	bne.n	8001272 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800123e:	2301      	movs	r3, #1
 8001240:	e07f      	b.n	8001342 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	2b02      	cmp	r3, #2
 8001248:	d003      	beq.n	8001252 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800124e:	2b03      	cmp	r3, #3
 8001250:	d107      	bne.n	8001262 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001252:	4b3f      	ldr	r3, [pc, #252]	; (8001350 <HAL_RCC_ClockConfig+0x1bc>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800125a:	2b00      	cmp	r3, #0
 800125c:	d109      	bne.n	8001272 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800125e:	2301      	movs	r3, #1
 8001260:	e06f      	b.n	8001342 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001262:	4b3b      	ldr	r3, [pc, #236]	; (8001350 <HAL_RCC_ClockConfig+0x1bc>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f003 0302 	and.w	r3, r3, #2
 800126a:	2b00      	cmp	r3, #0
 800126c:	d101      	bne.n	8001272 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800126e:	2301      	movs	r3, #1
 8001270:	e067      	b.n	8001342 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001272:	4b37      	ldr	r3, [pc, #220]	; (8001350 <HAL_RCC_ClockConfig+0x1bc>)
 8001274:	689b      	ldr	r3, [r3, #8]
 8001276:	f023 0203 	bic.w	r2, r3, #3
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	4934      	ldr	r1, [pc, #208]	; (8001350 <HAL_RCC_ClockConfig+0x1bc>)
 8001280:	4313      	orrs	r3, r2
 8001282:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001284:	f7ff fc20 	bl	8000ac8 <HAL_GetTick>
 8001288:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800128a:	e00a      	b.n	80012a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800128c:	f7ff fc1c 	bl	8000ac8 <HAL_GetTick>
 8001290:	4602      	mov	r2, r0
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	1ad3      	subs	r3, r2, r3
 8001296:	f241 3288 	movw	r2, #5000	; 0x1388
 800129a:	4293      	cmp	r3, r2
 800129c:	d901      	bls.n	80012a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800129e:	2303      	movs	r3, #3
 80012a0:	e04f      	b.n	8001342 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012a2:	4b2b      	ldr	r3, [pc, #172]	; (8001350 <HAL_RCC_ClockConfig+0x1bc>)
 80012a4:	689b      	ldr	r3, [r3, #8]
 80012a6:	f003 020c 	and.w	r2, r3, #12
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	009b      	lsls	r3, r3, #2
 80012b0:	429a      	cmp	r2, r3
 80012b2:	d1eb      	bne.n	800128c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80012b4:	4b25      	ldr	r3, [pc, #148]	; (800134c <HAL_RCC_ClockConfig+0x1b8>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f003 0307 	and.w	r3, r3, #7
 80012bc:	683a      	ldr	r2, [r7, #0]
 80012be:	429a      	cmp	r2, r3
 80012c0:	d20c      	bcs.n	80012dc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012c2:	4b22      	ldr	r3, [pc, #136]	; (800134c <HAL_RCC_ClockConfig+0x1b8>)
 80012c4:	683a      	ldr	r2, [r7, #0]
 80012c6:	b2d2      	uxtb	r2, r2
 80012c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80012ca:	4b20      	ldr	r3, [pc, #128]	; (800134c <HAL_RCC_ClockConfig+0x1b8>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f003 0307 	and.w	r3, r3, #7
 80012d2:	683a      	ldr	r2, [r7, #0]
 80012d4:	429a      	cmp	r2, r3
 80012d6:	d001      	beq.n	80012dc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80012d8:	2301      	movs	r3, #1
 80012da:	e032      	b.n	8001342 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f003 0304 	and.w	r3, r3, #4
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d008      	beq.n	80012fa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80012e8:	4b19      	ldr	r3, [pc, #100]	; (8001350 <HAL_RCC_ClockConfig+0x1bc>)
 80012ea:	689b      	ldr	r3, [r3, #8]
 80012ec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	68db      	ldr	r3, [r3, #12]
 80012f4:	4916      	ldr	r1, [pc, #88]	; (8001350 <HAL_RCC_ClockConfig+0x1bc>)
 80012f6:	4313      	orrs	r3, r2
 80012f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f003 0308 	and.w	r3, r3, #8
 8001302:	2b00      	cmp	r3, #0
 8001304:	d009      	beq.n	800131a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001306:	4b12      	ldr	r3, [pc, #72]	; (8001350 <HAL_RCC_ClockConfig+0x1bc>)
 8001308:	689b      	ldr	r3, [r3, #8]
 800130a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	691b      	ldr	r3, [r3, #16]
 8001312:	00db      	lsls	r3, r3, #3
 8001314:	490e      	ldr	r1, [pc, #56]	; (8001350 <HAL_RCC_ClockConfig+0x1bc>)
 8001316:	4313      	orrs	r3, r2
 8001318:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800131a:	f000 f821 	bl	8001360 <HAL_RCC_GetSysClockFreq>
 800131e:	4602      	mov	r2, r0
 8001320:	4b0b      	ldr	r3, [pc, #44]	; (8001350 <HAL_RCC_ClockConfig+0x1bc>)
 8001322:	689b      	ldr	r3, [r3, #8]
 8001324:	091b      	lsrs	r3, r3, #4
 8001326:	f003 030f 	and.w	r3, r3, #15
 800132a:	490a      	ldr	r1, [pc, #40]	; (8001354 <HAL_RCC_ClockConfig+0x1c0>)
 800132c:	5ccb      	ldrb	r3, [r1, r3]
 800132e:	fa22 f303 	lsr.w	r3, r2, r3
 8001332:	4a09      	ldr	r2, [pc, #36]	; (8001358 <HAL_RCC_ClockConfig+0x1c4>)
 8001334:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001336:	4b09      	ldr	r3, [pc, #36]	; (800135c <HAL_RCC_ClockConfig+0x1c8>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	4618      	mov	r0, r3
 800133c:	f7ff f9ea 	bl	8000714 <HAL_InitTick>

  return HAL_OK;
 8001340:	2300      	movs	r3, #0
}
 8001342:	4618      	mov	r0, r3
 8001344:	3710      	adds	r7, #16
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	40023c00 	.word	0x40023c00
 8001350:	40023800 	.word	0x40023800
 8001354:	08005298 	.word	0x08005298
 8001358:	20000000 	.word	0x20000000
 800135c:	20000004 	.word	0x20000004

08001360 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001360:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001364:	b094      	sub	sp, #80	; 0x50
 8001366:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001368:	2300      	movs	r3, #0
 800136a:	647b      	str	r3, [r7, #68]	; 0x44
 800136c:	2300      	movs	r3, #0
 800136e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001370:	2300      	movs	r3, #0
 8001372:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001374:	2300      	movs	r3, #0
 8001376:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001378:	4b79      	ldr	r3, [pc, #484]	; (8001560 <HAL_RCC_GetSysClockFreq+0x200>)
 800137a:	689b      	ldr	r3, [r3, #8]
 800137c:	f003 030c 	and.w	r3, r3, #12
 8001380:	2b08      	cmp	r3, #8
 8001382:	d00d      	beq.n	80013a0 <HAL_RCC_GetSysClockFreq+0x40>
 8001384:	2b08      	cmp	r3, #8
 8001386:	f200 80e1 	bhi.w	800154c <HAL_RCC_GetSysClockFreq+0x1ec>
 800138a:	2b00      	cmp	r3, #0
 800138c:	d002      	beq.n	8001394 <HAL_RCC_GetSysClockFreq+0x34>
 800138e:	2b04      	cmp	r3, #4
 8001390:	d003      	beq.n	800139a <HAL_RCC_GetSysClockFreq+0x3a>
 8001392:	e0db      	b.n	800154c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001394:	4b73      	ldr	r3, [pc, #460]	; (8001564 <HAL_RCC_GetSysClockFreq+0x204>)
 8001396:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001398:	e0db      	b.n	8001552 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800139a:	4b73      	ldr	r3, [pc, #460]	; (8001568 <HAL_RCC_GetSysClockFreq+0x208>)
 800139c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800139e:	e0d8      	b.n	8001552 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80013a0:	4b6f      	ldr	r3, [pc, #444]	; (8001560 <HAL_RCC_GetSysClockFreq+0x200>)
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80013a8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80013aa:	4b6d      	ldr	r3, [pc, #436]	; (8001560 <HAL_RCC_GetSysClockFreq+0x200>)
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d063      	beq.n	800147e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80013b6:	4b6a      	ldr	r3, [pc, #424]	; (8001560 <HAL_RCC_GetSysClockFreq+0x200>)
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	099b      	lsrs	r3, r3, #6
 80013bc:	2200      	movs	r2, #0
 80013be:	63bb      	str	r3, [r7, #56]	; 0x38
 80013c0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80013c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80013c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80013c8:	633b      	str	r3, [r7, #48]	; 0x30
 80013ca:	2300      	movs	r3, #0
 80013cc:	637b      	str	r3, [r7, #52]	; 0x34
 80013ce:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80013d2:	4622      	mov	r2, r4
 80013d4:	462b      	mov	r3, r5
 80013d6:	f04f 0000 	mov.w	r0, #0
 80013da:	f04f 0100 	mov.w	r1, #0
 80013de:	0159      	lsls	r1, r3, #5
 80013e0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80013e4:	0150      	lsls	r0, r2, #5
 80013e6:	4602      	mov	r2, r0
 80013e8:	460b      	mov	r3, r1
 80013ea:	4621      	mov	r1, r4
 80013ec:	1a51      	subs	r1, r2, r1
 80013ee:	6139      	str	r1, [r7, #16]
 80013f0:	4629      	mov	r1, r5
 80013f2:	eb63 0301 	sbc.w	r3, r3, r1
 80013f6:	617b      	str	r3, [r7, #20]
 80013f8:	f04f 0200 	mov.w	r2, #0
 80013fc:	f04f 0300 	mov.w	r3, #0
 8001400:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001404:	4659      	mov	r1, fp
 8001406:	018b      	lsls	r3, r1, #6
 8001408:	4651      	mov	r1, sl
 800140a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800140e:	4651      	mov	r1, sl
 8001410:	018a      	lsls	r2, r1, #6
 8001412:	4651      	mov	r1, sl
 8001414:	ebb2 0801 	subs.w	r8, r2, r1
 8001418:	4659      	mov	r1, fp
 800141a:	eb63 0901 	sbc.w	r9, r3, r1
 800141e:	f04f 0200 	mov.w	r2, #0
 8001422:	f04f 0300 	mov.w	r3, #0
 8001426:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800142a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800142e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001432:	4690      	mov	r8, r2
 8001434:	4699      	mov	r9, r3
 8001436:	4623      	mov	r3, r4
 8001438:	eb18 0303 	adds.w	r3, r8, r3
 800143c:	60bb      	str	r3, [r7, #8]
 800143e:	462b      	mov	r3, r5
 8001440:	eb49 0303 	adc.w	r3, r9, r3
 8001444:	60fb      	str	r3, [r7, #12]
 8001446:	f04f 0200 	mov.w	r2, #0
 800144a:	f04f 0300 	mov.w	r3, #0
 800144e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001452:	4629      	mov	r1, r5
 8001454:	024b      	lsls	r3, r1, #9
 8001456:	4621      	mov	r1, r4
 8001458:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800145c:	4621      	mov	r1, r4
 800145e:	024a      	lsls	r2, r1, #9
 8001460:	4610      	mov	r0, r2
 8001462:	4619      	mov	r1, r3
 8001464:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001466:	2200      	movs	r2, #0
 8001468:	62bb      	str	r3, [r7, #40]	; 0x28
 800146a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800146c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001470:	f7fe feae 	bl	80001d0 <__aeabi_uldivmod>
 8001474:	4602      	mov	r2, r0
 8001476:	460b      	mov	r3, r1
 8001478:	4613      	mov	r3, r2
 800147a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800147c:	e058      	b.n	8001530 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800147e:	4b38      	ldr	r3, [pc, #224]	; (8001560 <HAL_RCC_GetSysClockFreq+0x200>)
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	099b      	lsrs	r3, r3, #6
 8001484:	2200      	movs	r2, #0
 8001486:	4618      	mov	r0, r3
 8001488:	4611      	mov	r1, r2
 800148a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800148e:	623b      	str	r3, [r7, #32]
 8001490:	2300      	movs	r3, #0
 8001492:	627b      	str	r3, [r7, #36]	; 0x24
 8001494:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001498:	4642      	mov	r2, r8
 800149a:	464b      	mov	r3, r9
 800149c:	f04f 0000 	mov.w	r0, #0
 80014a0:	f04f 0100 	mov.w	r1, #0
 80014a4:	0159      	lsls	r1, r3, #5
 80014a6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80014aa:	0150      	lsls	r0, r2, #5
 80014ac:	4602      	mov	r2, r0
 80014ae:	460b      	mov	r3, r1
 80014b0:	4641      	mov	r1, r8
 80014b2:	ebb2 0a01 	subs.w	sl, r2, r1
 80014b6:	4649      	mov	r1, r9
 80014b8:	eb63 0b01 	sbc.w	fp, r3, r1
 80014bc:	f04f 0200 	mov.w	r2, #0
 80014c0:	f04f 0300 	mov.w	r3, #0
 80014c4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80014c8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80014cc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80014d0:	ebb2 040a 	subs.w	r4, r2, sl
 80014d4:	eb63 050b 	sbc.w	r5, r3, fp
 80014d8:	f04f 0200 	mov.w	r2, #0
 80014dc:	f04f 0300 	mov.w	r3, #0
 80014e0:	00eb      	lsls	r3, r5, #3
 80014e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80014e6:	00e2      	lsls	r2, r4, #3
 80014e8:	4614      	mov	r4, r2
 80014ea:	461d      	mov	r5, r3
 80014ec:	4643      	mov	r3, r8
 80014ee:	18e3      	adds	r3, r4, r3
 80014f0:	603b      	str	r3, [r7, #0]
 80014f2:	464b      	mov	r3, r9
 80014f4:	eb45 0303 	adc.w	r3, r5, r3
 80014f8:	607b      	str	r3, [r7, #4]
 80014fa:	f04f 0200 	mov.w	r2, #0
 80014fe:	f04f 0300 	mov.w	r3, #0
 8001502:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001506:	4629      	mov	r1, r5
 8001508:	028b      	lsls	r3, r1, #10
 800150a:	4621      	mov	r1, r4
 800150c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001510:	4621      	mov	r1, r4
 8001512:	028a      	lsls	r2, r1, #10
 8001514:	4610      	mov	r0, r2
 8001516:	4619      	mov	r1, r3
 8001518:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800151a:	2200      	movs	r2, #0
 800151c:	61bb      	str	r3, [r7, #24]
 800151e:	61fa      	str	r2, [r7, #28]
 8001520:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001524:	f7fe fe54 	bl	80001d0 <__aeabi_uldivmod>
 8001528:	4602      	mov	r2, r0
 800152a:	460b      	mov	r3, r1
 800152c:	4613      	mov	r3, r2
 800152e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001530:	4b0b      	ldr	r3, [pc, #44]	; (8001560 <HAL_RCC_GetSysClockFreq+0x200>)
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	0c1b      	lsrs	r3, r3, #16
 8001536:	f003 0303 	and.w	r3, r3, #3
 800153a:	3301      	adds	r3, #1
 800153c:	005b      	lsls	r3, r3, #1
 800153e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001540:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001542:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001544:	fbb2 f3f3 	udiv	r3, r2, r3
 8001548:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800154a:	e002      	b.n	8001552 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800154c:	4b05      	ldr	r3, [pc, #20]	; (8001564 <HAL_RCC_GetSysClockFreq+0x204>)
 800154e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001550:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001552:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001554:	4618      	mov	r0, r3
 8001556:	3750      	adds	r7, #80	; 0x50
 8001558:	46bd      	mov	sp, r7
 800155a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800155e:	bf00      	nop
 8001560:	40023800 	.word	0x40023800
 8001564:	00f42400 	.word	0x00f42400
 8001568:	007a1200 	.word	0x007a1200

0800156c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001570:	4b03      	ldr	r3, [pc, #12]	; (8001580 <HAL_RCC_GetHCLKFreq+0x14>)
 8001572:	681b      	ldr	r3, [r3, #0]
}
 8001574:	4618      	mov	r0, r3
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr
 800157e:	bf00      	nop
 8001580:	20000000 	.word	0x20000000

08001584 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001588:	f7ff fff0 	bl	800156c <HAL_RCC_GetHCLKFreq>
 800158c:	4602      	mov	r2, r0
 800158e:	4b05      	ldr	r3, [pc, #20]	; (80015a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001590:	689b      	ldr	r3, [r3, #8]
 8001592:	0a9b      	lsrs	r3, r3, #10
 8001594:	f003 0307 	and.w	r3, r3, #7
 8001598:	4903      	ldr	r1, [pc, #12]	; (80015a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800159a:	5ccb      	ldrb	r3, [r1, r3]
 800159c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80015a0:	4618      	mov	r0, r3
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	40023800 	.word	0x40023800
 80015a8:	080052a8 	.word	0x080052a8

080015ac <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b083      	sub	sp, #12
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
 80015b4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	220f      	movs	r2, #15
 80015ba:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80015bc:	4b12      	ldr	r3, [pc, #72]	; (8001608 <HAL_RCC_GetClockConfig+0x5c>)
 80015be:	689b      	ldr	r3, [r3, #8]
 80015c0:	f003 0203 	and.w	r2, r3, #3
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80015c8:	4b0f      	ldr	r3, [pc, #60]	; (8001608 <HAL_RCC_GetClockConfig+0x5c>)
 80015ca:	689b      	ldr	r3, [r3, #8]
 80015cc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80015d4:	4b0c      	ldr	r3, [pc, #48]	; (8001608 <HAL_RCC_GetClockConfig+0x5c>)
 80015d6:	689b      	ldr	r3, [r3, #8]
 80015d8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80015e0:	4b09      	ldr	r3, [pc, #36]	; (8001608 <HAL_RCC_GetClockConfig+0x5c>)
 80015e2:	689b      	ldr	r3, [r3, #8]
 80015e4:	08db      	lsrs	r3, r3, #3
 80015e6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80015ee:	4b07      	ldr	r3, [pc, #28]	; (800160c <HAL_RCC_GetClockConfig+0x60>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f003 0207 	and.w	r2, r3, #7
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	601a      	str	r2, [r3, #0]
}
 80015fa:	bf00      	nop
 80015fc:	370c      	adds	r7, #12
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr
 8001606:	bf00      	nop
 8001608:	40023800 	.word	0x40023800
 800160c:	40023c00 	.word	0x40023c00

08001610 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d101      	bne.n	8001622 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800161e:	2301      	movs	r3, #1
 8001620:	e041      	b.n	80016a6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001628:	b2db      	uxtb	r3, r3
 800162a:	2b00      	cmp	r3, #0
 800162c:	d106      	bne.n	800163c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2200      	movs	r2, #0
 8001632:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001636:	6878      	ldr	r0, [r7, #4]
 8001638:	f000 f839 	bl	80016ae <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2202      	movs	r2, #2
 8001640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681a      	ldr	r2, [r3, #0]
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	3304      	adds	r3, #4
 800164c:	4619      	mov	r1, r3
 800164e:	4610      	mov	r0, r2
 8001650:	f000 f9c0 	bl	80019d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2201      	movs	r2, #1
 8001658:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2201      	movs	r2, #1
 8001660:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2201      	movs	r2, #1
 8001668:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2201      	movs	r2, #1
 8001670:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2201      	movs	r2, #1
 8001678:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2201      	movs	r2, #1
 8001680:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2201      	movs	r2, #1
 8001688:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2201      	movs	r2, #1
 8001690:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2201      	movs	r2, #1
 8001698:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2201      	movs	r2, #1
 80016a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80016a4:	2300      	movs	r3, #0
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	3708      	adds	r7, #8
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}

080016ae <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80016ae:	b480      	push	{r7}
 80016b0:	b083      	sub	sp, #12
 80016b2:	af00      	add	r7, sp, #0
 80016b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80016b6:	bf00      	nop
 80016b8:	370c      	adds	r7, #12
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr
	...

080016c4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b085      	sub	sp, #20
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80016d2:	b2db      	uxtb	r3, r3
 80016d4:	2b01      	cmp	r3, #1
 80016d6:	d001      	beq.n	80016dc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80016d8:	2301      	movs	r3, #1
 80016da:	e04e      	b.n	800177a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2202      	movs	r2, #2
 80016e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	68da      	ldr	r2, [r3, #12]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f042 0201 	orr.w	r2, r2, #1
 80016f2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a23      	ldr	r2, [pc, #140]	; (8001788 <HAL_TIM_Base_Start_IT+0xc4>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d022      	beq.n	8001744 <HAL_TIM_Base_Start_IT+0x80>
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001706:	d01d      	beq.n	8001744 <HAL_TIM_Base_Start_IT+0x80>
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a1f      	ldr	r2, [pc, #124]	; (800178c <HAL_TIM_Base_Start_IT+0xc8>)
 800170e:	4293      	cmp	r3, r2
 8001710:	d018      	beq.n	8001744 <HAL_TIM_Base_Start_IT+0x80>
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4a1e      	ldr	r2, [pc, #120]	; (8001790 <HAL_TIM_Base_Start_IT+0xcc>)
 8001718:	4293      	cmp	r3, r2
 800171a:	d013      	beq.n	8001744 <HAL_TIM_Base_Start_IT+0x80>
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a1c      	ldr	r2, [pc, #112]	; (8001794 <HAL_TIM_Base_Start_IT+0xd0>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d00e      	beq.n	8001744 <HAL_TIM_Base_Start_IT+0x80>
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4a1b      	ldr	r2, [pc, #108]	; (8001798 <HAL_TIM_Base_Start_IT+0xd4>)
 800172c:	4293      	cmp	r3, r2
 800172e:	d009      	beq.n	8001744 <HAL_TIM_Base_Start_IT+0x80>
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a19      	ldr	r2, [pc, #100]	; (800179c <HAL_TIM_Base_Start_IT+0xd8>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d004      	beq.n	8001744 <HAL_TIM_Base_Start_IT+0x80>
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4a18      	ldr	r2, [pc, #96]	; (80017a0 <HAL_TIM_Base_Start_IT+0xdc>)
 8001740:	4293      	cmp	r3, r2
 8001742:	d111      	bne.n	8001768 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	689b      	ldr	r3, [r3, #8]
 800174a:	f003 0307 	and.w	r3, r3, #7
 800174e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	2b06      	cmp	r3, #6
 8001754:	d010      	beq.n	8001778 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	681a      	ldr	r2, [r3, #0]
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f042 0201 	orr.w	r2, r2, #1
 8001764:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001766:	e007      	b.n	8001778 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	681a      	ldr	r2, [r3, #0]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f042 0201 	orr.w	r2, r2, #1
 8001776:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001778:	2300      	movs	r3, #0
}
 800177a:	4618      	mov	r0, r3
 800177c:	3714      	adds	r7, #20
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr
 8001786:	bf00      	nop
 8001788:	40010000 	.word	0x40010000
 800178c:	40000400 	.word	0x40000400
 8001790:	40000800 	.word	0x40000800
 8001794:	40000c00 	.word	0x40000c00
 8001798:	40010400 	.word	0x40010400
 800179c:	40014000 	.word	0x40014000
 80017a0:	40001800 	.word	0x40001800

080017a4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b084      	sub	sp, #16
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	68db      	ldr	r3, [r3, #12]
 80017b2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	691b      	ldr	r3, [r3, #16]
 80017ba:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80017bc:	68bb      	ldr	r3, [r7, #8]
 80017be:	f003 0302 	and.w	r3, r3, #2
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d020      	beq.n	8001808 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	f003 0302 	and.w	r3, r3, #2
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d01b      	beq.n	8001808 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f06f 0202 	mvn.w	r2, #2
 80017d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2201      	movs	r2, #1
 80017de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	699b      	ldr	r3, [r3, #24]
 80017e6:	f003 0303 	and.w	r3, r3, #3
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d003      	beq.n	80017f6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80017ee:	6878      	ldr	r0, [r7, #4]
 80017f0:	f000 f8d2 	bl	8001998 <HAL_TIM_IC_CaptureCallback>
 80017f4:	e005      	b.n	8001802 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80017f6:	6878      	ldr	r0, [r7, #4]
 80017f8:	f000 f8c4 	bl	8001984 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80017fc:	6878      	ldr	r0, [r7, #4]
 80017fe:	f000 f8d5 	bl	80019ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2200      	movs	r2, #0
 8001806:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	f003 0304 	and.w	r3, r3, #4
 800180e:	2b00      	cmp	r3, #0
 8001810:	d020      	beq.n	8001854 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	f003 0304 	and.w	r3, r3, #4
 8001818:	2b00      	cmp	r3, #0
 800181a:	d01b      	beq.n	8001854 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f06f 0204 	mvn.w	r2, #4
 8001824:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2202      	movs	r2, #2
 800182a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	699b      	ldr	r3, [r3, #24]
 8001832:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001836:	2b00      	cmp	r3, #0
 8001838:	d003      	beq.n	8001842 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800183a:	6878      	ldr	r0, [r7, #4]
 800183c:	f000 f8ac 	bl	8001998 <HAL_TIM_IC_CaptureCallback>
 8001840:	e005      	b.n	800184e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001842:	6878      	ldr	r0, [r7, #4]
 8001844:	f000 f89e 	bl	8001984 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001848:	6878      	ldr	r0, [r7, #4]
 800184a:	f000 f8af 	bl	80019ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2200      	movs	r2, #0
 8001852:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001854:	68bb      	ldr	r3, [r7, #8]
 8001856:	f003 0308 	and.w	r3, r3, #8
 800185a:	2b00      	cmp	r3, #0
 800185c:	d020      	beq.n	80018a0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	f003 0308 	and.w	r3, r3, #8
 8001864:	2b00      	cmp	r3, #0
 8001866:	d01b      	beq.n	80018a0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f06f 0208 	mvn.w	r2, #8
 8001870:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2204      	movs	r2, #4
 8001876:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	69db      	ldr	r3, [r3, #28]
 800187e:	f003 0303 	and.w	r3, r3, #3
 8001882:	2b00      	cmp	r3, #0
 8001884:	d003      	beq.n	800188e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001886:	6878      	ldr	r0, [r7, #4]
 8001888:	f000 f886 	bl	8001998 <HAL_TIM_IC_CaptureCallback>
 800188c:	e005      	b.n	800189a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800188e:	6878      	ldr	r0, [r7, #4]
 8001890:	f000 f878 	bl	8001984 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001894:	6878      	ldr	r0, [r7, #4]
 8001896:	f000 f889 	bl	80019ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2200      	movs	r2, #0
 800189e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80018a0:	68bb      	ldr	r3, [r7, #8]
 80018a2:	f003 0310 	and.w	r3, r3, #16
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d020      	beq.n	80018ec <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	f003 0310 	and.w	r3, r3, #16
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d01b      	beq.n	80018ec <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f06f 0210 	mvn.w	r2, #16
 80018bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2208      	movs	r2, #8
 80018c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	69db      	ldr	r3, [r3, #28]
 80018ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d003      	beq.n	80018da <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80018d2:	6878      	ldr	r0, [r7, #4]
 80018d4:	f000 f860 	bl	8001998 <HAL_TIM_IC_CaptureCallback>
 80018d8:	e005      	b.n	80018e6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80018da:	6878      	ldr	r0, [r7, #4]
 80018dc:	f000 f852 	bl	8001984 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80018e0:	6878      	ldr	r0, [r7, #4]
 80018e2:	f000 f863 	bl	80019ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2200      	movs	r2, #0
 80018ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80018ec:	68bb      	ldr	r3, [r7, #8]
 80018ee:	f003 0301 	and.w	r3, r3, #1
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d00c      	beq.n	8001910 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	f003 0301 	and.w	r3, r3, #1
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d007      	beq.n	8001910 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f06f 0201 	mvn.w	r2, #1
 8001908:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800190a:	6878      	ldr	r0, [r7, #4]
 800190c:	f7fe febe 	bl	800068c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001910:	68bb      	ldr	r3, [r7, #8]
 8001912:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001916:	2b00      	cmp	r3, #0
 8001918:	d00c      	beq.n	8001934 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001920:	2b00      	cmp	r3, #0
 8001922:	d007      	beq.n	8001934 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800192c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800192e:	6878      	ldr	r0, [r7, #4]
 8001930:	f000 f906 	bl	8001b40 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800193a:	2b00      	cmp	r3, #0
 800193c:	d00c      	beq.n	8001958 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001944:	2b00      	cmp	r3, #0
 8001946:	d007      	beq.n	8001958 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001950:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001952:	6878      	ldr	r0, [r7, #4]
 8001954:	f000 f834 	bl	80019c0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001958:	68bb      	ldr	r3, [r7, #8]
 800195a:	f003 0320 	and.w	r3, r3, #32
 800195e:	2b00      	cmp	r3, #0
 8001960:	d00c      	beq.n	800197c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	f003 0320 	and.w	r3, r3, #32
 8001968:	2b00      	cmp	r3, #0
 800196a:	d007      	beq.n	800197c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f06f 0220 	mvn.w	r2, #32
 8001974:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001976:	6878      	ldr	r0, [r7, #4]
 8001978:	f000 f8d8 	bl	8001b2c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800197c:	bf00      	nop
 800197e:	3710      	adds	r7, #16
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}

08001984 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001984:	b480      	push	{r7}
 8001986:	b083      	sub	sp, #12
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800198c:	bf00      	nop
 800198e:	370c      	adds	r7, #12
 8001990:	46bd      	mov	sp, r7
 8001992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001996:	4770      	bx	lr

08001998 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001998:	b480      	push	{r7}
 800199a:	b083      	sub	sp, #12
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80019a0:	bf00      	nop
 80019a2:	370c      	adds	r7, #12
 80019a4:	46bd      	mov	sp, r7
 80019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019aa:	4770      	bx	lr

080019ac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b083      	sub	sp, #12
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80019b4:	bf00      	nop
 80019b6:	370c      	adds	r7, #12
 80019b8:	46bd      	mov	sp, r7
 80019ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019be:	4770      	bx	lr

080019c0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b083      	sub	sp, #12
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80019c8:	bf00      	nop
 80019ca:	370c      	adds	r7, #12
 80019cc:	46bd      	mov	sp, r7
 80019ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d2:	4770      	bx	lr

080019d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b085      	sub	sp, #20
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
 80019dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	4a46      	ldr	r2, [pc, #280]	; (8001b00 <TIM_Base_SetConfig+0x12c>)
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d013      	beq.n	8001a14 <TIM_Base_SetConfig+0x40>
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019f2:	d00f      	beq.n	8001a14 <TIM_Base_SetConfig+0x40>
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	4a43      	ldr	r2, [pc, #268]	; (8001b04 <TIM_Base_SetConfig+0x130>)
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d00b      	beq.n	8001a14 <TIM_Base_SetConfig+0x40>
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	4a42      	ldr	r2, [pc, #264]	; (8001b08 <TIM_Base_SetConfig+0x134>)
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d007      	beq.n	8001a14 <TIM_Base_SetConfig+0x40>
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	4a41      	ldr	r2, [pc, #260]	; (8001b0c <TIM_Base_SetConfig+0x138>)
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d003      	beq.n	8001a14 <TIM_Base_SetConfig+0x40>
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	4a40      	ldr	r2, [pc, #256]	; (8001b10 <TIM_Base_SetConfig+0x13c>)
 8001a10:	4293      	cmp	r3, r2
 8001a12:	d108      	bne.n	8001a26 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a1a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	68fa      	ldr	r2, [r7, #12]
 8001a22:	4313      	orrs	r3, r2
 8001a24:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	4a35      	ldr	r2, [pc, #212]	; (8001b00 <TIM_Base_SetConfig+0x12c>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d02b      	beq.n	8001a86 <TIM_Base_SetConfig+0xb2>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a34:	d027      	beq.n	8001a86 <TIM_Base_SetConfig+0xb2>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	4a32      	ldr	r2, [pc, #200]	; (8001b04 <TIM_Base_SetConfig+0x130>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d023      	beq.n	8001a86 <TIM_Base_SetConfig+0xb2>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	4a31      	ldr	r2, [pc, #196]	; (8001b08 <TIM_Base_SetConfig+0x134>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d01f      	beq.n	8001a86 <TIM_Base_SetConfig+0xb2>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	4a30      	ldr	r2, [pc, #192]	; (8001b0c <TIM_Base_SetConfig+0x138>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d01b      	beq.n	8001a86 <TIM_Base_SetConfig+0xb2>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	4a2f      	ldr	r2, [pc, #188]	; (8001b10 <TIM_Base_SetConfig+0x13c>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d017      	beq.n	8001a86 <TIM_Base_SetConfig+0xb2>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	4a2e      	ldr	r2, [pc, #184]	; (8001b14 <TIM_Base_SetConfig+0x140>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d013      	beq.n	8001a86 <TIM_Base_SetConfig+0xb2>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	4a2d      	ldr	r2, [pc, #180]	; (8001b18 <TIM_Base_SetConfig+0x144>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d00f      	beq.n	8001a86 <TIM_Base_SetConfig+0xb2>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	4a2c      	ldr	r2, [pc, #176]	; (8001b1c <TIM_Base_SetConfig+0x148>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d00b      	beq.n	8001a86 <TIM_Base_SetConfig+0xb2>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	4a2b      	ldr	r2, [pc, #172]	; (8001b20 <TIM_Base_SetConfig+0x14c>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d007      	beq.n	8001a86 <TIM_Base_SetConfig+0xb2>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	4a2a      	ldr	r2, [pc, #168]	; (8001b24 <TIM_Base_SetConfig+0x150>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d003      	beq.n	8001a86 <TIM_Base_SetConfig+0xb2>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	4a29      	ldr	r2, [pc, #164]	; (8001b28 <TIM_Base_SetConfig+0x154>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d108      	bne.n	8001a98 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001a8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	68db      	ldr	r3, [r3, #12]
 8001a92:	68fa      	ldr	r2, [r7, #12]
 8001a94:	4313      	orrs	r3, r2
 8001a96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	695b      	ldr	r3, [r3, #20]
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	68fa      	ldr	r2, [r7, #12]
 8001aaa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	689a      	ldr	r2, [r3, #8]
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	4a10      	ldr	r2, [pc, #64]	; (8001b00 <TIM_Base_SetConfig+0x12c>)
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d003      	beq.n	8001acc <TIM_Base_SetConfig+0xf8>
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	4a12      	ldr	r2, [pc, #72]	; (8001b10 <TIM_Base_SetConfig+0x13c>)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d103      	bne.n	8001ad4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	691a      	ldr	r2, [r3, #16]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2201      	movs	r2, #1
 8001ad8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	691b      	ldr	r3, [r3, #16]
 8001ade:	f003 0301 	and.w	r3, r3, #1
 8001ae2:	2b01      	cmp	r3, #1
 8001ae4:	d105      	bne.n	8001af2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	691b      	ldr	r3, [r3, #16]
 8001aea:	f023 0201 	bic.w	r2, r3, #1
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	611a      	str	r2, [r3, #16]
  }
}
 8001af2:	bf00      	nop
 8001af4:	3714      	adds	r7, #20
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr
 8001afe:	bf00      	nop
 8001b00:	40010000 	.word	0x40010000
 8001b04:	40000400 	.word	0x40000400
 8001b08:	40000800 	.word	0x40000800
 8001b0c:	40000c00 	.word	0x40000c00
 8001b10:	40010400 	.word	0x40010400
 8001b14:	40014000 	.word	0x40014000
 8001b18:	40014400 	.word	0x40014400
 8001b1c:	40014800 	.word	0x40014800
 8001b20:	40001800 	.word	0x40001800
 8001b24:	40001c00 	.word	0x40001c00
 8001b28:	40002000 	.word	0x40002000

08001b2c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b083      	sub	sp, #12
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001b34:	bf00      	nop
 8001b36:	370c      	adds	r7, #12
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3e:	4770      	bx	lr

08001b40 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b083      	sub	sp, #12
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001b48:	bf00      	nop
 8001b4a:	370c      	adds	r7, #12
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b52:	4770      	bx	lr

08001b54 <__NVIC_SetPriority>:
{
 8001b54:	b480      	push	{r7}
 8001b56:	b083      	sub	sp, #12
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	6039      	str	r1, [r7, #0]
 8001b5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	db0a      	blt.n	8001b7e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	b2da      	uxtb	r2, r3
 8001b6c:	490c      	ldr	r1, [pc, #48]	; (8001ba0 <__NVIC_SetPriority+0x4c>)
 8001b6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b72:	0112      	lsls	r2, r2, #4
 8001b74:	b2d2      	uxtb	r2, r2
 8001b76:	440b      	add	r3, r1
 8001b78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001b7c:	e00a      	b.n	8001b94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	b2da      	uxtb	r2, r3
 8001b82:	4908      	ldr	r1, [pc, #32]	; (8001ba4 <__NVIC_SetPriority+0x50>)
 8001b84:	79fb      	ldrb	r3, [r7, #7]
 8001b86:	f003 030f 	and.w	r3, r3, #15
 8001b8a:	3b04      	subs	r3, #4
 8001b8c:	0112      	lsls	r2, r2, #4
 8001b8e:	b2d2      	uxtb	r2, r2
 8001b90:	440b      	add	r3, r1
 8001b92:	761a      	strb	r2, [r3, #24]
}
 8001b94:	bf00      	nop
 8001b96:	370c      	adds	r7, #12
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr
 8001ba0:	e000e100 	.word	0xe000e100
 8001ba4:	e000ed00 	.word	0xe000ed00

08001ba8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8001bac:	4b05      	ldr	r3, [pc, #20]	; (8001bc4 <SysTick_Handler+0x1c>)
 8001bae:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8001bb0:	f001 fe02 	bl	80037b8 <xTaskGetSchedulerState>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	2b01      	cmp	r3, #1
 8001bb8:	d001      	beq.n	8001bbe <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8001bba:	f002 fbed 	bl	8004398 <xPortSysTickHandler>
  }
}
 8001bbe:	bf00      	nop
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	e000e010 	.word	0xe000e010

08001bc8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8001bcc:	2100      	movs	r1, #0
 8001bce:	f06f 0004 	mvn.w	r0, #4
 8001bd2:	f7ff ffbf 	bl	8001b54 <__NVIC_SetPriority>
#endif
}
 8001bd6:	bf00      	nop
 8001bd8:	bd80      	pop	{r7, pc}
	...

08001bdc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8001bdc:	b480      	push	{r7}
 8001bde:	b083      	sub	sp, #12
 8001be0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001be2:	f3ef 8305 	mrs	r3, IPSR
 8001be6:	603b      	str	r3, [r7, #0]
  return(result);
 8001be8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d003      	beq.n	8001bf6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8001bee:	f06f 0305 	mvn.w	r3, #5
 8001bf2:	607b      	str	r3, [r7, #4]
 8001bf4:	e00c      	b.n	8001c10 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8001bf6:	4b0a      	ldr	r3, [pc, #40]	; (8001c20 <osKernelInitialize+0x44>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d105      	bne.n	8001c0a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8001bfe:	4b08      	ldr	r3, [pc, #32]	; (8001c20 <osKernelInitialize+0x44>)
 8001c00:	2201      	movs	r2, #1
 8001c02:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8001c04:	2300      	movs	r3, #0
 8001c06:	607b      	str	r3, [r7, #4]
 8001c08:	e002      	b.n	8001c10 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8001c0a:	f04f 33ff 	mov.w	r3, #4294967295
 8001c0e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8001c10:	687b      	ldr	r3, [r7, #4]
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	370c      	adds	r7, #12
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr
 8001c1e:	bf00      	nop
 8001c20:	200000e0 	.word	0x200000e0

08001c24 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b082      	sub	sp, #8
 8001c28:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001c2a:	f3ef 8305 	mrs	r3, IPSR
 8001c2e:	603b      	str	r3, [r7, #0]
  return(result);
 8001c30:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d003      	beq.n	8001c3e <osKernelStart+0x1a>
    stat = osErrorISR;
 8001c36:	f06f 0305 	mvn.w	r3, #5
 8001c3a:	607b      	str	r3, [r7, #4]
 8001c3c:	e010      	b.n	8001c60 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8001c3e:	4b0b      	ldr	r3, [pc, #44]	; (8001c6c <osKernelStart+0x48>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	2b01      	cmp	r3, #1
 8001c44:	d109      	bne.n	8001c5a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8001c46:	f7ff ffbf 	bl	8001bc8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8001c4a:	4b08      	ldr	r3, [pc, #32]	; (8001c6c <osKernelStart+0x48>)
 8001c4c:	2202      	movs	r2, #2
 8001c4e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8001c50:	f001 f96a 	bl	8002f28 <vTaskStartScheduler>
      stat = osOK;
 8001c54:	2300      	movs	r3, #0
 8001c56:	607b      	str	r3, [r7, #4]
 8001c58:	e002      	b.n	8001c60 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8001c5a:	f04f 33ff 	mov.w	r3, #4294967295
 8001c5e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8001c60:	687b      	ldr	r3, [r7, #4]
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	3708      	adds	r7, #8
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	200000e0 	.word	0x200000e0

08001c70 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b08e      	sub	sp, #56	; 0x38
 8001c74:	af04      	add	r7, sp, #16
 8001c76:	60f8      	str	r0, [r7, #12]
 8001c78:	60b9      	str	r1, [r7, #8]
 8001c7a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001c80:	f3ef 8305 	mrs	r3, IPSR
 8001c84:	617b      	str	r3, [r7, #20]
  return(result);
 8001c86:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d17e      	bne.n	8001d8a <osThreadNew+0x11a>
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d07b      	beq.n	8001d8a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8001c92:	2380      	movs	r3, #128	; 0x80
 8001c94:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8001c96:	2318      	movs	r3, #24
 8001c98:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8001c9e:	f04f 33ff 	mov.w	r3, #4294967295
 8001ca2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d045      	beq.n	8001d36 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d002      	beq.n	8001cb8 <osThreadNew+0x48>
        name = attr->name;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	699b      	ldr	r3, [r3, #24]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d002      	beq.n	8001cc6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	699b      	ldr	r3, [r3, #24]
 8001cc4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8001cc6:	69fb      	ldr	r3, [r7, #28]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d008      	beq.n	8001cde <osThreadNew+0x6e>
 8001ccc:	69fb      	ldr	r3, [r7, #28]
 8001cce:	2b38      	cmp	r3, #56	; 0x38
 8001cd0:	d805      	bhi.n	8001cde <osThreadNew+0x6e>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	f003 0301 	and.w	r3, r3, #1
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d001      	beq.n	8001ce2 <osThreadNew+0x72>
        return (NULL);
 8001cde:	2300      	movs	r3, #0
 8001ce0:	e054      	b.n	8001d8c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	695b      	ldr	r3, [r3, #20]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d003      	beq.n	8001cf2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	695b      	ldr	r3, [r3, #20]
 8001cee:	089b      	lsrs	r3, r3, #2
 8001cf0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	689b      	ldr	r3, [r3, #8]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d00e      	beq.n	8001d18 <osThreadNew+0xa8>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	68db      	ldr	r3, [r3, #12]
 8001cfe:	2b5b      	cmp	r3, #91	; 0x5b
 8001d00:	d90a      	bls.n	8001d18 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d006      	beq.n	8001d18 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	695b      	ldr	r3, [r3, #20]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d002      	beq.n	8001d18 <osThreadNew+0xa8>
        mem = 1;
 8001d12:	2301      	movs	r3, #1
 8001d14:	61bb      	str	r3, [r7, #24]
 8001d16:	e010      	b.n	8001d3a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	689b      	ldr	r3, [r3, #8]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d10c      	bne.n	8001d3a <osThreadNew+0xca>
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	68db      	ldr	r3, [r3, #12]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d108      	bne.n	8001d3a <osThreadNew+0xca>
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	691b      	ldr	r3, [r3, #16]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d104      	bne.n	8001d3a <osThreadNew+0xca>
          mem = 0;
 8001d30:	2300      	movs	r3, #0
 8001d32:	61bb      	str	r3, [r7, #24]
 8001d34:	e001      	b.n	8001d3a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8001d36:	2300      	movs	r3, #0
 8001d38:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8001d3a:	69bb      	ldr	r3, [r7, #24]
 8001d3c:	2b01      	cmp	r3, #1
 8001d3e:	d110      	bne.n	8001d62 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8001d44:	687a      	ldr	r2, [r7, #4]
 8001d46:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001d48:	9202      	str	r2, [sp, #8]
 8001d4a:	9301      	str	r3, [sp, #4]
 8001d4c:	69fb      	ldr	r3, [r7, #28]
 8001d4e:	9300      	str	r3, [sp, #0]
 8001d50:	68bb      	ldr	r3, [r7, #8]
 8001d52:	6a3a      	ldr	r2, [r7, #32]
 8001d54:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001d56:	68f8      	ldr	r0, [r7, #12]
 8001d58:	f000 fe38 	bl	80029cc <xTaskCreateStatic>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	613b      	str	r3, [r7, #16]
 8001d60:	e013      	b.n	8001d8a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8001d62:	69bb      	ldr	r3, [r7, #24]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d110      	bne.n	8001d8a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8001d68:	6a3b      	ldr	r3, [r7, #32]
 8001d6a:	b29a      	uxth	r2, r3
 8001d6c:	f107 0310 	add.w	r3, r7, #16
 8001d70:	9301      	str	r3, [sp, #4]
 8001d72:	69fb      	ldr	r3, [r7, #28]
 8001d74:	9300      	str	r3, [sp, #0]
 8001d76:	68bb      	ldr	r3, [r7, #8]
 8001d78:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001d7a:	68f8      	ldr	r0, [r7, #12]
 8001d7c:	f000 fe83 	bl	8002a86 <xTaskCreate>
 8001d80:	4603      	mov	r3, r0
 8001d82:	2b01      	cmp	r3, #1
 8001d84:	d001      	beq.n	8001d8a <osThreadNew+0x11a>
            hTask = NULL;
 8001d86:	2300      	movs	r3, #0
 8001d88:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8001d8a:	693b      	ldr	r3, [r7, #16]
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	3728      	adds	r7, #40	; 0x28
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}

08001d94 <osThreadTerminate>:
  vTaskDelete (NULL);
#endif
  for (;;);
}

osStatus_t osThreadTerminate (osThreadId_t thread_id) {
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b086      	sub	sp, #24
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001da0:	f3ef 8305 	mrs	r3, IPSR
 8001da4:	60bb      	str	r3, [r7, #8]
  return(result);
 8001da6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;
#ifndef USE_FreeRTOS_HEAP_1
  eTaskState tstate;

  if (IS_IRQ()) {
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d003      	beq.n	8001db4 <osThreadTerminate+0x20>
    stat = osErrorISR;
 8001dac:	f06f 0305 	mvn.w	r3, #5
 8001db0:	617b      	str	r3, [r7, #20]
 8001db2:	e017      	b.n	8001de4 <osThreadTerminate+0x50>
  }
  else if (hTask == NULL) {
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d103      	bne.n	8001dc2 <osThreadTerminate+0x2e>
    stat = osErrorParameter;
 8001dba:	f06f 0303 	mvn.w	r3, #3
 8001dbe:	617b      	str	r3, [r7, #20]
 8001dc0:	e010      	b.n	8001de4 <osThreadTerminate+0x50>
  }
  else {
    tstate = eTaskGetState (hTask);
 8001dc2:	6938      	ldr	r0, [r7, #16]
 8001dc4:	f001 f84a 	bl	8002e5c <eTaskGetState>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	73fb      	strb	r3, [r7, #15]

    if (tstate != eDeleted) {
 8001dcc:	7bfb      	ldrb	r3, [r7, #15]
 8001dce:	2b04      	cmp	r3, #4
 8001dd0:	d005      	beq.n	8001dde <osThreadTerminate+0x4a>
      stat = osOK;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	617b      	str	r3, [r7, #20]
      vTaskDelete (hTask);
 8001dd6:	6938      	ldr	r0, [r7, #16]
 8001dd8:	f000 ff9a 	bl	8002d10 <vTaskDelete>
 8001ddc:	e002      	b.n	8001de4 <osThreadTerminate+0x50>
    } else {
      stat = osErrorResource;
 8001dde:	f06f 0302 	mvn.w	r3, #2
 8001de2:	617b      	str	r3, [r7, #20]
  }
#else
  stat = osError;
#endif

  return (stat);
 8001de4:	697b      	ldr	r3, [r7, #20]
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	3718      	adds	r7, #24
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}

08001dee <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8001dee:	b580      	push	{r7, lr}
 8001df0:	b084      	sub	sp, #16
 8001df2:	af00      	add	r7, sp, #0
 8001df4:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001df6:	f3ef 8305 	mrs	r3, IPSR
 8001dfa:	60bb      	str	r3, [r7, #8]
  return(result);
 8001dfc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d003      	beq.n	8001e0a <osDelay+0x1c>
    stat = osErrorISR;
 8001e02:	f06f 0305 	mvn.w	r3, #5
 8001e06:	60fb      	str	r3, [r7, #12]
 8001e08:	e007      	b.n	8001e1a <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d002      	beq.n	8001e1a <osDelay+0x2c>
      vTaskDelay(ticks);
 8001e14:	6878      	ldr	r0, [r7, #4]
 8001e16:	f000 ffed 	bl	8002df4 <vTaskDelay>
    }
  }

  return (stat);
 8001e1a:	68fb      	ldr	r3, [r7, #12]
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	3710      	adds	r7, #16
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}

08001e24 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8001e24:	b480      	push	{r7}
 8001e26:	b085      	sub	sp, #20
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	60f8      	str	r0, [r7, #12]
 8001e2c:	60b9      	str	r1, [r7, #8]
 8001e2e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	4a07      	ldr	r2, [pc, #28]	; (8001e50 <vApplicationGetIdleTaskMemory+0x2c>)
 8001e34:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8001e36:	68bb      	ldr	r3, [r7, #8]
 8001e38:	4a06      	ldr	r2, [pc, #24]	; (8001e54 <vApplicationGetIdleTaskMemory+0x30>)
 8001e3a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2280      	movs	r2, #128	; 0x80
 8001e40:	601a      	str	r2, [r3, #0]
}
 8001e42:	bf00      	nop
 8001e44:	3714      	adds	r7, #20
 8001e46:	46bd      	mov	sp, r7
 8001e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4c:	4770      	bx	lr
 8001e4e:	bf00      	nop
 8001e50:	200000e4 	.word	0x200000e4
 8001e54:	20000140 	.word	0x20000140

08001e58 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8001e58:	b480      	push	{r7}
 8001e5a:	b085      	sub	sp, #20
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	60f8      	str	r0, [r7, #12]
 8001e60:	60b9      	str	r1, [r7, #8]
 8001e62:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	4a07      	ldr	r2, [pc, #28]	; (8001e84 <vApplicationGetTimerTaskMemory+0x2c>)
 8001e68:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8001e6a:	68bb      	ldr	r3, [r7, #8]
 8001e6c:	4a06      	ldr	r2, [pc, #24]	; (8001e88 <vApplicationGetTimerTaskMemory+0x30>)
 8001e6e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e76:	601a      	str	r2, [r3, #0]
}
 8001e78:	bf00      	nop
 8001e7a:	3714      	adds	r7, #20
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e82:	4770      	bx	lr
 8001e84:	20000340 	.word	0x20000340
 8001e88:	2000039c 	.word	0x2000039c

08001e8c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b083      	sub	sp, #12
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	f103 0208 	add.w	r2, r3, #8
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ea4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	f103 0208 	add.w	r2, r3, #8
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	f103 0208 	add.w	r2, r3, #8
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001ec0:	bf00      	nop
 8001ec2:	370c      	adds	r7, #12
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eca:	4770      	bx	lr

08001ecc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b083      	sub	sp, #12
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001eda:	bf00      	nop
 8001edc:	370c      	adds	r7, #12
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr

08001ee6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001ee6:	b480      	push	{r7}
 8001ee8:	b085      	sub	sp, #20
 8001eea:	af00      	add	r7, sp, #0
 8001eec:	6078      	str	r0, [r7, #4]
 8001eee:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	68fa      	ldr	r2, [r7, #12]
 8001efa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	689a      	ldr	r2, [r3, #8]
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	689b      	ldr	r3, [r3, #8]
 8001f08:	683a      	ldr	r2, [r7, #0]
 8001f0a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	683a      	ldr	r2, [r7, #0]
 8001f10:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	687a      	ldr	r2, [r7, #4]
 8001f16:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	1c5a      	adds	r2, r3, #1
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	601a      	str	r2, [r3, #0]
}
 8001f22:	bf00      	nop
 8001f24:	3714      	adds	r7, #20
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr

08001f2e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001f2e:	b480      	push	{r7}
 8001f30:	b085      	sub	sp, #20
 8001f32:	af00      	add	r7, sp, #0
 8001f34:	6078      	str	r0, [r7, #4]
 8001f36:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001f3e:	68bb      	ldr	r3, [r7, #8]
 8001f40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f44:	d103      	bne.n	8001f4e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	691b      	ldr	r3, [r3, #16]
 8001f4a:	60fb      	str	r3, [r7, #12]
 8001f4c:	e00c      	b.n	8001f68 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	3308      	adds	r3, #8
 8001f52:	60fb      	str	r3, [r7, #12]
 8001f54:	e002      	b.n	8001f5c <vListInsert+0x2e>
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	60fb      	str	r3, [r7, #12]
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	68ba      	ldr	r2, [r7, #8]
 8001f64:	429a      	cmp	r2, r3
 8001f66:	d2f6      	bcs.n	8001f56 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	685a      	ldr	r2, [r3, #4]
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	683a      	ldr	r2, [r7, #0]
 8001f76:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	68fa      	ldr	r2, [r7, #12]
 8001f7c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	683a      	ldr	r2, [r7, #0]
 8001f82:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	687a      	ldr	r2, [r7, #4]
 8001f88:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	1c5a      	adds	r2, r3, #1
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	601a      	str	r2, [r3, #0]
}
 8001f94:	bf00      	nop
 8001f96:	3714      	adds	r7, #20
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9e:	4770      	bx	lr

08001fa0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b085      	sub	sp, #20
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	691b      	ldr	r3, [r3, #16]
 8001fac:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	687a      	ldr	r2, [r7, #4]
 8001fb4:	6892      	ldr	r2, [r2, #8]
 8001fb6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	689b      	ldr	r3, [r3, #8]
 8001fbc:	687a      	ldr	r2, [r7, #4]
 8001fbe:	6852      	ldr	r2, [r2, #4]
 8001fc0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	687a      	ldr	r2, [r7, #4]
 8001fc8:	429a      	cmp	r2, r3
 8001fca:	d103      	bne.n	8001fd4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	689a      	ldr	r2, [r3, #8]
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	1e5a      	subs	r2, r3, #1
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	681b      	ldr	r3, [r3, #0]
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	3714      	adds	r7, #20
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr

08001ff4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b084      	sub	sp, #16
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
 8001ffc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d10a      	bne.n	800201e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002008:	f04f 0350 	mov.w	r3, #80	; 0x50
 800200c:	f383 8811 	msr	BASEPRI, r3
 8002010:	f3bf 8f6f 	isb	sy
 8002014:	f3bf 8f4f 	dsb	sy
 8002018:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800201a:	bf00      	nop
 800201c:	e7fe      	b.n	800201c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800201e:	f002 f929 	bl	8004274 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681a      	ldr	r2, [r3, #0]
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800202a:	68f9      	ldr	r1, [r7, #12]
 800202c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800202e:	fb01 f303 	mul.w	r3, r1, r3
 8002032:	441a      	add	r2, r3
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	2200      	movs	r2, #0
 800203c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681a      	ldr	r2, [r3, #0]
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681a      	ldr	r2, [r3, #0]
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800204e:	3b01      	subs	r3, #1
 8002050:	68f9      	ldr	r1, [r7, #12]
 8002052:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002054:	fb01 f303 	mul.w	r3, r1, r3
 8002058:	441a      	add	r2, r3
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	22ff      	movs	r2, #255	; 0xff
 8002062:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	22ff      	movs	r2, #255	; 0xff
 800206a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d114      	bne.n	800209e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	691b      	ldr	r3, [r3, #16]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d01a      	beq.n	80020b2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	3310      	adds	r3, #16
 8002080:	4618      	mov	r0, r3
 8002082:	f001 f9db 	bl	800343c <xTaskRemoveFromEventList>
 8002086:	4603      	mov	r3, r0
 8002088:	2b00      	cmp	r3, #0
 800208a:	d012      	beq.n	80020b2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800208c:	4b0c      	ldr	r3, [pc, #48]	; (80020c0 <xQueueGenericReset+0xcc>)
 800208e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002092:	601a      	str	r2, [r3, #0]
 8002094:	f3bf 8f4f 	dsb	sy
 8002098:	f3bf 8f6f 	isb	sy
 800209c:	e009      	b.n	80020b2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	3310      	adds	r3, #16
 80020a2:	4618      	mov	r0, r3
 80020a4:	f7ff fef2 	bl	8001e8c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	3324      	adds	r3, #36	; 0x24
 80020ac:	4618      	mov	r0, r3
 80020ae:	f7ff feed 	bl	8001e8c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80020b2:	f002 f90f 	bl	80042d4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80020b6:	2301      	movs	r3, #1
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	3710      	adds	r7, #16
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}
 80020c0:	e000ed04 	.word	0xe000ed04

080020c4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b08e      	sub	sp, #56	; 0x38
 80020c8:	af02      	add	r7, sp, #8
 80020ca:	60f8      	str	r0, [r7, #12]
 80020cc:	60b9      	str	r1, [r7, #8]
 80020ce:	607a      	str	r2, [r7, #4]
 80020d0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d10a      	bne.n	80020ee <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80020d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020dc:	f383 8811 	msr	BASEPRI, r3
 80020e0:	f3bf 8f6f 	isb	sy
 80020e4:	f3bf 8f4f 	dsb	sy
 80020e8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80020ea:	bf00      	nop
 80020ec:	e7fe      	b.n	80020ec <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d10a      	bne.n	800210a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80020f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020f8:	f383 8811 	msr	BASEPRI, r3
 80020fc:	f3bf 8f6f 	isb	sy
 8002100:	f3bf 8f4f 	dsb	sy
 8002104:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002106:	bf00      	nop
 8002108:	e7fe      	b.n	8002108 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d002      	beq.n	8002116 <xQueueGenericCreateStatic+0x52>
 8002110:	68bb      	ldr	r3, [r7, #8]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d001      	beq.n	800211a <xQueueGenericCreateStatic+0x56>
 8002116:	2301      	movs	r3, #1
 8002118:	e000      	b.n	800211c <xQueueGenericCreateStatic+0x58>
 800211a:	2300      	movs	r3, #0
 800211c:	2b00      	cmp	r3, #0
 800211e:	d10a      	bne.n	8002136 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002120:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002124:	f383 8811 	msr	BASEPRI, r3
 8002128:	f3bf 8f6f 	isb	sy
 800212c:	f3bf 8f4f 	dsb	sy
 8002130:	623b      	str	r3, [r7, #32]
}
 8002132:	bf00      	nop
 8002134:	e7fe      	b.n	8002134 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d102      	bne.n	8002142 <xQueueGenericCreateStatic+0x7e>
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d101      	bne.n	8002146 <xQueueGenericCreateStatic+0x82>
 8002142:	2301      	movs	r3, #1
 8002144:	e000      	b.n	8002148 <xQueueGenericCreateStatic+0x84>
 8002146:	2300      	movs	r3, #0
 8002148:	2b00      	cmp	r3, #0
 800214a:	d10a      	bne.n	8002162 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800214c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002150:	f383 8811 	msr	BASEPRI, r3
 8002154:	f3bf 8f6f 	isb	sy
 8002158:	f3bf 8f4f 	dsb	sy
 800215c:	61fb      	str	r3, [r7, #28]
}
 800215e:	bf00      	nop
 8002160:	e7fe      	b.n	8002160 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002162:	2350      	movs	r3, #80	; 0x50
 8002164:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	2b50      	cmp	r3, #80	; 0x50
 800216a:	d00a      	beq.n	8002182 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800216c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002170:	f383 8811 	msr	BASEPRI, r3
 8002174:	f3bf 8f6f 	isb	sy
 8002178:	f3bf 8f4f 	dsb	sy
 800217c:	61bb      	str	r3, [r7, #24]
}
 800217e:	bf00      	nop
 8002180:	e7fe      	b.n	8002180 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002182:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800218a:	2b00      	cmp	r3, #0
 800218c:	d00d      	beq.n	80021aa <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800218e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002190:	2201      	movs	r2, #1
 8002192:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002196:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800219a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800219c:	9300      	str	r3, [sp, #0]
 800219e:	4613      	mov	r3, r2
 80021a0:	687a      	ldr	r2, [r7, #4]
 80021a2:	68b9      	ldr	r1, [r7, #8]
 80021a4:	68f8      	ldr	r0, [r7, #12]
 80021a6:	f000 f805 	bl	80021b4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80021aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80021ac:	4618      	mov	r0, r3
 80021ae:	3730      	adds	r7, #48	; 0x30
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}

080021b4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b084      	sub	sp, #16
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	60f8      	str	r0, [r7, #12]
 80021bc:	60b9      	str	r1, [r7, #8]
 80021be:	607a      	str	r2, [r7, #4]
 80021c0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80021c2:	68bb      	ldr	r3, [r7, #8]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d103      	bne.n	80021d0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80021c8:	69bb      	ldr	r3, [r7, #24]
 80021ca:	69ba      	ldr	r2, [r7, #24]
 80021cc:	601a      	str	r2, [r3, #0]
 80021ce:	e002      	b.n	80021d6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80021d0:	69bb      	ldr	r3, [r7, #24]
 80021d2:	687a      	ldr	r2, [r7, #4]
 80021d4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80021d6:	69bb      	ldr	r3, [r7, #24]
 80021d8:	68fa      	ldr	r2, [r7, #12]
 80021da:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80021dc:	69bb      	ldr	r3, [r7, #24]
 80021de:	68ba      	ldr	r2, [r7, #8]
 80021e0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80021e2:	2101      	movs	r1, #1
 80021e4:	69b8      	ldr	r0, [r7, #24]
 80021e6:	f7ff ff05 	bl	8001ff4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80021ea:	69bb      	ldr	r3, [r7, #24]
 80021ec:	78fa      	ldrb	r2, [r7, #3]
 80021ee:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80021f2:	bf00      	nop
 80021f4:	3710      	adds	r7, #16
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}
	...

080021fc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b08e      	sub	sp, #56	; 0x38
 8002200:	af00      	add	r7, sp, #0
 8002202:	60f8      	str	r0, [r7, #12]
 8002204:	60b9      	str	r1, [r7, #8]
 8002206:	607a      	str	r2, [r7, #4]
 8002208:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800220a:	2300      	movs	r3, #0
 800220c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002214:	2b00      	cmp	r3, #0
 8002216:	d10a      	bne.n	800222e <xQueueGenericSend+0x32>
	__asm volatile
 8002218:	f04f 0350 	mov.w	r3, #80	; 0x50
 800221c:	f383 8811 	msr	BASEPRI, r3
 8002220:	f3bf 8f6f 	isb	sy
 8002224:	f3bf 8f4f 	dsb	sy
 8002228:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800222a:	bf00      	nop
 800222c:	e7fe      	b.n	800222c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800222e:	68bb      	ldr	r3, [r7, #8]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d103      	bne.n	800223c <xQueueGenericSend+0x40>
 8002234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002238:	2b00      	cmp	r3, #0
 800223a:	d101      	bne.n	8002240 <xQueueGenericSend+0x44>
 800223c:	2301      	movs	r3, #1
 800223e:	e000      	b.n	8002242 <xQueueGenericSend+0x46>
 8002240:	2300      	movs	r3, #0
 8002242:	2b00      	cmp	r3, #0
 8002244:	d10a      	bne.n	800225c <xQueueGenericSend+0x60>
	__asm volatile
 8002246:	f04f 0350 	mov.w	r3, #80	; 0x50
 800224a:	f383 8811 	msr	BASEPRI, r3
 800224e:	f3bf 8f6f 	isb	sy
 8002252:	f3bf 8f4f 	dsb	sy
 8002256:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002258:	bf00      	nop
 800225a:	e7fe      	b.n	800225a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	2b02      	cmp	r3, #2
 8002260:	d103      	bne.n	800226a <xQueueGenericSend+0x6e>
 8002262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002264:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002266:	2b01      	cmp	r3, #1
 8002268:	d101      	bne.n	800226e <xQueueGenericSend+0x72>
 800226a:	2301      	movs	r3, #1
 800226c:	e000      	b.n	8002270 <xQueueGenericSend+0x74>
 800226e:	2300      	movs	r3, #0
 8002270:	2b00      	cmp	r3, #0
 8002272:	d10a      	bne.n	800228a <xQueueGenericSend+0x8e>
	__asm volatile
 8002274:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002278:	f383 8811 	msr	BASEPRI, r3
 800227c:	f3bf 8f6f 	isb	sy
 8002280:	f3bf 8f4f 	dsb	sy
 8002284:	623b      	str	r3, [r7, #32]
}
 8002286:	bf00      	nop
 8002288:	e7fe      	b.n	8002288 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800228a:	f001 fa95 	bl	80037b8 <xTaskGetSchedulerState>
 800228e:	4603      	mov	r3, r0
 8002290:	2b00      	cmp	r3, #0
 8002292:	d102      	bne.n	800229a <xQueueGenericSend+0x9e>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d101      	bne.n	800229e <xQueueGenericSend+0xa2>
 800229a:	2301      	movs	r3, #1
 800229c:	e000      	b.n	80022a0 <xQueueGenericSend+0xa4>
 800229e:	2300      	movs	r3, #0
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d10a      	bne.n	80022ba <xQueueGenericSend+0xbe>
	__asm volatile
 80022a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022a8:	f383 8811 	msr	BASEPRI, r3
 80022ac:	f3bf 8f6f 	isb	sy
 80022b0:	f3bf 8f4f 	dsb	sy
 80022b4:	61fb      	str	r3, [r7, #28]
}
 80022b6:	bf00      	nop
 80022b8:	e7fe      	b.n	80022b8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80022ba:	f001 ffdb 	bl	8004274 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80022be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80022c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022c6:	429a      	cmp	r2, r3
 80022c8:	d302      	bcc.n	80022d0 <xQueueGenericSend+0xd4>
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	2b02      	cmp	r3, #2
 80022ce:	d129      	bne.n	8002324 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80022d0:	683a      	ldr	r2, [r7, #0]
 80022d2:	68b9      	ldr	r1, [r7, #8]
 80022d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80022d6:	f000 fa0b 	bl	80026f0 <prvCopyDataToQueue>
 80022da:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80022dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d010      	beq.n	8002306 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80022e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022e6:	3324      	adds	r3, #36	; 0x24
 80022e8:	4618      	mov	r0, r3
 80022ea:	f001 f8a7 	bl	800343c <xTaskRemoveFromEventList>
 80022ee:	4603      	mov	r3, r0
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d013      	beq.n	800231c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80022f4:	4b3f      	ldr	r3, [pc, #252]	; (80023f4 <xQueueGenericSend+0x1f8>)
 80022f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80022fa:	601a      	str	r2, [r3, #0]
 80022fc:	f3bf 8f4f 	dsb	sy
 8002300:	f3bf 8f6f 	isb	sy
 8002304:	e00a      	b.n	800231c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002308:	2b00      	cmp	r3, #0
 800230a:	d007      	beq.n	800231c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800230c:	4b39      	ldr	r3, [pc, #228]	; (80023f4 <xQueueGenericSend+0x1f8>)
 800230e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002312:	601a      	str	r2, [r3, #0]
 8002314:	f3bf 8f4f 	dsb	sy
 8002318:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800231c:	f001 ffda 	bl	80042d4 <vPortExitCritical>
				return pdPASS;
 8002320:	2301      	movs	r3, #1
 8002322:	e063      	b.n	80023ec <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d103      	bne.n	8002332 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800232a:	f001 ffd3 	bl	80042d4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800232e:	2300      	movs	r3, #0
 8002330:	e05c      	b.n	80023ec <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002332:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002334:	2b00      	cmp	r3, #0
 8002336:	d106      	bne.n	8002346 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002338:	f107 0314 	add.w	r3, r7, #20
 800233c:	4618      	mov	r0, r3
 800233e:	f001 f8e1 	bl	8003504 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002342:	2301      	movs	r3, #1
 8002344:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002346:	f001 ffc5 	bl	80042d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800234a:	f000 fe53 	bl	8002ff4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800234e:	f001 ff91 	bl	8004274 <vPortEnterCritical>
 8002352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002354:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002358:	b25b      	sxtb	r3, r3
 800235a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800235e:	d103      	bne.n	8002368 <xQueueGenericSend+0x16c>
 8002360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002362:	2200      	movs	r2, #0
 8002364:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800236a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800236e:	b25b      	sxtb	r3, r3
 8002370:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002374:	d103      	bne.n	800237e <xQueueGenericSend+0x182>
 8002376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002378:	2200      	movs	r2, #0
 800237a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800237e:	f001 ffa9 	bl	80042d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002382:	1d3a      	adds	r2, r7, #4
 8002384:	f107 0314 	add.w	r3, r7, #20
 8002388:	4611      	mov	r1, r2
 800238a:	4618      	mov	r0, r3
 800238c:	f001 f8d0 	bl	8003530 <xTaskCheckForTimeOut>
 8002390:	4603      	mov	r3, r0
 8002392:	2b00      	cmp	r3, #0
 8002394:	d124      	bne.n	80023e0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002396:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002398:	f000 faa2 	bl	80028e0 <prvIsQueueFull>
 800239c:	4603      	mov	r3, r0
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d018      	beq.n	80023d4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80023a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023a4:	3310      	adds	r3, #16
 80023a6:	687a      	ldr	r2, [r7, #4]
 80023a8:	4611      	mov	r1, r2
 80023aa:	4618      	mov	r0, r3
 80023ac:	f000 fff6 	bl	800339c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80023b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80023b2:	f000 fa2d 	bl	8002810 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80023b6:	f000 fe2b 	bl	8003010 <xTaskResumeAll>
 80023ba:	4603      	mov	r3, r0
 80023bc:	2b00      	cmp	r3, #0
 80023be:	f47f af7c 	bne.w	80022ba <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80023c2:	4b0c      	ldr	r3, [pc, #48]	; (80023f4 <xQueueGenericSend+0x1f8>)
 80023c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80023c8:	601a      	str	r2, [r3, #0]
 80023ca:	f3bf 8f4f 	dsb	sy
 80023ce:	f3bf 8f6f 	isb	sy
 80023d2:	e772      	b.n	80022ba <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80023d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80023d6:	f000 fa1b 	bl	8002810 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80023da:	f000 fe19 	bl	8003010 <xTaskResumeAll>
 80023de:	e76c      	b.n	80022ba <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80023e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80023e2:	f000 fa15 	bl	8002810 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80023e6:	f000 fe13 	bl	8003010 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80023ea:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	3738      	adds	r7, #56	; 0x38
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}
 80023f4:	e000ed04 	.word	0xe000ed04

080023f8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b090      	sub	sp, #64	; 0x40
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	60f8      	str	r0, [r7, #12]
 8002400:	60b9      	str	r1, [r7, #8]
 8002402:	607a      	str	r2, [r7, #4]
 8002404:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800240a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800240c:	2b00      	cmp	r3, #0
 800240e:	d10a      	bne.n	8002426 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002410:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002414:	f383 8811 	msr	BASEPRI, r3
 8002418:	f3bf 8f6f 	isb	sy
 800241c:	f3bf 8f4f 	dsb	sy
 8002420:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002422:	bf00      	nop
 8002424:	e7fe      	b.n	8002424 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002426:	68bb      	ldr	r3, [r7, #8]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d103      	bne.n	8002434 <xQueueGenericSendFromISR+0x3c>
 800242c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800242e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002430:	2b00      	cmp	r3, #0
 8002432:	d101      	bne.n	8002438 <xQueueGenericSendFromISR+0x40>
 8002434:	2301      	movs	r3, #1
 8002436:	e000      	b.n	800243a <xQueueGenericSendFromISR+0x42>
 8002438:	2300      	movs	r3, #0
 800243a:	2b00      	cmp	r3, #0
 800243c:	d10a      	bne.n	8002454 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800243e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002442:	f383 8811 	msr	BASEPRI, r3
 8002446:	f3bf 8f6f 	isb	sy
 800244a:	f3bf 8f4f 	dsb	sy
 800244e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002450:	bf00      	nop
 8002452:	e7fe      	b.n	8002452 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	2b02      	cmp	r3, #2
 8002458:	d103      	bne.n	8002462 <xQueueGenericSendFromISR+0x6a>
 800245a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800245c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800245e:	2b01      	cmp	r3, #1
 8002460:	d101      	bne.n	8002466 <xQueueGenericSendFromISR+0x6e>
 8002462:	2301      	movs	r3, #1
 8002464:	e000      	b.n	8002468 <xQueueGenericSendFromISR+0x70>
 8002466:	2300      	movs	r3, #0
 8002468:	2b00      	cmp	r3, #0
 800246a:	d10a      	bne.n	8002482 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800246c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002470:	f383 8811 	msr	BASEPRI, r3
 8002474:	f3bf 8f6f 	isb	sy
 8002478:	f3bf 8f4f 	dsb	sy
 800247c:	623b      	str	r3, [r7, #32]
}
 800247e:	bf00      	nop
 8002480:	e7fe      	b.n	8002480 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002482:	f001 ffd9 	bl	8004438 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002486:	f3ef 8211 	mrs	r2, BASEPRI
 800248a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800248e:	f383 8811 	msr	BASEPRI, r3
 8002492:	f3bf 8f6f 	isb	sy
 8002496:	f3bf 8f4f 	dsb	sy
 800249a:	61fa      	str	r2, [r7, #28]
 800249c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800249e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80024a0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80024a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80024a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024aa:	429a      	cmp	r2, r3
 80024ac:	d302      	bcc.n	80024b4 <xQueueGenericSendFromISR+0xbc>
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	2b02      	cmp	r3, #2
 80024b2:	d12f      	bne.n	8002514 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80024b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024b6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80024ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80024be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024c2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80024c4:	683a      	ldr	r2, [r7, #0]
 80024c6:	68b9      	ldr	r1, [r7, #8]
 80024c8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80024ca:	f000 f911 	bl	80026f0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80024ce:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80024d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024d6:	d112      	bne.n	80024fe <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80024d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d016      	beq.n	800250e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80024e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024e2:	3324      	adds	r3, #36	; 0x24
 80024e4:	4618      	mov	r0, r3
 80024e6:	f000 ffa9 	bl	800343c <xTaskRemoveFromEventList>
 80024ea:	4603      	mov	r3, r0
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d00e      	beq.n	800250e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d00b      	beq.n	800250e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2201      	movs	r2, #1
 80024fa:	601a      	str	r2, [r3, #0]
 80024fc:	e007      	b.n	800250e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80024fe:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002502:	3301      	adds	r3, #1
 8002504:	b2db      	uxtb	r3, r3
 8002506:	b25a      	sxtb	r2, r3
 8002508:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800250a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800250e:	2301      	movs	r3, #1
 8002510:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8002512:	e001      	b.n	8002518 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002514:	2300      	movs	r3, #0
 8002516:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002518:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800251a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002522:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002524:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8002526:	4618      	mov	r0, r3
 8002528:	3740      	adds	r7, #64	; 0x40
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}
	...

08002530 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b08c      	sub	sp, #48	; 0x30
 8002534:	af00      	add	r7, sp, #0
 8002536:	60f8      	str	r0, [r7, #12]
 8002538:	60b9      	str	r1, [r7, #8]
 800253a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800253c:	2300      	movs	r3, #0
 800253e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002546:	2b00      	cmp	r3, #0
 8002548:	d10a      	bne.n	8002560 <xQueueReceive+0x30>
	__asm volatile
 800254a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800254e:	f383 8811 	msr	BASEPRI, r3
 8002552:	f3bf 8f6f 	isb	sy
 8002556:	f3bf 8f4f 	dsb	sy
 800255a:	623b      	str	r3, [r7, #32]
}
 800255c:	bf00      	nop
 800255e:	e7fe      	b.n	800255e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d103      	bne.n	800256e <xQueueReceive+0x3e>
 8002566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800256a:	2b00      	cmp	r3, #0
 800256c:	d101      	bne.n	8002572 <xQueueReceive+0x42>
 800256e:	2301      	movs	r3, #1
 8002570:	e000      	b.n	8002574 <xQueueReceive+0x44>
 8002572:	2300      	movs	r3, #0
 8002574:	2b00      	cmp	r3, #0
 8002576:	d10a      	bne.n	800258e <xQueueReceive+0x5e>
	__asm volatile
 8002578:	f04f 0350 	mov.w	r3, #80	; 0x50
 800257c:	f383 8811 	msr	BASEPRI, r3
 8002580:	f3bf 8f6f 	isb	sy
 8002584:	f3bf 8f4f 	dsb	sy
 8002588:	61fb      	str	r3, [r7, #28]
}
 800258a:	bf00      	nop
 800258c:	e7fe      	b.n	800258c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800258e:	f001 f913 	bl	80037b8 <xTaskGetSchedulerState>
 8002592:	4603      	mov	r3, r0
 8002594:	2b00      	cmp	r3, #0
 8002596:	d102      	bne.n	800259e <xQueueReceive+0x6e>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d101      	bne.n	80025a2 <xQueueReceive+0x72>
 800259e:	2301      	movs	r3, #1
 80025a0:	e000      	b.n	80025a4 <xQueueReceive+0x74>
 80025a2:	2300      	movs	r3, #0
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d10a      	bne.n	80025be <xQueueReceive+0x8e>
	__asm volatile
 80025a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025ac:	f383 8811 	msr	BASEPRI, r3
 80025b0:	f3bf 8f6f 	isb	sy
 80025b4:	f3bf 8f4f 	dsb	sy
 80025b8:	61bb      	str	r3, [r7, #24]
}
 80025ba:	bf00      	nop
 80025bc:	e7fe      	b.n	80025bc <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80025be:	f001 fe59 	bl	8004274 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80025c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025c6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80025c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d01f      	beq.n	800260e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80025ce:	68b9      	ldr	r1, [r7, #8]
 80025d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80025d2:	f000 f8f7 	bl	80027c4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80025d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d8:	1e5a      	subs	r2, r3, #1
 80025da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025dc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80025de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025e0:	691b      	ldr	r3, [r3, #16]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d00f      	beq.n	8002606 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80025e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025e8:	3310      	adds	r3, #16
 80025ea:	4618      	mov	r0, r3
 80025ec:	f000 ff26 	bl	800343c <xTaskRemoveFromEventList>
 80025f0:	4603      	mov	r3, r0
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d007      	beq.n	8002606 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80025f6:	4b3d      	ldr	r3, [pc, #244]	; (80026ec <xQueueReceive+0x1bc>)
 80025f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80025fc:	601a      	str	r2, [r3, #0]
 80025fe:	f3bf 8f4f 	dsb	sy
 8002602:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002606:	f001 fe65 	bl	80042d4 <vPortExitCritical>
				return pdPASS;
 800260a:	2301      	movs	r3, #1
 800260c:	e069      	b.n	80026e2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d103      	bne.n	800261c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002614:	f001 fe5e 	bl	80042d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002618:	2300      	movs	r3, #0
 800261a:	e062      	b.n	80026e2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800261c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800261e:	2b00      	cmp	r3, #0
 8002620:	d106      	bne.n	8002630 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002622:	f107 0310 	add.w	r3, r7, #16
 8002626:	4618      	mov	r0, r3
 8002628:	f000 ff6c 	bl	8003504 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800262c:	2301      	movs	r3, #1
 800262e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002630:	f001 fe50 	bl	80042d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002634:	f000 fcde 	bl	8002ff4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002638:	f001 fe1c 	bl	8004274 <vPortEnterCritical>
 800263c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800263e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002642:	b25b      	sxtb	r3, r3
 8002644:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002648:	d103      	bne.n	8002652 <xQueueReceive+0x122>
 800264a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800264c:	2200      	movs	r2, #0
 800264e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002654:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002658:	b25b      	sxtb	r3, r3
 800265a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800265e:	d103      	bne.n	8002668 <xQueueReceive+0x138>
 8002660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002662:	2200      	movs	r2, #0
 8002664:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002668:	f001 fe34 	bl	80042d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800266c:	1d3a      	adds	r2, r7, #4
 800266e:	f107 0310 	add.w	r3, r7, #16
 8002672:	4611      	mov	r1, r2
 8002674:	4618      	mov	r0, r3
 8002676:	f000 ff5b 	bl	8003530 <xTaskCheckForTimeOut>
 800267a:	4603      	mov	r3, r0
 800267c:	2b00      	cmp	r3, #0
 800267e:	d123      	bne.n	80026c8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002680:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002682:	f000 f917 	bl	80028b4 <prvIsQueueEmpty>
 8002686:	4603      	mov	r3, r0
 8002688:	2b00      	cmp	r3, #0
 800268a:	d017      	beq.n	80026bc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800268c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800268e:	3324      	adds	r3, #36	; 0x24
 8002690:	687a      	ldr	r2, [r7, #4]
 8002692:	4611      	mov	r1, r2
 8002694:	4618      	mov	r0, r3
 8002696:	f000 fe81 	bl	800339c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800269a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800269c:	f000 f8b8 	bl	8002810 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80026a0:	f000 fcb6 	bl	8003010 <xTaskResumeAll>
 80026a4:	4603      	mov	r3, r0
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d189      	bne.n	80025be <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80026aa:	4b10      	ldr	r3, [pc, #64]	; (80026ec <xQueueReceive+0x1bc>)
 80026ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80026b0:	601a      	str	r2, [r3, #0]
 80026b2:	f3bf 8f4f 	dsb	sy
 80026b6:	f3bf 8f6f 	isb	sy
 80026ba:	e780      	b.n	80025be <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80026bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80026be:	f000 f8a7 	bl	8002810 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80026c2:	f000 fca5 	bl	8003010 <xTaskResumeAll>
 80026c6:	e77a      	b.n	80025be <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80026c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80026ca:	f000 f8a1 	bl	8002810 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80026ce:	f000 fc9f 	bl	8003010 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80026d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80026d4:	f000 f8ee 	bl	80028b4 <prvIsQueueEmpty>
 80026d8:	4603      	mov	r3, r0
 80026da:	2b00      	cmp	r3, #0
 80026dc:	f43f af6f 	beq.w	80025be <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80026e0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	3730      	adds	r7, #48	; 0x30
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	bf00      	nop
 80026ec:	e000ed04 	.word	0xe000ed04

080026f0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b086      	sub	sp, #24
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	60f8      	str	r0, [r7, #12]
 80026f8:	60b9      	str	r1, [r7, #8]
 80026fa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80026fc:	2300      	movs	r3, #0
 80026fe:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002704:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800270a:	2b00      	cmp	r3, #0
 800270c:	d10d      	bne.n	800272a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d14d      	bne.n	80027b2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	4618      	mov	r0, r3
 800271c:	f001 f86a 	bl	80037f4 <xTaskPriorityDisinherit>
 8002720:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	2200      	movs	r2, #0
 8002726:	609a      	str	r2, [r3, #8]
 8002728:	e043      	b.n	80027b2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d119      	bne.n	8002764 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	6858      	ldr	r0, [r3, #4]
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002738:	461a      	mov	r2, r3
 800273a:	68b9      	ldr	r1, [r7, #8]
 800273c:	f002 fb17 	bl	8004d6e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	685a      	ldr	r2, [r3, #4]
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002748:	441a      	add	r2, r3
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	685a      	ldr	r2, [r3, #4]
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	429a      	cmp	r2, r3
 8002758:	d32b      	bcc.n	80027b2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	605a      	str	r2, [r3, #4]
 8002762:	e026      	b.n	80027b2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	68d8      	ldr	r0, [r3, #12]
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800276c:	461a      	mov	r2, r3
 800276e:	68b9      	ldr	r1, [r7, #8]
 8002770:	f002 fafd 	bl	8004d6e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	68da      	ldr	r2, [r3, #12]
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277c:	425b      	negs	r3, r3
 800277e:	441a      	add	r2, r3
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	68da      	ldr	r2, [r3, #12]
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	429a      	cmp	r2, r3
 800278e:	d207      	bcs.n	80027a0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	689a      	ldr	r2, [r3, #8]
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002798:	425b      	negs	r3, r3
 800279a:	441a      	add	r2, r3
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2b02      	cmp	r3, #2
 80027a4:	d105      	bne.n	80027b2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d002      	beq.n	80027b2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80027ac:	693b      	ldr	r3, [r7, #16]
 80027ae:	3b01      	subs	r3, #1
 80027b0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	1c5a      	adds	r2, r3, #1
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80027ba:	697b      	ldr	r3, [r7, #20]
}
 80027bc:	4618      	mov	r0, r3
 80027be:	3718      	adds	r7, #24
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}

080027c4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b082      	sub	sp, #8
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
 80027cc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d018      	beq.n	8002808 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	68da      	ldr	r2, [r3, #12]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027de:	441a      	add	r2, r3
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	68da      	ldr	r2, [r3, #12]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	689b      	ldr	r3, [r3, #8]
 80027ec:	429a      	cmp	r2, r3
 80027ee:	d303      	bcc.n	80027f8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681a      	ldr	r2, [r3, #0]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	68d9      	ldr	r1, [r3, #12]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002800:	461a      	mov	r2, r3
 8002802:	6838      	ldr	r0, [r7, #0]
 8002804:	f002 fab3 	bl	8004d6e <memcpy>
	}
}
 8002808:	bf00      	nop
 800280a:	3708      	adds	r7, #8
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}

08002810 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b084      	sub	sp, #16
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002818:	f001 fd2c 	bl	8004274 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002822:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002824:	e011      	b.n	800284a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800282a:	2b00      	cmp	r3, #0
 800282c:	d012      	beq.n	8002854 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	3324      	adds	r3, #36	; 0x24
 8002832:	4618      	mov	r0, r3
 8002834:	f000 fe02 	bl	800343c <xTaskRemoveFromEventList>
 8002838:	4603      	mov	r3, r0
 800283a:	2b00      	cmp	r3, #0
 800283c:	d001      	beq.n	8002842 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800283e:	f000 fed9 	bl	80035f4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002842:	7bfb      	ldrb	r3, [r7, #15]
 8002844:	3b01      	subs	r3, #1
 8002846:	b2db      	uxtb	r3, r3
 8002848:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800284a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800284e:	2b00      	cmp	r3, #0
 8002850:	dce9      	bgt.n	8002826 <prvUnlockQueue+0x16>
 8002852:	e000      	b.n	8002856 <prvUnlockQueue+0x46>
					break;
 8002854:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	22ff      	movs	r2, #255	; 0xff
 800285a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800285e:	f001 fd39 	bl	80042d4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002862:	f001 fd07 	bl	8004274 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800286c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800286e:	e011      	b.n	8002894 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	691b      	ldr	r3, [r3, #16]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d012      	beq.n	800289e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	3310      	adds	r3, #16
 800287c:	4618      	mov	r0, r3
 800287e:	f000 fddd 	bl	800343c <xTaskRemoveFromEventList>
 8002882:	4603      	mov	r3, r0
 8002884:	2b00      	cmp	r3, #0
 8002886:	d001      	beq.n	800288c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002888:	f000 feb4 	bl	80035f4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800288c:	7bbb      	ldrb	r3, [r7, #14]
 800288e:	3b01      	subs	r3, #1
 8002890:	b2db      	uxtb	r3, r3
 8002892:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002894:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002898:	2b00      	cmp	r3, #0
 800289a:	dce9      	bgt.n	8002870 <prvUnlockQueue+0x60>
 800289c:	e000      	b.n	80028a0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800289e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	22ff      	movs	r2, #255	; 0xff
 80028a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80028a8:	f001 fd14 	bl	80042d4 <vPortExitCritical>
}
 80028ac:	bf00      	nop
 80028ae:	3710      	adds	r7, #16
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}

080028b4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b084      	sub	sp, #16
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80028bc:	f001 fcda 	bl	8004274 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d102      	bne.n	80028ce <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80028c8:	2301      	movs	r3, #1
 80028ca:	60fb      	str	r3, [r7, #12]
 80028cc:	e001      	b.n	80028d2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80028ce:	2300      	movs	r3, #0
 80028d0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80028d2:	f001 fcff 	bl	80042d4 <vPortExitCritical>

	return xReturn;
 80028d6:	68fb      	ldr	r3, [r7, #12]
}
 80028d8:	4618      	mov	r0, r3
 80028da:	3710      	adds	r7, #16
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}

080028e0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b084      	sub	sp, #16
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80028e8:	f001 fcc4 	bl	8004274 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028f4:	429a      	cmp	r2, r3
 80028f6:	d102      	bne.n	80028fe <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80028f8:	2301      	movs	r3, #1
 80028fa:	60fb      	str	r3, [r7, #12]
 80028fc:	e001      	b.n	8002902 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80028fe:	2300      	movs	r3, #0
 8002900:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002902:	f001 fce7 	bl	80042d4 <vPortExitCritical>

	return xReturn;
 8002906:	68fb      	ldr	r3, [r7, #12]
}
 8002908:	4618      	mov	r0, r3
 800290a:	3710      	adds	r7, #16
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}

08002910 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002910:	b480      	push	{r7}
 8002912:	b085      	sub	sp, #20
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
 8002918:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800291a:	2300      	movs	r3, #0
 800291c:	60fb      	str	r3, [r7, #12]
 800291e:	e014      	b.n	800294a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002920:	4a0f      	ldr	r2, [pc, #60]	; (8002960 <vQueueAddToRegistry+0x50>)
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d10b      	bne.n	8002944 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800292c:	490c      	ldr	r1, [pc, #48]	; (8002960 <vQueueAddToRegistry+0x50>)
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	683a      	ldr	r2, [r7, #0]
 8002932:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8002936:	4a0a      	ldr	r2, [pc, #40]	; (8002960 <vQueueAddToRegistry+0x50>)
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	00db      	lsls	r3, r3, #3
 800293c:	4413      	add	r3, r2
 800293e:	687a      	ldr	r2, [r7, #4]
 8002940:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8002942:	e006      	b.n	8002952 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	3301      	adds	r3, #1
 8002948:	60fb      	str	r3, [r7, #12]
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	2b07      	cmp	r3, #7
 800294e:	d9e7      	bls.n	8002920 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002950:	bf00      	nop
 8002952:	bf00      	nop
 8002954:	3714      	adds	r7, #20
 8002956:	46bd      	mov	sp, r7
 8002958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295c:	4770      	bx	lr
 800295e:	bf00      	nop
 8002960:	2000079c 	.word	0x2000079c

08002964 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002964:	b580      	push	{r7, lr}
 8002966:	b086      	sub	sp, #24
 8002968:	af00      	add	r7, sp, #0
 800296a:	60f8      	str	r0, [r7, #12]
 800296c:	60b9      	str	r1, [r7, #8]
 800296e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002974:	f001 fc7e 	bl	8004274 <vPortEnterCritical>
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800297e:	b25b      	sxtb	r3, r3
 8002980:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002984:	d103      	bne.n	800298e <vQueueWaitForMessageRestricted+0x2a>
 8002986:	697b      	ldr	r3, [r7, #20]
 8002988:	2200      	movs	r2, #0
 800298a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002994:	b25b      	sxtb	r3, r3
 8002996:	f1b3 3fff 	cmp.w	r3, #4294967295
 800299a:	d103      	bne.n	80029a4 <vQueueWaitForMessageRestricted+0x40>
 800299c:	697b      	ldr	r3, [r7, #20]
 800299e:	2200      	movs	r2, #0
 80029a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80029a4:	f001 fc96 	bl	80042d4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d106      	bne.n	80029be <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	3324      	adds	r3, #36	; 0x24
 80029b4:	687a      	ldr	r2, [r7, #4]
 80029b6:	68b9      	ldr	r1, [r7, #8]
 80029b8:	4618      	mov	r0, r3
 80029ba:	f000 fd13 	bl	80033e4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80029be:	6978      	ldr	r0, [r7, #20]
 80029c0:	f7ff ff26 	bl	8002810 <prvUnlockQueue>
	}
 80029c4:	bf00      	nop
 80029c6:	3718      	adds	r7, #24
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bd80      	pop	{r7, pc}

080029cc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b08e      	sub	sp, #56	; 0x38
 80029d0:	af04      	add	r7, sp, #16
 80029d2:	60f8      	str	r0, [r7, #12]
 80029d4:	60b9      	str	r1, [r7, #8]
 80029d6:	607a      	str	r2, [r7, #4]
 80029d8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80029da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d10a      	bne.n	80029f6 <xTaskCreateStatic+0x2a>
	__asm volatile
 80029e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029e4:	f383 8811 	msr	BASEPRI, r3
 80029e8:	f3bf 8f6f 	isb	sy
 80029ec:	f3bf 8f4f 	dsb	sy
 80029f0:	623b      	str	r3, [r7, #32]
}
 80029f2:	bf00      	nop
 80029f4:	e7fe      	b.n	80029f4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80029f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d10a      	bne.n	8002a12 <xTaskCreateStatic+0x46>
	__asm volatile
 80029fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a00:	f383 8811 	msr	BASEPRI, r3
 8002a04:	f3bf 8f6f 	isb	sy
 8002a08:	f3bf 8f4f 	dsb	sy
 8002a0c:	61fb      	str	r3, [r7, #28]
}
 8002a0e:	bf00      	nop
 8002a10:	e7fe      	b.n	8002a10 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002a12:	235c      	movs	r3, #92	; 0x5c
 8002a14:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	2b5c      	cmp	r3, #92	; 0x5c
 8002a1a:	d00a      	beq.n	8002a32 <xTaskCreateStatic+0x66>
	__asm volatile
 8002a1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a20:	f383 8811 	msr	BASEPRI, r3
 8002a24:	f3bf 8f6f 	isb	sy
 8002a28:	f3bf 8f4f 	dsb	sy
 8002a2c:	61bb      	str	r3, [r7, #24]
}
 8002a2e:	bf00      	nop
 8002a30:	e7fe      	b.n	8002a30 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002a32:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002a34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d01e      	beq.n	8002a78 <xTaskCreateStatic+0xac>
 8002a3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d01b      	beq.n	8002a78 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002a40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a42:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a46:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002a48:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a4c:	2202      	movs	r2, #2
 8002a4e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002a52:	2300      	movs	r3, #0
 8002a54:	9303      	str	r3, [sp, #12]
 8002a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a58:	9302      	str	r3, [sp, #8]
 8002a5a:	f107 0314 	add.w	r3, r7, #20
 8002a5e:	9301      	str	r3, [sp, #4]
 8002a60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a62:	9300      	str	r3, [sp, #0]
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	687a      	ldr	r2, [r7, #4]
 8002a68:	68b9      	ldr	r1, [r7, #8]
 8002a6a:	68f8      	ldr	r0, [r7, #12]
 8002a6c:	f000 f850 	bl	8002b10 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002a70:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002a72:	f000 f8dd 	bl	8002c30 <prvAddNewTaskToReadyList>
 8002a76:	e001      	b.n	8002a7c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002a7c:	697b      	ldr	r3, [r7, #20]
	}
 8002a7e:	4618      	mov	r0, r3
 8002a80:	3728      	adds	r7, #40	; 0x28
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}

08002a86 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002a86:	b580      	push	{r7, lr}
 8002a88:	b08c      	sub	sp, #48	; 0x30
 8002a8a:	af04      	add	r7, sp, #16
 8002a8c:	60f8      	str	r0, [r7, #12]
 8002a8e:	60b9      	str	r1, [r7, #8]
 8002a90:	603b      	str	r3, [r7, #0]
 8002a92:	4613      	mov	r3, r2
 8002a94:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002a96:	88fb      	ldrh	r3, [r7, #6]
 8002a98:	009b      	lsls	r3, r3, #2
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f001 fd0c 	bl	80044b8 <pvPortMalloc>
 8002aa0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d00e      	beq.n	8002ac6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002aa8:	205c      	movs	r0, #92	; 0x5c
 8002aaa:	f001 fd05 	bl	80044b8 <pvPortMalloc>
 8002aae:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002ab0:	69fb      	ldr	r3, [r7, #28]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d003      	beq.n	8002abe <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002ab6:	69fb      	ldr	r3, [r7, #28]
 8002ab8:	697a      	ldr	r2, [r7, #20]
 8002aba:	631a      	str	r2, [r3, #48]	; 0x30
 8002abc:	e005      	b.n	8002aca <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002abe:	6978      	ldr	r0, [r7, #20]
 8002ac0:	f001 fdc6 	bl	8004650 <vPortFree>
 8002ac4:	e001      	b.n	8002aca <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002aca:	69fb      	ldr	r3, [r7, #28]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d017      	beq.n	8002b00 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002ad0:	69fb      	ldr	r3, [r7, #28]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002ad8:	88fa      	ldrh	r2, [r7, #6]
 8002ada:	2300      	movs	r3, #0
 8002adc:	9303      	str	r3, [sp, #12]
 8002ade:	69fb      	ldr	r3, [r7, #28]
 8002ae0:	9302      	str	r3, [sp, #8]
 8002ae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ae4:	9301      	str	r3, [sp, #4]
 8002ae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ae8:	9300      	str	r3, [sp, #0]
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	68b9      	ldr	r1, [r7, #8]
 8002aee:	68f8      	ldr	r0, [r7, #12]
 8002af0:	f000 f80e 	bl	8002b10 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002af4:	69f8      	ldr	r0, [r7, #28]
 8002af6:	f000 f89b 	bl	8002c30 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002afa:	2301      	movs	r3, #1
 8002afc:	61bb      	str	r3, [r7, #24]
 8002afe:	e002      	b.n	8002b06 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002b00:	f04f 33ff 	mov.w	r3, #4294967295
 8002b04:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002b06:	69bb      	ldr	r3, [r7, #24]
	}
 8002b08:	4618      	mov	r0, r3
 8002b0a:	3720      	adds	r7, #32
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd80      	pop	{r7, pc}

08002b10 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b088      	sub	sp, #32
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	60f8      	str	r0, [r7, #12]
 8002b18:	60b9      	str	r1, [r7, #8]
 8002b1a:	607a      	str	r2, [r7, #4]
 8002b1c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002b1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b20:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	009b      	lsls	r3, r3, #2
 8002b26:	461a      	mov	r2, r3
 8002b28:	21a5      	movs	r1, #165	; 0xa5
 8002b2a:	f002 f8a5 	bl	8004c78 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002b38:	3b01      	subs	r3, #1
 8002b3a:	009b      	lsls	r3, r3, #2
 8002b3c:	4413      	add	r3, r2
 8002b3e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002b40:	69bb      	ldr	r3, [r7, #24]
 8002b42:	f023 0307 	bic.w	r3, r3, #7
 8002b46:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002b48:	69bb      	ldr	r3, [r7, #24]
 8002b4a:	f003 0307 	and.w	r3, r3, #7
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d00a      	beq.n	8002b68 <prvInitialiseNewTask+0x58>
	__asm volatile
 8002b52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b56:	f383 8811 	msr	BASEPRI, r3
 8002b5a:	f3bf 8f6f 	isb	sy
 8002b5e:	f3bf 8f4f 	dsb	sy
 8002b62:	617b      	str	r3, [r7, #20]
}
 8002b64:	bf00      	nop
 8002b66:	e7fe      	b.n	8002b66 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d01f      	beq.n	8002bae <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002b6e:	2300      	movs	r3, #0
 8002b70:	61fb      	str	r3, [r7, #28]
 8002b72:	e012      	b.n	8002b9a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002b74:	68ba      	ldr	r2, [r7, #8]
 8002b76:	69fb      	ldr	r3, [r7, #28]
 8002b78:	4413      	add	r3, r2
 8002b7a:	7819      	ldrb	r1, [r3, #0]
 8002b7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b7e:	69fb      	ldr	r3, [r7, #28]
 8002b80:	4413      	add	r3, r2
 8002b82:	3334      	adds	r3, #52	; 0x34
 8002b84:	460a      	mov	r2, r1
 8002b86:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002b88:	68ba      	ldr	r2, [r7, #8]
 8002b8a:	69fb      	ldr	r3, [r7, #28]
 8002b8c:	4413      	add	r3, r2
 8002b8e:	781b      	ldrb	r3, [r3, #0]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d006      	beq.n	8002ba2 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002b94:	69fb      	ldr	r3, [r7, #28]
 8002b96:	3301      	adds	r3, #1
 8002b98:	61fb      	str	r3, [r7, #28]
 8002b9a:	69fb      	ldr	r3, [r7, #28]
 8002b9c:	2b0f      	cmp	r3, #15
 8002b9e:	d9e9      	bls.n	8002b74 <prvInitialiseNewTask+0x64>
 8002ba0:	e000      	b.n	8002ba4 <prvInitialiseNewTask+0x94>
			{
				break;
 8002ba2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002bac:	e003      	b.n	8002bb6 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002bb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bb8:	2b37      	cmp	r3, #55	; 0x37
 8002bba:	d901      	bls.n	8002bc0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002bbc:	2337      	movs	r3, #55	; 0x37
 8002bbe:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002bc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bc2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002bc4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bc8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002bca:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8002bcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bce:	2200      	movs	r2, #0
 8002bd0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bd4:	3304      	adds	r3, #4
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f7ff f978 	bl	8001ecc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002bdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bde:	3318      	adds	r3, #24
 8002be0:	4618      	mov	r0, r3
 8002be2:	f7ff f973 	bl	8001ecc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002be8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002bea:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bee:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8002bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bf4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002bf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bf8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002bfa:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002bfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bfe:	2200      	movs	r2, #0
 8002c00:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002c02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c04:	2200      	movs	r2, #0
 8002c06:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002c0a:	683a      	ldr	r2, [r7, #0]
 8002c0c:	68f9      	ldr	r1, [r7, #12]
 8002c0e:	69b8      	ldr	r0, [r7, #24]
 8002c10:	f001 fa00 	bl	8004014 <pxPortInitialiseStack>
 8002c14:	4602      	mov	r2, r0
 8002c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c18:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002c1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d002      	beq.n	8002c26 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002c20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c24:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002c26:	bf00      	nop
 8002c28:	3720      	adds	r7, #32
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}
	...

08002c30 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b082      	sub	sp, #8
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002c38:	f001 fb1c 	bl	8004274 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002c3c:	4b2d      	ldr	r3, [pc, #180]	; (8002cf4 <prvAddNewTaskToReadyList+0xc4>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	3301      	adds	r3, #1
 8002c42:	4a2c      	ldr	r2, [pc, #176]	; (8002cf4 <prvAddNewTaskToReadyList+0xc4>)
 8002c44:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002c46:	4b2c      	ldr	r3, [pc, #176]	; (8002cf8 <prvAddNewTaskToReadyList+0xc8>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d109      	bne.n	8002c62 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002c4e:	4a2a      	ldr	r2, [pc, #168]	; (8002cf8 <prvAddNewTaskToReadyList+0xc8>)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002c54:	4b27      	ldr	r3, [pc, #156]	; (8002cf4 <prvAddNewTaskToReadyList+0xc4>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	2b01      	cmp	r3, #1
 8002c5a:	d110      	bne.n	8002c7e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002c5c:	f000 fcee 	bl	800363c <prvInitialiseTaskLists>
 8002c60:	e00d      	b.n	8002c7e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002c62:	4b26      	ldr	r3, [pc, #152]	; (8002cfc <prvAddNewTaskToReadyList+0xcc>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d109      	bne.n	8002c7e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002c6a:	4b23      	ldr	r3, [pc, #140]	; (8002cf8 <prvAddNewTaskToReadyList+0xc8>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c74:	429a      	cmp	r2, r3
 8002c76:	d802      	bhi.n	8002c7e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002c78:	4a1f      	ldr	r2, [pc, #124]	; (8002cf8 <prvAddNewTaskToReadyList+0xc8>)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002c7e:	4b20      	ldr	r3, [pc, #128]	; (8002d00 <prvAddNewTaskToReadyList+0xd0>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	3301      	adds	r3, #1
 8002c84:	4a1e      	ldr	r2, [pc, #120]	; (8002d00 <prvAddNewTaskToReadyList+0xd0>)
 8002c86:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002c88:	4b1d      	ldr	r3, [pc, #116]	; (8002d00 <prvAddNewTaskToReadyList+0xd0>)
 8002c8a:	681a      	ldr	r2, [r3, #0]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c94:	4b1b      	ldr	r3, [pc, #108]	; (8002d04 <prvAddNewTaskToReadyList+0xd4>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	429a      	cmp	r2, r3
 8002c9a:	d903      	bls.n	8002ca4 <prvAddNewTaskToReadyList+0x74>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ca0:	4a18      	ldr	r2, [pc, #96]	; (8002d04 <prvAddNewTaskToReadyList+0xd4>)
 8002ca2:	6013      	str	r3, [r2, #0]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ca8:	4613      	mov	r3, r2
 8002caa:	009b      	lsls	r3, r3, #2
 8002cac:	4413      	add	r3, r2
 8002cae:	009b      	lsls	r3, r3, #2
 8002cb0:	4a15      	ldr	r2, [pc, #84]	; (8002d08 <prvAddNewTaskToReadyList+0xd8>)
 8002cb2:	441a      	add	r2, r3
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	3304      	adds	r3, #4
 8002cb8:	4619      	mov	r1, r3
 8002cba:	4610      	mov	r0, r2
 8002cbc:	f7ff f913 	bl	8001ee6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002cc0:	f001 fb08 	bl	80042d4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002cc4:	4b0d      	ldr	r3, [pc, #52]	; (8002cfc <prvAddNewTaskToReadyList+0xcc>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d00e      	beq.n	8002cea <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002ccc:	4b0a      	ldr	r3, [pc, #40]	; (8002cf8 <prvAddNewTaskToReadyList+0xc8>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cd6:	429a      	cmp	r2, r3
 8002cd8:	d207      	bcs.n	8002cea <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002cda:	4b0c      	ldr	r3, [pc, #48]	; (8002d0c <prvAddNewTaskToReadyList+0xdc>)
 8002cdc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ce0:	601a      	str	r2, [r3, #0]
 8002ce2:	f3bf 8f4f 	dsb	sy
 8002ce6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002cea:	bf00      	nop
 8002cec:	3708      	adds	r7, #8
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}
 8002cf2:	bf00      	nop
 8002cf4:	20000cb0 	.word	0x20000cb0
 8002cf8:	200007dc 	.word	0x200007dc
 8002cfc:	20000cbc 	.word	0x20000cbc
 8002d00:	20000ccc 	.word	0x20000ccc
 8002d04:	20000cb8 	.word	0x20000cb8
 8002d08:	200007e0 	.word	0x200007e0
 8002d0c:	e000ed04 	.word	0xe000ed04

08002d10 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b084      	sub	sp, #16
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8002d18:	f001 faac 	bl	8004274 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d102      	bne.n	8002d28 <vTaskDelete+0x18>
 8002d22:	4b2c      	ldr	r3, [pc, #176]	; (8002dd4 <vTaskDelete+0xc4>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	e000      	b.n	8002d2a <vTaskDelete+0x1a>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	3304      	adds	r3, #4
 8002d30:	4618      	mov	r0, r3
 8002d32:	f7ff f935 	bl	8001fa0 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d004      	beq.n	8002d48 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	3318      	adds	r3, #24
 8002d42:	4618      	mov	r0, r3
 8002d44:	f7ff f92c 	bl	8001fa0 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8002d48:	4b23      	ldr	r3, [pc, #140]	; (8002dd8 <vTaskDelete+0xc8>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	3301      	adds	r3, #1
 8002d4e:	4a22      	ldr	r2, [pc, #136]	; (8002dd8 <vTaskDelete+0xc8>)
 8002d50:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8002d52:	4b20      	ldr	r3, [pc, #128]	; (8002dd4 <vTaskDelete+0xc4>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	68fa      	ldr	r2, [r7, #12]
 8002d58:	429a      	cmp	r2, r3
 8002d5a:	d10b      	bne.n	8002d74 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	3304      	adds	r3, #4
 8002d60:	4619      	mov	r1, r3
 8002d62:	481e      	ldr	r0, [pc, #120]	; (8002ddc <vTaskDelete+0xcc>)
 8002d64:	f7ff f8bf 	bl	8001ee6 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8002d68:	4b1d      	ldr	r3, [pc, #116]	; (8002de0 <vTaskDelete+0xd0>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	3301      	adds	r3, #1
 8002d6e:	4a1c      	ldr	r2, [pc, #112]	; (8002de0 <vTaskDelete+0xd0>)
 8002d70:	6013      	str	r3, [r2, #0]
 8002d72:	e009      	b.n	8002d88 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8002d74:	4b1b      	ldr	r3, [pc, #108]	; (8002de4 <vTaskDelete+0xd4>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	3b01      	subs	r3, #1
 8002d7a:	4a1a      	ldr	r2, [pc, #104]	; (8002de4 <vTaskDelete+0xd4>)
 8002d7c:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 8002d7e:	68f8      	ldr	r0, [r7, #12]
 8002d80:	f000 fcca 	bl	8003718 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8002d84:	f000 fcf8 	bl	8003778 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 8002d88:	f001 faa4 	bl	80042d4 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8002d8c:	4b16      	ldr	r3, [pc, #88]	; (8002de8 <vTaskDelete+0xd8>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d01b      	beq.n	8002dcc <vTaskDelete+0xbc>
		{
			if( pxTCB == pxCurrentTCB )
 8002d94:	4b0f      	ldr	r3, [pc, #60]	; (8002dd4 <vTaskDelete+0xc4>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	68fa      	ldr	r2, [r7, #12]
 8002d9a:	429a      	cmp	r2, r3
 8002d9c:	d116      	bne.n	8002dcc <vTaskDelete+0xbc>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8002d9e:	4b13      	ldr	r3, [pc, #76]	; (8002dec <vTaskDelete+0xdc>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d00a      	beq.n	8002dbc <vTaskDelete+0xac>
	__asm volatile
 8002da6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002daa:	f383 8811 	msr	BASEPRI, r3
 8002dae:	f3bf 8f6f 	isb	sy
 8002db2:	f3bf 8f4f 	dsb	sy
 8002db6:	60bb      	str	r3, [r7, #8]
}
 8002db8:	bf00      	nop
 8002dba:	e7fe      	b.n	8002dba <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 8002dbc:	4b0c      	ldr	r3, [pc, #48]	; (8002df0 <vTaskDelete+0xe0>)
 8002dbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002dc2:	601a      	str	r2, [r3, #0]
 8002dc4:	f3bf 8f4f 	dsb	sy
 8002dc8:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002dcc:	bf00      	nop
 8002dce:	3710      	adds	r7, #16
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bd80      	pop	{r7, pc}
 8002dd4:	200007dc 	.word	0x200007dc
 8002dd8:	20000ccc 	.word	0x20000ccc
 8002ddc:	20000c84 	.word	0x20000c84
 8002de0:	20000c98 	.word	0x20000c98
 8002de4:	20000cb0 	.word	0x20000cb0
 8002de8:	20000cbc 	.word	0x20000cbc
 8002dec:	20000cd8 	.word	0x20000cd8
 8002df0:	e000ed04 	.word	0xe000ed04

08002df4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b084      	sub	sp, #16
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d017      	beq.n	8002e36 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002e06:	4b13      	ldr	r3, [pc, #76]	; (8002e54 <vTaskDelay+0x60>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d00a      	beq.n	8002e24 <vTaskDelay+0x30>
	__asm volatile
 8002e0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e12:	f383 8811 	msr	BASEPRI, r3
 8002e16:	f3bf 8f6f 	isb	sy
 8002e1a:	f3bf 8f4f 	dsb	sy
 8002e1e:	60bb      	str	r3, [r7, #8]
}
 8002e20:	bf00      	nop
 8002e22:	e7fe      	b.n	8002e22 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8002e24:	f000 f8e6 	bl	8002ff4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002e28:	2100      	movs	r1, #0
 8002e2a:	6878      	ldr	r0, [r7, #4]
 8002e2c:	f000 fd50 	bl	80038d0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002e30:	f000 f8ee 	bl	8003010 <xTaskResumeAll>
 8002e34:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d107      	bne.n	8002e4c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8002e3c:	4b06      	ldr	r3, [pc, #24]	; (8002e58 <vTaskDelay+0x64>)
 8002e3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e42:	601a      	str	r2, [r3, #0]
 8002e44:	f3bf 8f4f 	dsb	sy
 8002e48:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002e4c:	bf00      	nop
 8002e4e:	3710      	adds	r7, #16
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bd80      	pop	{r7, pc}
 8002e54:	20000cd8 	.word	0x20000cd8
 8002e58:	e000ed04 	.word	0xe000ed04

08002e5c <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b088      	sub	sp, #32
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 8002e68:	69bb      	ldr	r3, [r7, #24]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d10a      	bne.n	8002e84 <eTaskGetState+0x28>
	__asm volatile
 8002e6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e72:	f383 8811 	msr	BASEPRI, r3
 8002e76:	f3bf 8f6f 	isb	sy
 8002e7a:	f3bf 8f4f 	dsb	sy
 8002e7e:	60bb      	str	r3, [r7, #8]
}
 8002e80:	bf00      	nop
 8002e82:	e7fe      	b.n	8002e82 <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 8002e84:	4b23      	ldr	r3, [pc, #140]	; (8002f14 <eTaskGetState+0xb8>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	69ba      	ldr	r2, [r7, #24]
 8002e8a:	429a      	cmp	r2, r3
 8002e8c:	d102      	bne.n	8002e94 <eTaskGetState+0x38>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	77fb      	strb	r3, [r7, #31]
 8002e92:	e03a      	b.n	8002f0a <eTaskGetState+0xae>
		}
		else
		{
			taskENTER_CRITICAL();
 8002e94:	f001 f9ee 	bl	8004274 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 8002e98:	69bb      	ldr	r3, [r7, #24]
 8002e9a:	695b      	ldr	r3, [r3, #20]
 8002e9c:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 8002e9e:	4b1e      	ldr	r3, [pc, #120]	; (8002f18 <eTaskGetState+0xbc>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 8002ea4:	4b1d      	ldr	r3, [pc, #116]	; (8002f1c <eTaskGetState+0xc0>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 8002eaa:	f001 fa13 	bl	80042d4 <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 8002eae:	697a      	ldr	r2, [r7, #20]
 8002eb0:	693b      	ldr	r3, [r7, #16]
 8002eb2:	429a      	cmp	r2, r3
 8002eb4:	d003      	beq.n	8002ebe <eTaskGetState+0x62>
 8002eb6:	697a      	ldr	r2, [r7, #20]
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	429a      	cmp	r2, r3
 8002ebc:	d102      	bne.n	8002ec4 <eTaskGetState+0x68>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 8002ebe:	2302      	movs	r3, #2
 8002ec0:	77fb      	strb	r3, [r7, #31]
 8002ec2:	e022      	b.n	8002f0a <eTaskGetState+0xae>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	4a16      	ldr	r2, [pc, #88]	; (8002f20 <eTaskGetState+0xc4>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d112      	bne.n	8002ef2 <eTaskGetState+0x96>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 8002ecc:	69bb      	ldr	r3, [r7, #24]
 8002ece:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d10b      	bne.n	8002eec <eTaskGetState+0x90>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8002ed4:	69bb      	ldr	r3, [r7, #24]
 8002ed6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002eda:	b2db      	uxtb	r3, r3
 8002edc:	2b01      	cmp	r3, #1
 8002ede:	d102      	bne.n	8002ee6 <eTaskGetState+0x8a>
							{
								eReturn = eBlocked;
 8002ee0:	2302      	movs	r3, #2
 8002ee2:	77fb      	strb	r3, [r7, #31]
 8002ee4:	e011      	b.n	8002f0a <eTaskGetState+0xae>
							}
							else
							{
								eReturn = eSuspended;
 8002ee6:	2303      	movs	r3, #3
 8002ee8:	77fb      	strb	r3, [r7, #31]
 8002eea:	e00e      	b.n	8002f0a <eTaskGetState+0xae>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 8002eec:	2302      	movs	r3, #2
 8002eee:	77fb      	strb	r3, [r7, #31]
 8002ef0:	e00b      	b.n	8002f0a <eTaskGetState+0xae>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	4a0b      	ldr	r2, [pc, #44]	; (8002f24 <eTaskGetState+0xc8>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d002      	beq.n	8002f00 <eTaskGetState+0xa4>
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d102      	bne.n	8002f06 <eTaskGetState+0xaa>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 8002f00:	2304      	movs	r3, #4
 8002f02:	77fb      	strb	r3, [r7, #31]
 8002f04:	e001      	b.n	8002f0a <eTaskGetState+0xae>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 8002f06:	2301      	movs	r3, #1
 8002f08:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 8002f0a:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	3720      	adds	r7, #32
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}
 8002f14:	200007dc 	.word	0x200007dc
 8002f18:	20000c68 	.word	0x20000c68
 8002f1c:	20000c6c 	.word	0x20000c6c
 8002f20:	20000c9c 	.word	0x20000c9c
 8002f24:	20000c84 	.word	0x20000c84

08002f28 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b08a      	sub	sp, #40	; 0x28
 8002f2c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002f32:	2300      	movs	r3, #0
 8002f34:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002f36:	463a      	mov	r2, r7
 8002f38:	1d39      	adds	r1, r7, #4
 8002f3a:	f107 0308 	add.w	r3, r7, #8
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f7fe ff70 	bl	8001e24 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002f44:	6839      	ldr	r1, [r7, #0]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	68ba      	ldr	r2, [r7, #8]
 8002f4a:	9202      	str	r2, [sp, #8]
 8002f4c:	9301      	str	r3, [sp, #4]
 8002f4e:	2300      	movs	r3, #0
 8002f50:	9300      	str	r3, [sp, #0]
 8002f52:	2300      	movs	r3, #0
 8002f54:	460a      	mov	r2, r1
 8002f56:	4921      	ldr	r1, [pc, #132]	; (8002fdc <vTaskStartScheduler+0xb4>)
 8002f58:	4821      	ldr	r0, [pc, #132]	; (8002fe0 <vTaskStartScheduler+0xb8>)
 8002f5a:	f7ff fd37 	bl	80029cc <xTaskCreateStatic>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	4a20      	ldr	r2, [pc, #128]	; (8002fe4 <vTaskStartScheduler+0xbc>)
 8002f62:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002f64:	4b1f      	ldr	r3, [pc, #124]	; (8002fe4 <vTaskStartScheduler+0xbc>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d002      	beq.n	8002f72 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	617b      	str	r3, [r7, #20]
 8002f70:	e001      	b.n	8002f76 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002f72:	2300      	movs	r3, #0
 8002f74:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	2b01      	cmp	r3, #1
 8002f7a:	d102      	bne.n	8002f82 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8002f7c:	f000 fcfc 	bl	8003978 <xTimerCreateTimerTask>
 8002f80:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	2b01      	cmp	r3, #1
 8002f86:	d116      	bne.n	8002fb6 <vTaskStartScheduler+0x8e>
	__asm volatile
 8002f88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f8c:	f383 8811 	msr	BASEPRI, r3
 8002f90:	f3bf 8f6f 	isb	sy
 8002f94:	f3bf 8f4f 	dsb	sy
 8002f98:	613b      	str	r3, [r7, #16]
}
 8002f9a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002f9c:	4b12      	ldr	r3, [pc, #72]	; (8002fe8 <vTaskStartScheduler+0xc0>)
 8002f9e:	f04f 32ff 	mov.w	r2, #4294967295
 8002fa2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002fa4:	4b11      	ldr	r3, [pc, #68]	; (8002fec <vTaskStartScheduler+0xc4>)
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002faa:	4b11      	ldr	r3, [pc, #68]	; (8002ff0 <vTaskStartScheduler+0xc8>)
 8002fac:	2200      	movs	r2, #0
 8002fae:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002fb0:	f001 f8be 	bl	8004130 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002fb4:	e00e      	b.n	8002fd4 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002fb6:	697b      	ldr	r3, [r7, #20]
 8002fb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fbc:	d10a      	bne.n	8002fd4 <vTaskStartScheduler+0xac>
	__asm volatile
 8002fbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fc2:	f383 8811 	msr	BASEPRI, r3
 8002fc6:	f3bf 8f6f 	isb	sy
 8002fca:	f3bf 8f4f 	dsb	sy
 8002fce:	60fb      	str	r3, [r7, #12]
}
 8002fd0:	bf00      	nop
 8002fd2:	e7fe      	b.n	8002fd2 <vTaskStartScheduler+0xaa>
}
 8002fd4:	bf00      	nop
 8002fd6:	3718      	adds	r7, #24
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bd80      	pop	{r7, pc}
 8002fdc:	08005238 	.word	0x08005238
 8002fe0:	0800360d 	.word	0x0800360d
 8002fe4:	20000cd4 	.word	0x20000cd4
 8002fe8:	20000cd0 	.word	0x20000cd0
 8002fec:	20000cbc 	.word	0x20000cbc
 8002ff0:	20000cb4 	.word	0x20000cb4

08002ff4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8002ff8:	4b04      	ldr	r3, [pc, #16]	; (800300c <vTaskSuspendAll+0x18>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	3301      	adds	r3, #1
 8002ffe:	4a03      	ldr	r2, [pc, #12]	; (800300c <vTaskSuspendAll+0x18>)
 8003000:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003002:	bf00      	nop
 8003004:	46bd      	mov	sp, r7
 8003006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300a:	4770      	bx	lr
 800300c:	20000cd8 	.word	0x20000cd8

08003010 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b084      	sub	sp, #16
 8003014:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003016:	2300      	movs	r3, #0
 8003018:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800301a:	2300      	movs	r3, #0
 800301c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800301e:	4b42      	ldr	r3, [pc, #264]	; (8003128 <xTaskResumeAll+0x118>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d10a      	bne.n	800303c <xTaskResumeAll+0x2c>
	__asm volatile
 8003026:	f04f 0350 	mov.w	r3, #80	; 0x50
 800302a:	f383 8811 	msr	BASEPRI, r3
 800302e:	f3bf 8f6f 	isb	sy
 8003032:	f3bf 8f4f 	dsb	sy
 8003036:	603b      	str	r3, [r7, #0]
}
 8003038:	bf00      	nop
 800303a:	e7fe      	b.n	800303a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800303c:	f001 f91a 	bl	8004274 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003040:	4b39      	ldr	r3, [pc, #228]	; (8003128 <xTaskResumeAll+0x118>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	3b01      	subs	r3, #1
 8003046:	4a38      	ldr	r2, [pc, #224]	; (8003128 <xTaskResumeAll+0x118>)
 8003048:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800304a:	4b37      	ldr	r3, [pc, #220]	; (8003128 <xTaskResumeAll+0x118>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d162      	bne.n	8003118 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003052:	4b36      	ldr	r3, [pc, #216]	; (800312c <xTaskResumeAll+0x11c>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d05e      	beq.n	8003118 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800305a:	e02f      	b.n	80030bc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800305c:	4b34      	ldr	r3, [pc, #208]	; (8003130 <xTaskResumeAll+0x120>)
 800305e:	68db      	ldr	r3, [r3, #12]
 8003060:	68db      	ldr	r3, [r3, #12]
 8003062:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	3318      	adds	r3, #24
 8003068:	4618      	mov	r0, r3
 800306a:	f7fe ff99 	bl	8001fa0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	3304      	adds	r3, #4
 8003072:	4618      	mov	r0, r3
 8003074:	f7fe ff94 	bl	8001fa0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800307c:	4b2d      	ldr	r3, [pc, #180]	; (8003134 <xTaskResumeAll+0x124>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	429a      	cmp	r2, r3
 8003082:	d903      	bls.n	800308c <xTaskResumeAll+0x7c>
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003088:	4a2a      	ldr	r2, [pc, #168]	; (8003134 <xTaskResumeAll+0x124>)
 800308a:	6013      	str	r3, [r2, #0]
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003090:	4613      	mov	r3, r2
 8003092:	009b      	lsls	r3, r3, #2
 8003094:	4413      	add	r3, r2
 8003096:	009b      	lsls	r3, r3, #2
 8003098:	4a27      	ldr	r2, [pc, #156]	; (8003138 <xTaskResumeAll+0x128>)
 800309a:	441a      	add	r2, r3
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	3304      	adds	r3, #4
 80030a0:	4619      	mov	r1, r3
 80030a2:	4610      	mov	r0, r2
 80030a4:	f7fe ff1f 	bl	8001ee6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030ac:	4b23      	ldr	r3, [pc, #140]	; (800313c <xTaskResumeAll+0x12c>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030b2:	429a      	cmp	r2, r3
 80030b4:	d302      	bcc.n	80030bc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80030b6:	4b22      	ldr	r3, [pc, #136]	; (8003140 <xTaskResumeAll+0x130>)
 80030b8:	2201      	movs	r2, #1
 80030ba:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80030bc:	4b1c      	ldr	r3, [pc, #112]	; (8003130 <xTaskResumeAll+0x120>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d1cb      	bne.n	800305c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d001      	beq.n	80030ce <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80030ca:	f000 fb55 	bl	8003778 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80030ce:	4b1d      	ldr	r3, [pc, #116]	; (8003144 <xTaskResumeAll+0x134>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d010      	beq.n	80030fc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80030da:	f000 f847 	bl	800316c <xTaskIncrementTick>
 80030de:	4603      	mov	r3, r0
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d002      	beq.n	80030ea <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80030e4:	4b16      	ldr	r3, [pc, #88]	; (8003140 <xTaskResumeAll+0x130>)
 80030e6:	2201      	movs	r2, #1
 80030e8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	3b01      	subs	r3, #1
 80030ee:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d1f1      	bne.n	80030da <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80030f6:	4b13      	ldr	r3, [pc, #76]	; (8003144 <xTaskResumeAll+0x134>)
 80030f8:	2200      	movs	r2, #0
 80030fa:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80030fc:	4b10      	ldr	r3, [pc, #64]	; (8003140 <xTaskResumeAll+0x130>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d009      	beq.n	8003118 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003104:	2301      	movs	r3, #1
 8003106:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003108:	4b0f      	ldr	r3, [pc, #60]	; (8003148 <xTaskResumeAll+0x138>)
 800310a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800310e:	601a      	str	r2, [r3, #0]
 8003110:	f3bf 8f4f 	dsb	sy
 8003114:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003118:	f001 f8dc 	bl	80042d4 <vPortExitCritical>

	return xAlreadyYielded;
 800311c:	68bb      	ldr	r3, [r7, #8]
}
 800311e:	4618      	mov	r0, r3
 8003120:	3710      	adds	r7, #16
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}
 8003126:	bf00      	nop
 8003128:	20000cd8 	.word	0x20000cd8
 800312c:	20000cb0 	.word	0x20000cb0
 8003130:	20000c70 	.word	0x20000c70
 8003134:	20000cb8 	.word	0x20000cb8
 8003138:	200007e0 	.word	0x200007e0
 800313c:	200007dc 	.word	0x200007dc
 8003140:	20000cc4 	.word	0x20000cc4
 8003144:	20000cc0 	.word	0x20000cc0
 8003148:	e000ed04 	.word	0xe000ed04

0800314c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800314c:	b480      	push	{r7}
 800314e:	b083      	sub	sp, #12
 8003150:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003152:	4b05      	ldr	r3, [pc, #20]	; (8003168 <xTaskGetTickCount+0x1c>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003158:	687b      	ldr	r3, [r7, #4]
}
 800315a:	4618      	mov	r0, r3
 800315c:	370c      	adds	r7, #12
 800315e:	46bd      	mov	sp, r7
 8003160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003164:	4770      	bx	lr
 8003166:	bf00      	nop
 8003168:	20000cb4 	.word	0x20000cb4

0800316c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b086      	sub	sp, #24
 8003170:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003172:	2300      	movs	r3, #0
 8003174:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003176:	4b4f      	ldr	r3, [pc, #316]	; (80032b4 <xTaskIncrementTick+0x148>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	2b00      	cmp	r3, #0
 800317c:	f040 808f 	bne.w	800329e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003180:	4b4d      	ldr	r3, [pc, #308]	; (80032b8 <xTaskIncrementTick+0x14c>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	3301      	adds	r3, #1
 8003186:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003188:	4a4b      	ldr	r2, [pc, #300]	; (80032b8 <xTaskIncrementTick+0x14c>)
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d120      	bne.n	80031d6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003194:	4b49      	ldr	r3, [pc, #292]	; (80032bc <xTaskIncrementTick+0x150>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d00a      	beq.n	80031b4 <xTaskIncrementTick+0x48>
	__asm volatile
 800319e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031a2:	f383 8811 	msr	BASEPRI, r3
 80031a6:	f3bf 8f6f 	isb	sy
 80031aa:	f3bf 8f4f 	dsb	sy
 80031ae:	603b      	str	r3, [r7, #0]
}
 80031b0:	bf00      	nop
 80031b2:	e7fe      	b.n	80031b2 <xTaskIncrementTick+0x46>
 80031b4:	4b41      	ldr	r3, [pc, #260]	; (80032bc <xTaskIncrementTick+0x150>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	60fb      	str	r3, [r7, #12]
 80031ba:	4b41      	ldr	r3, [pc, #260]	; (80032c0 <xTaskIncrementTick+0x154>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a3f      	ldr	r2, [pc, #252]	; (80032bc <xTaskIncrementTick+0x150>)
 80031c0:	6013      	str	r3, [r2, #0]
 80031c2:	4a3f      	ldr	r2, [pc, #252]	; (80032c0 <xTaskIncrementTick+0x154>)
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	6013      	str	r3, [r2, #0]
 80031c8:	4b3e      	ldr	r3, [pc, #248]	; (80032c4 <xTaskIncrementTick+0x158>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	3301      	adds	r3, #1
 80031ce:	4a3d      	ldr	r2, [pc, #244]	; (80032c4 <xTaskIncrementTick+0x158>)
 80031d0:	6013      	str	r3, [r2, #0]
 80031d2:	f000 fad1 	bl	8003778 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80031d6:	4b3c      	ldr	r3, [pc, #240]	; (80032c8 <xTaskIncrementTick+0x15c>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	693a      	ldr	r2, [r7, #16]
 80031dc:	429a      	cmp	r2, r3
 80031de:	d349      	bcc.n	8003274 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80031e0:	4b36      	ldr	r3, [pc, #216]	; (80032bc <xTaskIncrementTick+0x150>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d104      	bne.n	80031f4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80031ea:	4b37      	ldr	r3, [pc, #220]	; (80032c8 <xTaskIncrementTick+0x15c>)
 80031ec:	f04f 32ff 	mov.w	r2, #4294967295
 80031f0:	601a      	str	r2, [r3, #0]
					break;
 80031f2:	e03f      	b.n	8003274 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80031f4:	4b31      	ldr	r3, [pc, #196]	; (80032bc <xTaskIncrementTick+0x150>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	68db      	ldr	r3, [r3, #12]
 80031fa:	68db      	ldr	r3, [r3, #12]
 80031fc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003204:	693a      	ldr	r2, [r7, #16]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	429a      	cmp	r2, r3
 800320a:	d203      	bcs.n	8003214 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800320c:	4a2e      	ldr	r2, [pc, #184]	; (80032c8 <xTaskIncrementTick+0x15c>)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003212:	e02f      	b.n	8003274 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	3304      	adds	r3, #4
 8003218:	4618      	mov	r0, r3
 800321a:	f7fe fec1 	bl	8001fa0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800321e:	68bb      	ldr	r3, [r7, #8]
 8003220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003222:	2b00      	cmp	r3, #0
 8003224:	d004      	beq.n	8003230 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003226:	68bb      	ldr	r3, [r7, #8]
 8003228:	3318      	adds	r3, #24
 800322a:	4618      	mov	r0, r3
 800322c:	f7fe feb8 	bl	8001fa0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003234:	4b25      	ldr	r3, [pc, #148]	; (80032cc <xTaskIncrementTick+0x160>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	429a      	cmp	r2, r3
 800323a:	d903      	bls.n	8003244 <xTaskIncrementTick+0xd8>
 800323c:	68bb      	ldr	r3, [r7, #8]
 800323e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003240:	4a22      	ldr	r2, [pc, #136]	; (80032cc <xTaskIncrementTick+0x160>)
 8003242:	6013      	str	r3, [r2, #0]
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003248:	4613      	mov	r3, r2
 800324a:	009b      	lsls	r3, r3, #2
 800324c:	4413      	add	r3, r2
 800324e:	009b      	lsls	r3, r3, #2
 8003250:	4a1f      	ldr	r2, [pc, #124]	; (80032d0 <xTaskIncrementTick+0x164>)
 8003252:	441a      	add	r2, r3
 8003254:	68bb      	ldr	r3, [r7, #8]
 8003256:	3304      	adds	r3, #4
 8003258:	4619      	mov	r1, r3
 800325a:	4610      	mov	r0, r2
 800325c:	f7fe fe43 	bl	8001ee6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003264:	4b1b      	ldr	r3, [pc, #108]	; (80032d4 <xTaskIncrementTick+0x168>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800326a:	429a      	cmp	r2, r3
 800326c:	d3b8      	bcc.n	80031e0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800326e:	2301      	movs	r3, #1
 8003270:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003272:	e7b5      	b.n	80031e0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003274:	4b17      	ldr	r3, [pc, #92]	; (80032d4 <xTaskIncrementTick+0x168>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800327a:	4915      	ldr	r1, [pc, #84]	; (80032d0 <xTaskIncrementTick+0x164>)
 800327c:	4613      	mov	r3, r2
 800327e:	009b      	lsls	r3, r3, #2
 8003280:	4413      	add	r3, r2
 8003282:	009b      	lsls	r3, r3, #2
 8003284:	440b      	add	r3, r1
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	2b01      	cmp	r3, #1
 800328a:	d901      	bls.n	8003290 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800328c:	2301      	movs	r3, #1
 800328e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003290:	4b11      	ldr	r3, [pc, #68]	; (80032d8 <xTaskIncrementTick+0x16c>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d007      	beq.n	80032a8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8003298:	2301      	movs	r3, #1
 800329a:	617b      	str	r3, [r7, #20]
 800329c:	e004      	b.n	80032a8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800329e:	4b0f      	ldr	r3, [pc, #60]	; (80032dc <xTaskIncrementTick+0x170>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	3301      	adds	r3, #1
 80032a4:	4a0d      	ldr	r2, [pc, #52]	; (80032dc <xTaskIncrementTick+0x170>)
 80032a6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80032a8:	697b      	ldr	r3, [r7, #20]
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	3718      	adds	r7, #24
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}
 80032b2:	bf00      	nop
 80032b4:	20000cd8 	.word	0x20000cd8
 80032b8:	20000cb4 	.word	0x20000cb4
 80032bc:	20000c68 	.word	0x20000c68
 80032c0:	20000c6c 	.word	0x20000c6c
 80032c4:	20000cc8 	.word	0x20000cc8
 80032c8:	20000cd0 	.word	0x20000cd0
 80032cc:	20000cb8 	.word	0x20000cb8
 80032d0:	200007e0 	.word	0x200007e0
 80032d4:	200007dc 	.word	0x200007dc
 80032d8:	20000cc4 	.word	0x20000cc4
 80032dc:	20000cc0 	.word	0x20000cc0

080032e0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80032e0:	b480      	push	{r7}
 80032e2:	b085      	sub	sp, #20
 80032e4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80032e6:	4b28      	ldr	r3, [pc, #160]	; (8003388 <vTaskSwitchContext+0xa8>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d003      	beq.n	80032f6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80032ee:	4b27      	ldr	r3, [pc, #156]	; (800338c <vTaskSwitchContext+0xac>)
 80032f0:	2201      	movs	r2, #1
 80032f2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80032f4:	e041      	b.n	800337a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80032f6:	4b25      	ldr	r3, [pc, #148]	; (800338c <vTaskSwitchContext+0xac>)
 80032f8:	2200      	movs	r2, #0
 80032fa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80032fc:	4b24      	ldr	r3, [pc, #144]	; (8003390 <vTaskSwitchContext+0xb0>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	60fb      	str	r3, [r7, #12]
 8003302:	e010      	b.n	8003326 <vTaskSwitchContext+0x46>
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d10a      	bne.n	8003320 <vTaskSwitchContext+0x40>
	__asm volatile
 800330a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800330e:	f383 8811 	msr	BASEPRI, r3
 8003312:	f3bf 8f6f 	isb	sy
 8003316:	f3bf 8f4f 	dsb	sy
 800331a:	607b      	str	r3, [r7, #4]
}
 800331c:	bf00      	nop
 800331e:	e7fe      	b.n	800331e <vTaskSwitchContext+0x3e>
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	3b01      	subs	r3, #1
 8003324:	60fb      	str	r3, [r7, #12]
 8003326:	491b      	ldr	r1, [pc, #108]	; (8003394 <vTaskSwitchContext+0xb4>)
 8003328:	68fa      	ldr	r2, [r7, #12]
 800332a:	4613      	mov	r3, r2
 800332c:	009b      	lsls	r3, r3, #2
 800332e:	4413      	add	r3, r2
 8003330:	009b      	lsls	r3, r3, #2
 8003332:	440b      	add	r3, r1
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d0e4      	beq.n	8003304 <vTaskSwitchContext+0x24>
 800333a:	68fa      	ldr	r2, [r7, #12]
 800333c:	4613      	mov	r3, r2
 800333e:	009b      	lsls	r3, r3, #2
 8003340:	4413      	add	r3, r2
 8003342:	009b      	lsls	r3, r3, #2
 8003344:	4a13      	ldr	r2, [pc, #76]	; (8003394 <vTaskSwitchContext+0xb4>)
 8003346:	4413      	add	r3, r2
 8003348:	60bb      	str	r3, [r7, #8]
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	685a      	ldr	r2, [r3, #4]
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	605a      	str	r2, [r3, #4]
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	685a      	ldr	r2, [r3, #4]
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	3308      	adds	r3, #8
 800335c:	429a      	cmp	r2, r3
 800335e:	d104      	bne.n	800336a <vTaskSwitchContext+0x8a>
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	685a      	ldr	r2, [r3, #4]
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	605a      	str	r2, [r3, #4]
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	68db      	ldr	r3, [r3, #12]
 8003370:	4a09      	ldr	r2, [pc, #36]	; (8003398 <vTaskSwitchContext+0xb8>)
 8003372:	6013      	str	r3, [r2, #0]
 8003374:	4a06      	ldr	r2, [pc, #24]	; (8003390 <vTaskSwitchContext+0xb0>)
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	6013      	str	r3, [r2, #0]
}
 800337a:	bf00      	nop
 800337c:	3714      	adds	r7, #20
 800337e:	46bd      	mov	sp, r7
 8003380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003384:	4770      	bx	lr
 8003386:	bf00      	nop
 8003388:	20000cd8 	.word	0x20000cd8
 800338c:	20000cc4 	.word	0x20000cc4
 8003390:	20000cb8 	.word	0x20000cb8
 8003394:	200007e0 	.word	0x200007e0
 8003398:	200007dc 	.word	0x200007dc

0800339c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b084      	sub	sp, #16
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
 80033a4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d10a      	bne.n	80033c2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80033ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033b0:	f383 8811 	msr	BASEPRI, r3
 80033b4:	f3bf 8f6f 	isb	sy
 80033b8:	f3bf 8f4f 	dsb	sy
 80033bc:	60fb      	str	r3, [r7, #12]
}
 80033be:	bf00      	nop
 80033c0:	e7fe      	b.n	80033c0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80033c2:	4b07      	ldr	r3, [pc, #28]	; (80033e0 <vTaskPlaceOnEventList+0x44>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	3318      	adds	r3, #24
 80033c8:	4619      	mov	r1, r3
 80033ca:	6878      	ldr	r0, [r7, #4]
 80033cc:	f7fe fdaf 	bl	8001f2e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80033d0:	2101      	movs	r1, #1
 80033d2:	6838      	ldr	r0, [r7, #0]
 80033d4:	f000 fa7c 	bl	80038d0 <prvAddCurrentTaskToDelayedList>
}
 80033d8:	bf00      	nop
 80033da:	3710      	adds	r7, #16
 80033dc:	46bd      	mov	sp, r7
 80033de:	bd80      	pop	{r7, pc}
 80033e0:	200007dc 	.word	0x200007dc

080033e4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b086      	sub	sp, #24
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	60f8      	str	r0, [r7, #12]
 80033ec:	60b9      	str	r1, [r7, #8]
 80033ee:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d10a      	bne.n	800340c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80033f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033fa:	f383 8811 	msr	BASEPRI, r3
 80033fe:	f3bf 8f6f 	isb	sy
 8003402:	f3bf 8f4f 	dsb	sy
 8003406:	617b      	str	r3, [r7, #20]
}
 8003408:	bf00      	nop
 800340a:	e7fe      	b.n	800340a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800340c:	4b0a      	ldr	r3, [pc, #40]	; (8003438 <vTaskPlaceOnEventListRestricted+0x54>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	3318      	adds	r3, #24
 8003412:	4619      	mov	r1, r3
 8003414:	68f8      	ldr	r0, [r7, #12]
 8003416:	f7fe fd66 	bl	8001ee6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d002      	beq.n	8003426 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8003420:	f04f 33ff 	mov.w	r3, #4294967295
 8003424:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003426:	6879      	ldr	r1, [r7, #4]
 8003428:	68b8      	ldr	r0, [r7, #8]
 800342a:	f000 fa51 	bl	80038d0 <prvAddCurrentTaskToDelayedList>
	}
 800342e:	bf00      	nop
 8003430:	3718      	adds	r7, #24
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}
 8003436:	bf00      	nop
 8003438:	200007dc 	.word	0x200007dc

0800343c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b086      	sub	sp, #24
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	68db      	ldr	r3, [r3, #12]
 8003448:	68db      	ldr	r3, [r3, #12]
 800344a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d10a      	bne.n	8003468 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003452:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003456:	f383 8811 	msr	BASEPRI, r3
 800345a:	f3bf 8f6f 	isb	sy
 800345e:	f3bf 8f4f 	dsb	sy
 8003462:	60fb      	str	r3, [r7, #12]
}
 8003464:	bf00      	nop
 8003466:	e7fe      	b.n	8003466 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	3318      	adds	r3, #24
 800346c:	4618      	mov	r0, r3
 800346e:	f7fe fd97 	bl	8001fa0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003472:	4b1e      	ldr	r3, [pc, #120]	; (80034ec <xTaskRemoveFromEventList+0xb0>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d11d      	bne.n	80034b6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	3304      	adds	r3, #4
 800347e:	4618      	mov	r0, r3
 8003480:	f7fe fd8e 	bl	8001fa0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003484:	693b      	ldr	r3, [r7, #16]
 8003486:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003488:	4b19      	ldr	r3, [pc, #100]	; (80034f0 <xTaskRemoveFromEventList+0xb4>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	429a      	cmp	r2, r3
 800348e:	d903      	bls.n	8003498 <xTaskRemoveFromEventList+0x5c>
 8003490:	693b      	ldr	r3, [r7, #16]
 8003492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003494:	4a16      	ldr	r2, [pc, #88]	; (80034f0 <xTaskRemoveFromEventList+0xb4>)
 8003496:	6013      	str	r3, [r2, #0]
 8003498:	693b      	ldr	r3, [r7, #16]
 800349a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800349c:	4613      	mov	r3, r2
 800349e:	009b      	lsls	r3, r3, #2
 80034a0:	4413      	add	r3, r2
 80034a2:	009b      	lsls	r3, r3, #2
 80034a4:	4a13      	ldr	r2, [pc, #76]	; (80034f4 <xTaskRemoveFromEventList+0xb8>)
 80034a6:	441a      	add	r2, r3
 80034a8:	693b      	ldr	r3, [r7, #16]
 80034aa:	3304      	adds	r3, #4
 80034ac:	4619      	mov	r1, r3
 80034ae:	4610      	mov	r0, r2
 80034b0:	f7fe fd19 	bl	8001ee6 <vListInsertEnd>
 80034b4:	e005      	b.n	80034c2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80034b6:	693b      	ldr	r3, [r7, #16]
 80034b8:	3318      	adds	r3, #24
 80034ba:	4619      	mov	r1, r3
 80034bc:	480e      	ldr	r0, [pc, #56]	; (80034f8 <xTaskRemoveFromEventList+0xbc>)
 80034be:	f7fe fd12 	bl	8001ee6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034c6:	4b0d      	ldr	r3, [pc, #52]	; (80034fc <xTaskRemoveFromEventList+0xc0>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034cc:	429a      	cmp	r2, r3
 80034ce:	d905      	bls.n	80034dc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80034d0:	2301      	movs	r3, #1
 80034d2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80034d4:	4b0a      	ldr	r3, [pc, #40]	; (8003500 <xTaskRemoveFromEventList+0xc4>)
 80034d6:	2201      	movs	r2, #1
 80034d8:	601a      	str	r2, [r3, #0]
 80034da:	e001      	b.n	80034e0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80034dc:	2300      	movs	r3, #0
 80034de:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80034e0:	697b      	ldr	r3, [r7, #20]
}
 80034e2:	4618      	mov	r0, r3
 80034e4:	3718      	adds	r7, #24
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}
 80034ea:	bf00      	nop
 80034ec:	20000cd8 	.word	0x20000cd8
 80034f0:	20000cb8 	.word	0x20000cb8
 80034f4:	200007e0 	.word	0x200007e0
 80034f8:	20000c70 	.word	0x20000c70
 80034fc:	200007dc 	.word	0x200007dc
 8003500:	20000cc4 	.word	0x20000cc4

08003504 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003504:	b480      	push	{r7}
 8003506:	b083      	sub	sp, #12
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800350c:	4b06      	ldr	r3, [pc, #24]	; (8003528 <vTaskInternalSetTimeOutState+0x24>)
 800350e:	681a      	ldr	r2, [r3, #0]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003514:	4b05      	ldr	r3, [pc, #20]	; (800352c <vTaskInternalSetTimeOutState+0x28>)
 8003516:	681a      	ldr	r2, [r3, #0]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	605a      	str	r2, [r3, #4]
}
 800351c:	bf00      	nop
 800351e:	370c      	adds	r7, #12
 8003520:	46bd      	mov	sp, r7
 8003522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003526:	4770      	bx	lr
 8003528:	20000cc8 	.word	0x20000cc8
 800352c:	20000cb4 	.word	0x20000cb4

08003530 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b088      	sub	sp, #32
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
 8003538:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d10a      	bne.n	8003556 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003544:	f383 8811 	msr	BASEPRI, r3
 8003548:	f3bf 8f6f 	isb	sy
 800354c:	f3bf 8f4f 	dsb	sy
 8003550:	613b      	str	r3, [r7, #16]
}
 8003552:	bf00      	nop
 8003554:	e7fe      	b.n	8003554 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d10a      	bne.n	8003572 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800355c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003560:	f383 8811 	msr	BASEPRI, r3
 8003564:	f3bf 8f6f 	isb	sy
 8003568:	f3bf 8f4f 	dsb	sy
 800356c:	60fb      	str	r3, [r7, #12]
}
 800356e:	bf00      	nop
 8003570:	e7fe      	b.n	8003570 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8003572:	f000 fe7f 	bl	8004274 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003576:	4b1d      	ldr	r3, [pc, #116]	; (80035ec <xTaskCheckForTimeOut+0xbc>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	69ba      	ldr	r2, [r7, #24]
 8003582:	1ad3      	subs	r3, r2, r3
 8003584:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800358e:	d102      	bne.n	8003596 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003590:	2300      	movs	r3, #0
 8003592:	61fb      	str	r3, [r7, #28]
 8003594:	e023      	b.n	80035de <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681a      	ldr	r2, [r3, #0]
 800359a:	4b15      	ldr	r3, [pc, #84]	; (80035f0 <xTaskCheckForTimeOut+0xc0>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	429a      	cmp	r2, r3
 80035a0:	d007      	beq.n	80035b2 <xTaskCheckForTimeOut+0x82>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	69ba      	ldr	r2, [r7, #24]
 80035a8:	429a      	cmp	r2, r3
 80035aa:	d302      	bcc.n	80035b2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80035ac:	2301      	movs	r3, #1
 80035ae:	61fb      	str	r3, [r7, #28]
 80035b0:	e015      	b.n	80035de <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	697a      	ldr	r2, [r7, #20]
 80035b8:	429a      	cmp	r2, r3
 80035ba:	d20b      	bcs.n	80035d4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	681a      	ldr	r2, [r3, #0]
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	1ad2      	subs	r2, r2, r3
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80035c8:	6878      	ldr	r0, [r7, #4]
 80035ca:	f7ff ff9b 	bl	8003504 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80035ce:	2300      	movs	r3, #0
 80035d0:	61fb      	str	r3, [r7, #28]
 80035d2:	e004      	b.n	80035de <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	2200      	movs	r2, #0
 80035d8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80035da:	2301      	movs	r3, #1
 80035dc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80035de:	f000 fe79 	bl	80042d4 <vPortExitCritical>

	return xReturn;
 80035e2:	69fb      	ldr	r3, [r7, #28]
}
 80035e4:	4618      	mov	r0, r3
 80035e6:	3720      	adds	r7, #32
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bd80      	pop	{r7, pc}
 80035ec:	20000cb4 	.word	0x20000cb4
 80035f0:	20000cc8 	.word	0x20000cc8

080035f4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80035f4:	b480      	push	{r7}
 80035f6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80035f8:	4b03      	ldr	r3, [pc, #12]	; (8003608 <vTaskMissedYield+0x14>)
 80035fa:	2201      	movs	r2, #1
 80035fc:	601a      	str	r2, [r3, #0]
}
 80035fe:	bf00      	nop
 8003600:	46bd      	mov	sp, r7
 8003602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003606:	4770      	bx	lr
 8003608:	20000cc4 	.word	0x20000cc4

0800360c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b082      	sub	sp, #8
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003614:	f000 f852 	bl	80036bc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003618:	4b06      	ldr	r3, [pc, #24]	; (8003634 <prvIdleTask+0x28>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	2b01      	cmp	r3, #1
 800361e:	d9f9      	bls.n	8003614 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003620:	4b05      	ldr	r3, [pc, #20]	; (8003638 <prvIdleTask+0x2c>)
 8003622:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003626:	601a      	str	r2, [r3, #0]
 8003628:	f3bf 8f4f 	dsb	sy
 800362c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003630:	e7f0      	b.n	8003614 <prvIdleTask+0x8>
 8003632:	bf00      	nop
 8003634:	200007e0 	.word	0x200007e0
 8003638:	e000ed04 	.word	0xe000ed04

0800363c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b082      	sub	sp, #8
 8003640:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003642:	2300      	movs	r3, #0
 8003644:	607b      	str	r3, [r7, #4]
 8003646:	e00c      	b.n	8003662 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003648:	687a      	ldr	r2, [r7, #4]
 800364a:	4613      	mov	r3, r2
 800364c:	009b      	lsls	r3, r3, #2
 800364e:	4413      	add	r3, r2
 8003650:	009b      	lsls	r3, r3, #2
 8003652:	4a12      	ldr	r2, [pc, #72]	; (800369c <prvInitialiseTaskLists+0x60>)
 8003654:	4413      	add	r3, r2
 8003656:	4618      	mov	r0, r3
 8003658:	f7fe fc18 	bl	8001e8c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	3301      	adds	r3, #1
 8003660:	607b      	str	r3, [r7, #4]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2b37      	cmp	r3, #55	; 0x37
 8003666:	d9ef      	bls.n	8003648 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003668:	480d      	ldr	r0, [pc, #52]	; (80036a0 <prvInitialiseTaskLists+0x64>)
 800366a:	f7fe fc0f 	bl	8001e8c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800366e:	480d      	ldr	r0, [pc, #52]	; (80036a4 <prvInitialiseTaskLists+0x68>)
 8003670:	f7fe fc0c 	bl	8001e8c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003674:	480c      	ldr	r0, [pc, #48]	; (80036a8 <prvInitialiseTaskLists+0x6c>)
 8003676:	f7fe fc09 	bl	8001e8c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800367a:	480c      	ldr	r0, [pc, #48]	; (80036ac <prvInitialiseTaskLists+0x70>)
 800367c:	f7fe fc06 	bl	8001e8c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003680:	480b      	ldr	r0, [pc, #44]	; (80036b0 <prvInitialiseTaskLists+0x74>)
 8003682:	f7fe fc03 	bl	8001e8c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003686:	4b0b      	ldr	r3, [pc, #44]	; (80036b4 <prvInitialiseTaskLists+0x78>)
 8003688:	4a05      	ldr	r2, [pc, #20]	; (80036a0 <prvInitialiseTaskLists+0x64>)
 800368a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800368c:	4b0a      	ldr	r3, [pc, #40]	; (80036b8 <prvInitialiseTaskLists+0x7c>)
 800368e:	4a05      	ldr	r2, [pc, #20]	; (80036a4 <prvInitialiseTaskLists+0x68>)
 8003690:	601a      	str	r2, [r3, #0]
}
 8003692:	bf00      	nop
 8003694:	3708      	adds	r7, #8
 8003696:	46bd      	mov	sp, r7
 8003698:	bd80      	pop	{r7, pc}
 800369a:	bf00      	nop
 800369c:	200007e0 	.word	0x200007e0
 80036a0:	20000c40 	.word	0x20000c40
 80036a4:	20000c54 	.word	0x20000c54
 80036a8:	20000c70 	.word	0x20000c70
 80036ac:	20000c84 	.word	0x20000c84
 80036b0:	20000c9c 	.word	0x20000c9c
 80036b4:	20000c68 	.word	0x20000c68
 80036b8:	20000c6c 	.word	0x20000c6c

080036bc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b082      	sub	sp, #8
 80036c0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80036c2:	e019      	b.n	80036f8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80036c4:	f000 fdd6 	bl	8004274 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80036c8:	4b10      	ldr	r3, [pc, #64]	; (800370c <prvCheckTasksWaitingTermination+0x50>)
 80036ca:	68db      	ldr	r3, [r3, #12]
 80036cc:	68db      	ldr	r3, [r3, #12]
 80036ce:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	3304      	adds	r3, #4
 80036d4:	4618      	mov	r0, r3
 80036d6:	f7fe fc63 	bl	8001fa0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80036da:	4b0d      	ldr	r3, [pc, #52]	; (8003710 <prvCheckTasksWaitingTermination+0x54>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	3b01      	subs	r3, #1
 80036e0:	4a0b      	ldr	r2, [pc, #44]	; (8003710 <prvCheckTasksWaitingTermination+0x54>)
 80036e2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80036e4:	4b0b      	ldr	r3, [pc, #44]	; (8003714 <prvCheckTasksWaitingTermination+0x58>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	3b01      	subs	r3, #1
 80036ea:	4a0a      	ldr	r2, [pc, #40]	; (8003714 <prvCheckTasksWaitingTermination+0x58>)
 80036ec:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80036ee:	f000 fdf1 	bl	80042d4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	f000 f810 	bl	8003718 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80036f8:	4b06      	ldr	r3, [pc, #24]	; (8003714 <prvCheckTasksWaitingTermination+0x58>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d1e1      	bne.n	80036c4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003700:	bf00      	nop
 8003702:	bf00      	nop
 8003704:	3708      	adds	r7, #8
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}
 800370a:	bf00      	nop
 800370c:	20000c84 	.word	0x20000c84
 8003710:	20000cb0 	.word	0x20000cb0
 8003714:	20000c98 	.word	0x20000c98

08003718 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003718:	b580      	push	{r7, lr}
 800371a:	b084      	sub	sp, #16
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003726:	2b00      	cmp	r3, #0
 8003728:	d108      	bne.n	800373c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800372e:	4618      	mov	r0, r3
 8003730:	f000 ff8e 	bl	8004650 <vPortFree>
				vPortFree( pxTCB );
 8003734:	6878      	ldr	r0, [r7, #4]
 8003736:	f000 ff8b 	bl	8004650 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800373a:	e018      	b.n	800376e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003742:	2b01      	cmp	r3, #1
 8003744:	d103      	bne.n	800374e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003746:	6878      	ldr	r0, [r7, #4]
 8003748:	f000 ff82 	bl	8004650 <vPortFree>
	}
 800374c:	e00f      	b.n	800376e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003754:	2b02      	cmp	r3, #2
 8003756:	d00a      	beq.n	800376e <prvDeleteTCB+0x56>
	__asm volatile
 8003758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800375c:	f383 8811 	msr	BASEPRI, r3
 8003760:	f3bf 8f6f 	isb	sy
 8003764:	f3bf 8f4f 	dsb	sy
 8003768:	60fb      	str	r3, [r7, #12]
}
 800376a:	bf00      	nop
 800376c:	e7fe      	b.n	800376c <prvDeleteTCB+0x54>
	}
 800376e:	bf00      	nop
 8003770:	3710      	adds	r7, #16
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}
	...

08003778 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003778:	b480      	push	{r7}
 800377a:	b083      	sub	sp, #12
 800377c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800377e:	4b0c      	ldr	r3, [pc, #48]	; (80037b0 <prvResetNextTaskUnblockTime+0x38>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d104      	bne.n	8003792 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003788:	4b0a      	ldr	r3, [pc, #40]	; (80037b4 <prvResetNextTaskUnblockTime+0x3c>)
 800378a:	f04f 32ff 	mov.w	r2, #4294967295
 800378e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003790:	e008      	b.n	80037a4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003792:	4b07      	ldr	r3, [pc, #28]	; (80037b0 <prvResetNextTaskUnblockTime+0x38>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	68db      	ldr	r3, [r3, #12]
 8003798:	68db      	ldr	r3, [r3, #12]
 800379a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	4a04      	ldr	r2, [pc, #16]	; (80037b4 <prvResetNextTaskUnblockTime+0x3c>)
 80037a2:	6013      	str	r3, [r2, #0]
}
 80037a4:	bf00      	nop
 80037a6:	370c      	adds	r7, #12
 80037a8:	46bd      	mov	sp, r7
 80037aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ae:	4770      	bx	lr
 80037b0:	20000c68 	.word	0x20000c68
 80037b4:	20000cd0 	.word	0x20000cd0

080037b8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80037b8:	b480      	push	{r7}
 80037ba:	b083      	sub	sp, #12
 80037bc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80037be:	4b0b      	ldr	r3, [pc, #44]	; (80037ec <xTaskGetSchedulerState+0x34>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d102      	bne.n	80037cc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80037c6:	2301      	movs	r3, #1
 80037c8:	607b      	str	r3, [r7, #4]
 80037ca:	e008      	b.n	80037de <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80037cc:	4b08      	ldr	r3, [pc, #32]	; (80037f0 <xTaskGetSchedulerState+0x38>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d102      	bne.n	80037da <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80037d4:	2302      	movs	r3, #2
 80037d6:	607b      	str	r3, [r7, #4]
 80037d8:	e001      	b.n	80037de <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80037da:	2300      	movs	r3, #0
 80037dc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80037de:	687b      	ldr	r3, [r7, #4]
	}
 80037e0:	4618      	mov	r0, r3
 80037e2:	370c      	adds	r7, #12
 80037e4:	46bd      	mov	sp, r7
 80037e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ea:	4770      	bx	lr
 80037ec:	20000cbc 	.word	0x20000cbc
 80037f0:	20000cd8 	.word	0x20000cd8

080037f4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b086      	sub	sp, #24
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003800:	2300      	movs	r3, #0
 8003802:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d056      	beq.n	80038b8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800380a:	4b2e      	ldr	r3, [pc, #184]	; (80038c4 <xTaskPriorityDisinherit+0xd0>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	693a      	ldr	r2, [r7, #16]
 8003810:	429a      	cmp	r2, r3
 8003812:	d00a      	beq.n	800382a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8003814:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003818:	f383 8811 	msr	BASEPRI, r3
 800381c:	f3bf 8f6f 	isb	sy
 8003820:	f3bf 8f4f 	dsb	sy
 8003824:	60fb      	str	r3, [r7, #12]
}
 8003826:	bf00      	nop
 8003828:	e7fe      	b.n	8003828 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800382e:	2b00      	cmp	r3, #0
 8003830:	d10a      	bne.n	8003848 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8003832:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003836:	f383 8811 	msr	BASEPRI, r3
 800383a:	f3bf 8f6f 	isb	sy
 800383e:	f3bf 8f4f 	dsb	sy
 8003842:	60bb      	str	r3, [r7, #8]
}
 8003844:	bf00      	nop
 8003846:	e7fe      	b.n	8003846 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800384c:	1e5a      	subs	r2, r3, #1
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800385a:	429a      	cmp	r2, r3
 800385c:	d02c      	beq.n	80038b8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003862:	2b00      	cmp	r3, #0
 8003864:	d128      	bne.n	80038b8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	3304      	adds	r3, #4
 800386a:	4618      	mov	r0, r3
 800386c:	f7fe fb98 	bl	8001fa0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003870:	693b      	ldr	r3, [r7, #16]
 8003872:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800387c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003880:	693b      	ldr	r3, [r7, #16]
 8003882:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003884:	693b      	ldr	r3, [r7, #16]
 8003886:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003888:	4b0f      	ldr	r3, [pc, #60]	; (80038c8 <xTaskPriorityDisinherit+0xd4>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	429a      	cmp	r2, r3
 800388e:	d903      	bls.n	8003898 <xTaskPriorityDisinherit+0xa4>
 8003890:	693b      	ldr	r3, [r7, #16]
 8003892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003894:	4a0c      	ldr	r2, [pc, #48]	; (80038c8 <xTaskPriorityDisinherit+0xd4>)
 8003896:	6013      	str	r3, [r2, #0]
 8003898:	693b      	ldr	r3, [r7, #16]
 800389a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800389c:	4613      	mov	r3, r2
 800389e:	009b      	lsls	r3, r3, #2
 80038a0:	4413      	add	r3, r2
 80038a2:	009b      	lsls	r3, r3, #2
 80038a4:	4a09      	ldr	r2, [pc, #36]	; (80038cc <xTaskPriorityDisinherit+0xd8>)
 80038a6:	441a      	add	r2, r3
 80038a8:	693b      	ldr	r3, [r7, #16]
 80038aa:	3304      	adds	r3, #4
 80038ac:	4619      	mov	r1, r3
 80038ae:	4610      	mov	r0, r2
 80038b0:	f7fe fb19 	bl	8001ee6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80038b4:	2301      	movs	r3, #1
 80038b6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80038b8:	697b      	ldr	r3, [r7, #20]
	}
 80038ba:	4618      	mov	r0, r3
 80038bc:	3718      	adds	r7, #24
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}
 80038c2:	bf00      	nop
 80038c4:	200007dc 	.word	0x200007dc
 80038c8:	20000cb8 	.word	0x20000cb8
 80038cc:	200007e0 	.word	0x200007e0

080038d0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b084      	sub	sp, #16
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
 80038d8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80038da:	4b21      	ldr	r3, [pc, #132]	; (8003960 <prvAddCurrentTaskToDelayedList+0x90>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80038e0:	4b20      	ldr	r3, [pc, #128]	; (8003964 <prvAddCurrentTaskToDelayedList+0x94>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	3304      	adds	r3, #4
 80038e6:	4618      	mov	r0, r3
 80038e8:	f7fe fb5a 	bl	8001fa0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038f2:	d10a      	bne.n	800390a <prvAddCurrentTaskToDelayedList+0x3a>
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d007      	beq.n	800390a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80038fa:	4b1a      	ldr	r3, [pc, #104]	; (8003964 <prvAddCurrentTaskToDelayedList+0x94>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	3304      	adds	r3, #4
 8003900:	4619      	mov	r1, r3
 8003902:	4819      	ldr	r0, [pc, #100]	; (8003968 <prvAddCurrentTaskToDelayedList+0x98>)
 8003904:	f7fe faef 	bl	8001ee6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003908:	e026      	b.n	8003958 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800390a:	68fa      	ldr	r2, [r7, #12]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	4413      	add	r3, r2
 8003910:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003912:	4b14      	ldr	r3, [pc, #80]	; (8003964 <prvAddCurrentTaskToDelayedList+0x94>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	68ba      	ldr	r2, [r7, #8]
 8003918:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800391a:	68ba      	ldr	r2, [r7, #8]
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	429a      	cmp	r2, r3
 8003920:	d209      	bcs.n	8003936 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003922:	4b12      	ldr	r3, [pc, #72]	; (800396c <prvAddCurrentTaskToDelayedList+0x9c>)
 8003924:	681a      	ldr	r2, [r3, #0]
 8003926:	4b0f      	ldr	r3, [pc, #60]	; (8003964 <prvAddCurrentTaskToDelayedList+0x94>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	3304      	adds	r3, #4
 800392c:	4619      	mov	r1, r3
 800392e:	4610      	mov	r0, r2
 8003930:	f7fe fafd 	bl	8001f2e <vListInsert>
}
 8003934:	e010      	b.n	8003958 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003936:	4b0e      	ldr	r3, [pc, #56]	; (8003970 <prvAddCurrentTaskToDelayedList+0xa0>)
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	4b0a      	ldr	r3, [pc, #40]	; (8003964 <prvAddCurrentTaskToDelayedList+0x94>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	3304      	adds	r3, #4
 8003940:	4619      	mov	r1, r3
 8003942:	4610      	mov	r0, r2
 8003944:	f7fe faf3 	bl	8001f2e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003948:	4b0a      	ldr	r3, [pc, #40]	; (8003974 <prvAddCurrentTaskToDelayedList+0xa4>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	68ba      	ldr	r2, [r7, #8]
 800394e:	429a      	cmp	r2, r3
 8003950:	d202      	bcs.n	8003958 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8003952:	4a08      	ldr	r2, [pc, #32]	; (8003974 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	6013      	str	r3, [r2, #0]
}
 8003958:	bf00      	nop
 800395a:	3710      	adds	r7, #16
 800395c:	46bd      	mov	sp, r7
 800395e:	bd80      	pop	{r7, pc}
 8003960:	20000cb4 	.word	0x20000cb4
 8003964:	200007dc 	.word	0x200007dc
 8003968:	20000c9c 	.word	0x20000c9c
 800396c:	20000c6c 	.word	0x20000c6c
 8003970:	20000c68 	.word	0x20000c68
 8003974:	20000cd0 	.word	0x20000cd0

08003978 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b08a      	sub	sp, #40	; 0x28
 800397c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800397e:	2300      	movs	r3, #0
 8003980:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003982:	f000 fb07 	bl	8003f94 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8003986:	4b1c      	ldr	r3, [pc, #112]	; (80039f8 <xTimerCreateTimerTask+0x80>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d021      	beq.n	80039d2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800398e:	2300      	movs	r3, #0
 8003990:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8003992:	2300      	movs	r3, #0
 8003994:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003996:	1d3a      	adds	r2, r7, #4
 8003998:	f107 0108 	add.w	r1, r7, #8
 800399c:	f107 030c 	add.w	r3, r7, #12
 80039a0:	4618      	mov	r0, r3
 80039a2:	f7fe fa59 	bl	8001e58 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80039a6:	6879      	ldr	r1, [r7, #4]
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	68fa      	ldr	r2, [r7, #12]
 80039ac:	9202      	str	r2, [sp, #8]
 80039ae:	9301      	str	r3, [sp, #4]
 80039b0:	2302      	movs	r3, #2
 80039b2:	9300      	str	r3, [sp, #0]
 80039b4:	2300      	movs	r3, #0
 80039b6:	460a      	mov	r2, r1
 80039b8:	4910      	ldr	r1, [pc, #64]	; (80039fc <xTimerCreateTimerTask+0x84>)
 80039ba:	4811      	ldr	r0, [pc, #68]	; (8003a00 <xTimerCreateTimerTask+0x88>)
 80039bc:	f7ff f806 	bl	80029cc <xTaskCreateStatic>
 80039c0:	4603      	mov	r3, r0
 80039c2:	4a10      	ldr	r2, [pc, #64]	; (8003a04 <xTimerCreateTimerTask+0x8c>)
 80039c4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80039c6:	4b0f      	ldr	r3, [pc, #60]	; (8003a04 <xTimerCreateTimerTask+0x8c>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d001      	beq.n	80039d2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80039ce:	2301      	movs	r3, #1
 80039d0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d10a      	bne.n	80039ee <xTimerCreateTimerTask+0x76>
	__asm volatile
 80039d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039dc:	f383 8811 	msr	BASEPRI, r3
 80039e0:	f3bf 8f6f 	isb	sy
 80039e4:	f3bf 8f4f 	dsb	sy
 80039e8:	613b      	str	r3, [r7, #16]
}
 80039ea:	bf00      	nop
 80039ec:	e7fe      	b.n	80039ec <xTimerCreateTimerTask+0x74>
	return xReturn;
 80039ee:	697b      	ldr	r3, [r7, #20]
}
 80039f0:	4618      	mov	r0, r3
 80039f2:	3718      	adds	r7, #24
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bd80      	pop	{r7, pc}
 80039f8:	20000d0c 	.word	0x20000d0c
 80039fc:	08005240 	.word	0x08005240
 8003a00:	08003b3d 	.word	0x08003b3d
 8003a04:	20000d10 	.word	0x20000d10

08003a08 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b08a      	sub	sp, #40	; 0x28
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	60f8      	str	r0, [r7, #12]
 8003a10:	60b9      	str	r1, [r7, #8]
 8003a12:	607a      	str	r2, [r7, #4]
 8003a14:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8003a16:	2300      	movs	r3, #0
 8003a18:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d10a      	bne.n	8003a36 <xTimerGenericCommand+0x2e>
	__asm volatile
 8003a20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a24:	f383 8811 	msr	BASEPRI, r3
 8003a28:	f3bf 8f6f 	isb	sy
 8003a2c:	f3bf 8f4f 	dsb	sy
 8003a30:	623b      	str	r3, [r7, #32]
}
 8003a32:	bf00      	nop
 8003a34:	e7fe      	b.n	8003a34 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003a36:	4b1a      	ldr	r3, [pc, #104]	; (8003aa0 <xTimerGenericCommand+0x98>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d02a      	beq.n	8003a94 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003a3e:	68bb      	ldr	r3, [r7, #8]
 8003a40:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003a4a:	68bb      	ldr	r3, [r7, #8]
 8003a4c:	2b05      	cmp	r3, #5
 8003a4e:	dc18      	bgt.n	8003a82 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003a50:	f7ff feb2 	bl	80037b8 <xTaskGetSchedulerState>
 8003a54:	4603      	mov	r3, r0
 8003a56:	2b02      	cmp	r3, #2
 8003a58:	d109      	bne.n	8003a6e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003a5a:	4b11      	ldr	r3, [pc, #68]	; (8003aa0 <xTimerGenericCommand+0x98>)
 8003a5c:	6818      	ldr	r0, [r3, #0]
 8003a5e:	f107 0110 	add.w	r1, r7, #16
 8003a62:	2300      	movs	r3, #0
 8003a64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a66:	f7fe fbc9 	bl	80021fc <xQueueGenericSend>
 8003a6a:	6278      	str	r0, [r7, #36]	; 0x24
 8003a6c:	e012      	b.n	8003a94 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003a6e:	4b0c      	ldr	r3, [pc, #48]	; (8003aa0 <xTimerGenericCommand+0x98>)
 8003a70:	6818      	ldr	r0, [r3, #0]
 8003a72:	f107 0110 	add.w	r1, r7, #16
 8003a76:	2300      	movs	r3, #0
 8003a78:	2200      	movs	r2, #0
 8003a7a:	f7fe fbbf 	bl	80021fc <xQueueGenericSend>
 8003a7e:	6278      	str	r0, [r7, #36]	; 0x24
 8003a80:	e008      	b.n	8003a94 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003a82:	4b07      	ldr	r3, [pc, #28]	; (8003aa0 <xTimerGenericCommand+0x98>)
 8003a84:	6818      	ldr	r0, [r3, #0]
 8003a86:	f107 0110 	add.w	r1, r7, #16
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	683a      	ldr	r2, [r7, #0]
 8003a8e:	f7fe fcb3 	bl	80023f8 <xQueueGenericSendFromISR>
 8003a92:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003a96:	4618      	mov	r0, r3
 8003a98:	3728      	adds	r7, #40	; 0x28
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bd80      	pop	{r7, pc}
 8003a9e:	bf00      	nop
 8003aa0:	20000d0c 	.word	0x20000d0c

08003aa4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b088      	sub	sp, #32
 8003aa8:	af02      	add	r7, sp, #8
 8003aaa:	6078      	str	r0, [r7, #4]
 8003aac:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003aae:	4b22      	ldr	r3, [pc, #136]	; (8003b38 <prvProcessExpiredTimer+0x94>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	68db      	ldr	r3, [r3, #12]
 8003ab4:	68db      	ldr	r3, [r3, #12]
 8003ab6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003ab8:	697b      	ldr	r3, [r7, #20]
 8003aba:	3304      	adds	r3, #4
 8003abc:	4618      	mov	r0, r3
 8003abe:	f7fe fa6f 	bl	8001fa0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003ac2:	697b      	ldr	r3, [r7, #20]
 8003ac4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003ac8:	f003 0304 	and.w	r3, r3, #4
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d022      	beq.n	8003b16 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003ad0:	697b      	ldr	r3, [r7, #20]
 8003ad2:	699a      	ldr	r2, [r3, #24]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	18d1      	adds	r1, r2, r3
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	683a      	ldr	r2, [r7, #0]
 8003adc:	6978      	ldr	r0, [r7, #20]
 8003ade:	f000 f8d1 	bl	8003c84 <prvInsertTimerInActiveList>
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d01f      	beq.n	8003b28 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003ae8:	2300      	movs	r3, #0
 8003aea:	9300      	str	r3, [sp, #0]
 8003aec:	2300      	movs	r3, #0
 8003aee:	687a      	ldr	r2, [r7, #4]
 8003af0:	2100      	movs	r1, #0
 8003af2:	6978      	ldr	r0, [r7, #20]
 8003af4:	f7ff ff88 	bl	8003a08 <xTimerGenericCommand>
 8003af8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d113      	bne.n	8003b28 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8003b00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b04:	f383 8811 	msr	BASEPRI, r3
 8003b08:	f3bf 8f6f 	isb	sy
 8003b0c:	f3bf 8f4f 	dsb	sy
 8003b10:	60fb      	str	r3, [r7, #12]
}
 8003b12:	bf00      	nop
 8003b14:	e7fe      	b.n	8003b14 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003b16:	697b      	ldr	r3, [r7, #20]
 8003b18:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003b1c:	f023 0301 	bic.w	r3, r3, #1
 8003b20:	b2da      	uxtb	r2, r3
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003b28:	697b      	ldr	r3, [r7, #20]
 8003b2a:	6a1b      	ldr	r3, [r3, #32]
 8003b2c:	6978      	ldr	r0, [r7, #20]
 8003b2e:	4798      	blx	r3
}
 8003b30:	bf00      	nop
 8003b32:	3718      	adds	r7, #24
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}
 8003b38:	20000d04 	.word	0x20000d04

08003b3c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b084      	sub	sp, #16
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003b44:	f107 0308 	add.w	r3, r7, #8
 8003b48:	4618      	mov	r0, r3
 8003b4a:	f000 f857 	bl	8003bfc <prvGetNextExpireTime>
 8003b4e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	4619      	mov	r1, r3
 8003b54:	68f8      	ldr	r0, [r7, #12]
 8003b56:	f000 f803 	bl	8003b60 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8003b5a:	f000 f8d5 	bl	8003d08 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003b5e:	e7f1      	b.n	8003b44 <prvTimerTask+0x8>

08003b60 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b084      	sub	sp, #16
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
 8003b68:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8003b6a:	f7ff fa43 	bl	8002ff4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003b6e:	f107 0308 	add.w	r3, r7, #8
 8003b72:	4618      	mov	r0, r3
 8003b74:	f000 f866 	bl	8003c44 <prvSampleTimeNow>
 8003b78:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d130      	bne.n	8003be2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d10a      	bne.n	8003b9c <prvProcessTimerOrBlockTask+0x3c>
 8003b86:	687a      	ldr	r2, [r7, #4]
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	429a      	cmp	r2, r3
 8003b8c:	d806      	bhi.n	8003b9c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8003b8e:	f7ff fa3f 	bl	8003010 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003b92:	68f9      	ldr	r1, [r7, #12]
 8003b94:	6878      	ldr	r0, [r7, #4]
 8003b96:	f7ff ff85 	bl	8003aa4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8003b9a:	e024      	b.n	8003be6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d008      	beq.n	8003bb4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003ba2:	4b13      	ldr	r3, [pc, #76]	; (8003bf0 <prvProcessTimerOrBlockTask+0x90>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d101      	bne.n	8003bb0 <prvProcessTimerOrBlockTask+0x50>
 8003bac:	2301      	movs	r3, #1
 8003bae:	e000      	b.n	8003bb2 <prvProcessTimerOrBlockTask+0x52>
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003bb4:	4b0f      	ldr	r3, [pc, #60]	; (8003bf4 <prvProcessTimerOrBlockTask+0x94>)
 8003bb6:	6818      	ldr	r0, [r3, #0]
 8003bb8:	687a      	ldr	r2, [r7, #4]
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	1ad3      	subs	r3, r2, r3
 8003bbe:	683a      	ldr	r2, [r7, #0]
 8003bc0:	4619      	mov	r1, r3
 8003bc2:	f7fe fecf 	bl	8002964 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8003bc6:	f7ff fa23 	bl	8003010 <xTaskResumeAll>
 8003bca:	4603      	mov	r3, r0
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d10a      	bne.n	8003be6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8003bd0:	4b09      	ldr	r3, [pc, #36]	; (8003bf8 <prvProcessTimerOrBlockTask+0x98>)
 8003bd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003bd6:	601a      	str	r2, [r3, #0]
 8003bd8:	f3bf 8f4f 	dsb	sy
 8003bdc:	f3bf 8f6f 	isb	sy
}
 8003be0:	e001      	b.n	8003be6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8003be2:	f7ff fa15 	bl	8003010 <xTaskResumeAll>
}
 8003be6:	bf00      	nop
 8003be8:	3710      	adds	r7, #16
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}
 8003bee:	bf00      	nop
 8003bf0:	20000d08 	.word	0x20000d08
 8003bf4:	20000d0c 	.word	0x20000d0c
 8003bf8:	e000ed04 	.word	0xe000ed04

08003bfc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b085      	sub	sp, #20
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003c04:	4b0e      	ldr	r3, [pc, #56]	; (8003c40 <prvGetNextExpireTime+0x44>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d101      	bne.n	8003c12 <prvGetNextExpireTime+0x16>
 8003c0e:	2201      	movs	r2, #1
 8003c10:	e000      	b.n	8003c14 <prvGetNextExpireTime+0x18>
 8003c12:	2200      	movs	r2, #0
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d105      	bne.n	8003c2c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003c20:	4b07      	ldr	r3, [pc, #28]	; (8003c40 <prvGetNextExpireTime+0x44>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	68db      	ldr	r3, [r3, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	60fb      	str	r3, [r7, #12]
 8003c2a:	e001      	b.n	8003c30 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8003c30:	68fb      	ldr	r3, [r7, #12]
}
 8003c32:	4618      	mov	r0, r3
 8003c34:	3714      	adds	r7, #20
 8003c36:	46bd      	mov	sp, r7
 8003c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3c:	4770      	bx	lr
 8003c3e:	bf00      	nop
 8003c40:	20000d04 	.word	0x20000d04

08003c44 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b084      	sub	sp, #16
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8003c4c:	f7ff fa7e 	bl	800314c <xTaskGetTickCount>
 8003c50:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8003c52:	4b0b      	ldr	r3, [pc, #44]	; (8003c80 <prvSampleTimeNow+0x3c>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	68fa      	ldr	r2, [r7, #12]
 8003c58:	429a      	cmp	r2, r3
 8003c5a:	d205      	bcs.n	8003c68 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8003c5c:	f000 f936 	bl	8003ecc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2201      	movs	r2, #1
 8003c64:	601a      	str	r2, [r3, #0]
 8003c66:	e002      	b.n	8003c6e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8003c6e:	4a04      	ldr	r2, [pc, #16]	; (8003c80 <prvSampleTimeNow+0x3c>)
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8003c74:	68fb      	ldr	r3, [r7, #12]
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	3710      	adds	r7, #16
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}
 8003c7e:	bf00      	nop
 8003c80:	20000d14 	.word	0x20000d14

08003c84 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b086      	sub	sp, #24
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	60f8      	str	r0, [r7, #12]
 8003c8c:	60b9      	str	r1, [r7, #8]
 8003c8e:	607a      	str	r2, [r7, #4]
 8003c90:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8003c92:	2300      	movs	r3, #0
 8003c94:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	68ba      	ldr	r2, [r7, #8]
 8003c9a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	68fa      	ldr	r2, [r7, #12]
 8003ca0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8003ca2:	68ba      	ldr	r2, [r7, #8]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	429a      	cmp	r2, r3
 8003ca8:	d812      	bhi.n	8003cd0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003caa:	687a      	ldr	r2, [r7, #4]
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	1ad2      	subs	r2, r2, r3
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	699b      	ldr	r3, [r3, #24]
 8003cb4:	429a      	cmp	r2, r3
 8003cb6:	d302      	bcc.n	8003cbe <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8003cb8:	2301      	movs	r3, #1
 8003cba:	617b      	str	r3, [r7, #20]
 8003cbc:	e01b      	b.n	8003cf6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003cbe:	4b10      	ldr	r3, [pc, #64]	; (8003d00 <prvInsertTimerInActiveList+0x7c>)
 8003cc0:	681a      	ldr	r2, [r3, #0]
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	3304      	adds	r3, #4
 8003cc6:	4619      	mov	r1, r3
 8003cc8:	4610      	mov	r0, r2
 8003cca:	f7fe f930 	bl	8001f2e <vListInsert>
 8003cce:	e012      	b.n	8003cf6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003cd0:	687a      	ldr	r2, [r7, #4]
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	429a      	cmp	r2, r3
 8003cd6:	d206      	bcs.n	8003ce6 <prvInsertTimerInActiveList+0x62>
 8003cd8:	68ba      	ldr	r2, [r7, #8]
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	429a      	cmp	r2, r3
 8003cde:	d302      	bcc.n	8003ce6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	617b      	str	r3, [r7, #20]
 8003ce4:	e007      	b.n	8003cf6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003ce6:	4b07      	ldr	r3, [pc, #28]	; (8003d04 <prvInsertTimerInActiveList+0x80>)
 8003ce8:	681a      	ldr	r2, [r3, #0]
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	3304      	adds	r3, #4
 8003cee:	4619      	mov	r1, r3
 8003cf0:	4610      	mov	r0, r2
 8003cf2:	f7fe f91c 	bl	8001f2e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8003cf6:	697b      	ldr	r3, [r7, #20]
}
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	3718      	adds	r7, #24
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bd80      	pop	{r7, pc}
 8003d00:	20000d08 	.word	0x20000d08
 8003d04:	20000d04 	.word	0x20000d04

08003d08 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b08e      	sub	sp, #56	; 0x38
 8003d0c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003d0e:	e0ca      	b.n	8003ea6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	da18      	bge.n	8003d48 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8003d16:	1d3b      	adds	r3, r7, #4
 8003d18:	3304      	adds	r3, #4
 8003d1a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8003d1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d10a      	bne.n	8003d38 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8003d22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d26:	f383 8811 	msr	BASEPRI, r3
 8003d2a:	f3bf 8f6f 	isb	sy
 8003d2e:	f3bf 8f4f 	dsb	sy
 8003d32:	61fb      	str	r3, [r7, #28]
}
 8003d34:	bf00      	nop
 8003d36:	e7fe      	b.n	8003d36 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8003d38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d3e:	6850      	ldr	r0, [r2, #4]
 8003d40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d42:	6892      	ldr	r2, [r2, #8]
 8003d44:	4611      	mov	r1, r2
 8003d46:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	f2c0 80ab 	blt.w	8003ea6 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d56:	695b      	ldr	r3, [r3, #20]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d004      	beq.n	8003d66 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003d5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d5e:	3304      	adds	r3, #4
 8003d60:	4618      	mov	r0, r3
 8003d62:	f7fe f91d 	bl	8001fa0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003d66:	463b      	mov	r3, r7
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f7ff ff6b 	bl	8003c44 <prvSampleTimeNow>
 8003d6e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2b09      	cmp	r3, #9
 8003d74:	f200 8096 	bhi.w	8003ea4 <prvProcessReceivedCommands+0x19c>
 8003d78:	a201      	add	r2, pc, #4	; (adr r2, 8003d80 <prvProcessReceivedCommands+0x78>)
 8003d7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d7e:	bf00      	nop
 8003d80:	08003da9 	.word	0x08003da9
 8003d84:	08003da9 	.word	0x08003da9
 8003d88:	08003da9 	.word	0x08003da9
 8003d8c:	08003e1d 	.word	0x08003e1d
 8003d90:	08003e31 	.word	0x08003e31
 8003d94:	08003e7b 	.word	0x08003e7b
 8003d98:	08003da9 	.word	0x08003da9
 8003d9c:	08003da9 	.word	0x08003da9
 8003da0:	08003e1d 	.word	0x08003e1d
 8003da4:	08003e31 	.word	0x08003e31
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003daa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003dae:	f043 0301 	orr.w	r3, r3, #1
 8003db2:	b2da      	uxtb	r2, r3
 8003db4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003db6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003dba:	68ba      	ldr	r2, [r7, #8]
 8003dbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dbe:	699b      	ldr	r3, [r3, #24]
 8003dc0:	18d1      	adds	r1, r2, r3
 8003dc2:	68bb      	ldr	r3, [r7, #8]
 8003dc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dc6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003dc8:	f7ff ff5c 	bl	8003c84 <prvInsertTimerInActiveList>
 8003dcc:	4603      	mov	r3, r0
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d069      	beq.n	8003ea6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003dd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dd4:	6a1b      	ldr	r3, [r3, #32]
 8003dd6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003dd8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003dda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ddc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003de0:	f003 0304 	and.w	r3, r3, #4
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d05e      	beq.n	8003ea6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003de8:	68ba      	ldr	r2, [r7, #8]
 8003dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dec:	699b      	ldr	r3, [r3, #24]
 8003dee:	441a      	add	r2, r3
 8003df0:	2300      	movs	r3, #0
 8003df2:	9300      	str	r3, [sp, #0]
 8003df4:	2300      	movs	r3, #0
 8003df6:	2100      	movs	r1, #0
 8003df8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003dfa:	f7ff fe05 	bl	8003a08 <xTimerGenericCommand>
 8003dfe:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8003e00:	6a3b      	ldr	r3, [r7, #32]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d14f      	bne.n	8003ea6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8003e06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e0a:	f383 8811 	msr	BASEPRI, r3
 8003e0e:	f3bf 8f6f 	isb	sy
 8003e12:	f3bf 8f4f 	dsb	sy
 8003e16:	61bb      	str	r3, [r7, #24]
}
 8003e18:	bf00      	nop
 8003e1a:	e7fe      	b.n	8003e1a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e1e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003e22:	f023 0301 	bic.w	r3, r3, #1
 8003e26:	b2da      	uxtb	r2, r3
 8003e28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e2a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8003e2e:	e03a      	b.n	8003ea6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003e30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e32:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003e36:	f043 0301 	orr.w	r3, r3, #1
 8003e3a:	b2da      	uxtb	r2, r3
 8003e3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e3e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003e42:	68ba      	ldr	r2, [r7, #8]
 8003e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e46:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003e48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e4a:	699b      	ldr	r3, [r3, #24]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d10a      	bne.n	8003e66 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8003e50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e54:	f383 8811 	msr	BASEPRI, r3
 8003e58:	f3bf 8f6f 	isb	sy
 8003e5c:	f3bf 8f4f 	dsb	sy
 8003e60:	617b      	str	r3, [r7, #20]
}
 8003e62:	bf00      	nop
 8003e64:	e7fe      	b.n	8003e64 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003e66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e68:	699a      	ldr	r2, [r3, #24]
 8003e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e6c:	18d1      	adds	r1, r2, r3
 8003e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e72:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e74:	f7ff ff06 	bl	8003c84 <prvInsertTimerInActiveList>
					break;
 8003e78:	e015      	b.n	8003ea6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e7c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003e80:	f003 0302 	and.w	r3, r3, #2
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d103      	bne.n	8003e90 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8003e88:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e8a:	f000 fbe1 	bl	8004650 <vPortFree>
 8003e8e:	e00a      	b.n	8003ea6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003e90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e92:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003e96:	f023 0301 	bic.w	r3, r3, #1
 8003e9a:	b2da      	uxtb	r2, r3
 8003e9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e9e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8003ea2:	e000      	b.n	8003ea6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8003ea4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003ea6:	4b08      	ldr	r3, [pc, #32]	; (8003ec8 <prvProcessReceivedCommands+0x1c0>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	1d39      	adds	r1, r7, #4
 8003eac:	2200      	movs	r2, #0
 8003eae:	4618      	mov	r0, r3
 8003eb0:	f7fe fb3e 	bl	8002530 <xQueueReceive>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	f47f af2a 	bne.w	8003d10 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8003ebc:	bf00      	nop
 8003ebe:	bf00      	nop
 8003ec0:	3730      	adds	r7, #48	; 0x30
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}
 8003ec6:	bf00      	nop
 8003ec8:	20000d0c 	.word	0x20000d0c

08003ecc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b088      	sub	sp, #32
 8003ed0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003ed2:	e048      	b.n	8003f66 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003ed4:	4b2d      	ldr	r3, [pc, #180]	; (8003f8c <prvSwitchTimerLists+0xc0>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	68db      	ldr	r3, [r3, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ede:	4b2b      	ldr	r3, [pc, #172]	; (8003f8c <prvSwitchTimerLists+0xc0>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	68db      	ldr	r3, [r3, #12]
 8003ee4:	68db      	ldr	r3, [r3, #12]
 8003ee6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	3304      	adds	r3, #4
 8003eec:	4618      	mov	r0, r3
 8003eee:	f7fe f857 	bl	8001fa0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	6a1b      	ldr	r3, [r3, #32]
 8003ef6:	68f8      	ldr	r0, [r7, #12]
 8003ef8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003f00:	f003 0304 	and.w	r3, r3, #4
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d02e      	beq.n	8003f66 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	699b      	ldr	r3, [r3, #24]
 8003f0c:	693a      	ldr	r2, [r7, #16]
 8003f0e:	4413      	add	r3, r2
 8003f10:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8003f12:	68ba      	ldr	r2, [r7, #8]
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	429a      	cmp	r2, r3
 8003f18:	d90e      	bls.n	8003f38 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	68ba      	ldr	r2, [r7, #8]
 8003f1e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	68fa      	ldr	r2, [r7, #12]
 8003f24:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003f26:	4b19      	ldr	r3, [pc, #100]	; (8003f8c <prvSwitchTimerLists+0xc0>)
 8003f28:	681a      	ldr	r2, [r3, #0]
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	3304      	adds	r3, #4
 8003f2e:	4619      	mov	r1, r3
 8003f30:	4610      	mov	r0, r2
 8003f32:	f7fd fffc 	bl	8001f2e <vListInsert>
 8003f36:	e016      	b.n	8003f66 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003f38:	2300      	movs	r3, #0
 8003f3a:	9300      	str	r3, [sp, #0]
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	693a      	ldr	r2, [r7, #16]
 8003f40:	2100      	movs	r1, #0
 8003f42:	68f8      	ldr	r0, [r7, #12]
 8003f44:	f7ff fd60 	bl	8003a08 <xTimerGenericCommand>
 8003f48:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d10a      	bne.n	8003f66 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8003f50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f54:	f383 8811 	msr	BASEPRI, r3
 8003f58:	f3bf 8f6f 	isb	sy
 8003f5c:	f3bf 8f4f 	dsb	sy
 8003f60:	603b      	str	r3, [r7, #0]
}
 8003f62:	bf00      	nop
 8003f64:	e7fe      	b.n	8003f64 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003f66:	4b09      	ldr	r3, [pc, #36]	; (8003f8c <prvSwitchTimerLists+0xc0>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d1b1      	bne.n	8003ed4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8003f70:	4b06      	ldr	r3, [pc, #24]	; (8003f8c <prvSwitchTimerLists+0xc0>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8003f76:	4b06      	ldr	r3, [pc, #24]	; (8003f90 <prvSwitchTimerLists+0xc4>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4a04      	ldr	r2, [pc, #16]	; (8003f8c <prvSwitchTimerLists+0xc0>)
 8003f7c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8003f7e:	4a04      	ldr	r2, [pc, #16]	; (8003f90 <prvSwitchTimerLists+0xc4>)
 8003f80:	697b      	ldr	r3, [r7, #20]
 8003f82:	6013      	str	r3, [r2, #0]
}
 8003f84:	bf00      	nop
 8003f86:	3718      	adds	r7, #24
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	bd80      	pop	{r7, pc}
 8003f8c:	20000d04 	.word	0x20000d04
 8003f90:	20000d08 	.word	0x20000d08

08003f94 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b082      	sub	sp, #8
 8003f98:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8003f9a:	f000 f96b 	bl	8004274 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8003f9e:	4b15      	ldr	r3, [pc, #84]	; (8003ff4 <prvCheckForValidListAndQueue+0x60>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d120      	bne.n	8003fe8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8003fa6:	4814      	ldr	r0, [pc, #80]	; (8003ff8 <prvCheckForValidListAndQueue+0x64>)
 8003fa8:	f7fd ff70 	bl	8001e8c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8003fac:	4813      	ldr	r0, [pc, #76]	; (8003ffc <prvCheckForValidListAndQueue+0x68>)
 8003fae:	f7fd ff6d 	bl	8001e8c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8003fb2:	4b13      	ldr	r3, [pc, #76]	; (8004000 <prvCheckForValidListAndQueue+0x6c>)
 8003fb4:	4a10      	ldr	r2, [pc, #64]	; (8003ff8 <prvCheckForValidListAndQueue+0x64>)
 8003fb6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8003fb8:	4b12      	ldr	r3, [pc, #72]	; (8004004 <prvCheckForValidListAndQueue+0x70>)
 8003fba:	4a10      	ldr	r2, [pc, #64]	; (8003ffc <prvCheckForValidListAndQueue+0x68>)
 8003fbc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	9300      	str	r3, [sp, #0]
 8003fc2:	4b11      	ldr	r3, [pc, #68]	; (8004008 <prvCheckForValidListAndQueue+0x74>)
 8003fc4:	4a11      	ldr	r2, [pc, #68]	; (800400c <prvCheckForValidListAndQueue+0x78>)
 8003fc6:	2110      	movs	r1, #16
 8003fc8:	200a      	movs	r0, #10
 8003fca:	f7fe f87b 	bl	80020c4 <xQueueGenericCreateStatic>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	4a08      	ldr	r2, [pc, #32]	; (8003ff4 <prvCheckForValidListAndQueue+0x60>)
 8003fd2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8003fd4:	4b07      	ldr	r3, [pc, #28]	; (8003ff4 <prvCheckForValidListAndQueue+0x60>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d005      	beq.n	8003fe8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003fdc:	4b05      	ldr	r3, [pc, #20]	; (8003ff4 <prvCheckForValidListAndQueue+0x60>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	490b      	ldr	r1, [pc, #44]	; (8004010 <prvCheckForValidListAndQueue+0x7c>)
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f7fe fc94 	bl	8002910 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003fe8:	f000 f974 	bl	80042d4 <vPortExitCritical>
}
 8003fec:	bf00      	nop
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bd80      	pop	{r7, pc}
 8003ff2:	bf00      	nop
 8003ff4:	20000d0c 	.word	0x20000d0c
 8003ff8:	20000cdc 	.word	0x20000cdc
 8003ffc:	20000cf0 	.word	0x20000cf0
 8004000:	20000d04 	.word	0x20000d04
 8004004:	20000d08 	.word	0x20000d08
 8004008:	20000db8 	.word	0x20000db8
 800400c:	20000d18 	.word	0x20000d18
 8004010:	08005248 	.word	0x08005248

08004014 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004014:	b480      	push	{r7}
 8004016:	b085      	sub	sp, #20
 8004018:	af00      	add	r7, sp, #0
 800401a:	60f8      	str	r0, [r7, #12]
 800401c:	60b9      	str	r1, [r7, #8]
 800401e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	3b04      	subs	r3, #4
 8004024:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800402c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	3b04      	subs	r3, #4
 8004032:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	f023 0201 	bic.w	r2, r3, #1
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	3b04      	subs	r3, #4
 8004042:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004044:	4a0c      	ldr	r2, [pc, #48]	; (8004078 <pxPortInitialiseStack+0x64>)
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	3b14      	subs	r3, #20
 800404e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004050:	687a      	ldr	r2, [r7, #4]
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	3b04      	subs	r3, #4
 800405a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	f06f 0202 	mvn.w	r2, #2
 8004062:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	3b20      	subs	r3, #32
 8004068:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800406a:	68fb      	ldr	r3, [r7, #12]
}
 800406c:	4618      	mov	r0, r3
 800406e:	3714      	adds	r7, #20
 8004070:	46bd      	mov	sp, r7
 8004072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004076:	4770      	bx	lr
 8004078:	0800407d 	.word	0x0800407d

0800407c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800407c:	b480      	push	{r7}
 800407e:	b085      	sub	sp, #20
 8004080:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004082:	2300      	movs	r3, #0
 8004084:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004086:	4b12      	ldr	r3, [pc, #72]	; (80040d0 <prvTaskExitError+0x54>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800408e:	d00a      	beq.n	80040a6 <prvTaskExitError+0x2a>
	__asm volatile
 8004090:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004094:	f383 8811 	msr	BASEPRI, r3
 8004098:	f3bf 8f6f 	isb	sy
 800409c:	f3bf 8f4f 	dsb	sy
 80040a0:	60fb      	str	r3, [r7, #12]
}
 80040a2:	bf00      	nop
 80040a4:	e7fe      	b.n	80040a4 <prvTaskExitError+0x28>
	__asm volatile
 80040a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040aa:	f383 8811 	msr	BASEPRI, r3
 80040ae:	f3bf 8f6f 	isb	sy
 80040b2:	f3bf 8f4f 	dsb	sy
 80040b6:	60bb      	str	r3, [r7, #8]
}
 80040b8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80040ba:	bf00      	nop
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d0fc      	beq.n	80040bc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80040c2:	bf00      	nop
 80040c4:	bf00      	nop
 80040c6:	3714      	adds	r7, #20
 80040c8:	46bd      	mov	sp, r7
 80040ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ce:	4770      	bx	lr
 80040d0:	2000000c 	.word	0x2000000c
	...

080040e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80040e0:	4b07      	ldr	r3, [pc, #28]	; (8004100 <pxCurrentTCBConst2>)
 80040e2:	6819      	ldr	r1, [r3, #0]
 80040e4:	6808      	ldr	r0, [r1, #0]
 80040e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040ea:	f380 8809 	msr	PSP, r0
 80040ee:	f3bf 8f6f 	isb	sy
 80040f2:	f04f 0000 	mov.w	r0, #0
 80040f6:	f380 8811 	msr	BASEPRI, r0
 80040fa:	4770      	bx	lr
 80040fc:	f3af 8000 	nop.w

08004100 <pxCurrentTCBConst2>:
 8004100:	200007dc 	.word	0x200007dc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004104:	bf00      	nop
 8004106:	bf00      	nop

08004108 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004108:	4808      	ldr	r0, [pc, #32]	; (800412c <prvPortStartFirstTask+0x24>)
 800410a:	6800      	ldr	r0, [r0, #0]
 800410c:	6800      	ldr	r0, [r0, #0]
 800410e:	f380 8808 	msr	MSP, r0
 8004112:	f04f 0000 	mov.w	r0, #0
 8004116:	f380 8814 	msr	CONTROL, r0
 800411a:	b662      	cpsie	i
 800411c:	b661      	cpsie	f
 800411e:	f3bf 8f4f 	dsb	sy
 8004122:	f3bf 8f6f 	isb	sy
 8004126:	df00      	svc	0
 8004128:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800412a:	bf00      	nop
 800412c:	e000ed08 	.word	0xe000ed08

08004130 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b086      	sub	sp, #24
 8004134:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004136:	4b46      	ldr	r3, [pc, #280]	; (8004250 <xPortStartScheduler+0x120>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4a46      	ldr	r2, [pc, #280]	; (8004254 <xPortStartScheduler+0x124>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d10a      	bne.n	8004156 <xPortStartScheduler+0x26>
	__asm volatile
 8004140:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004144:	f383 8811 	msr	BASEPRI, r3
 8004148:	f3bf 8f6f 	isb	sy
 800414c:	f3bf 8f4f 	dsb	sy
 8004150:	613b      	str	r3, [r7, #16]
}
 8004152:	bf00      	nop
 8004154:	e7fe      	b.n	8004154 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004156:	4b3e      	ldr	r3, [pc, #248]	; (8004250 <xPortStartScheduler+0x120>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a3f      	ldr	r2, [pc, #252]	; (8004258 <xPortStartScheduler+0x128>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d10a      	bne.n	8004176 <xPortStartScheduler+0x46>
	__asm volatile
 8004160:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004164:	f383 8811 	msr	BASEPRI, r3
 8004168:	f3bf 8f6f 	isb	sy
 800416c:	f3bf 8f4f 	dsb	sy
 8004170:	60fb      	str	r3, [r7, #12]
}
 8004172:	bf00      	nop
 8004174:	e7fe      	b.n	8004174 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004176:	4b39      	ldr	r3, [pc, #228]	; (800425c <xPortStartScheduler+0x12c>)
 8004178:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800417a:	697b      	ldr	r3, [r7, #20]
 800417c:	781b      	ldrb	r3, [r3, #0]
 800417e:	b2db      	uxtb	r3, r3
 8004180:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004182:	697b      	ldr	r3, [r7, #20]
 8004184:	22ff      	movs	r2, #255	; 0xff
 8004186:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004188:	697b      	ldr	r3, [r7, #20]
 800418a:	781b      	ldrb	r3, [r3, #0]
 800418c:	b2db      	uxtb	r3, r3
 800418e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004190:	78fb      	ldrb	r3, [r7, #3]
 8004192:	b2db      	uxtb	r3, r3
 8004194:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004198:	b2da      	uxtb	r2, r3
 800419a:	4b31      	ldr	r3, [pc, #196]	; (8004260 <xPortStartScheduler+0x130>)
 800419c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800419e:	4b31      	ldr	r3, [pc, #196]	; (8004264 <xPortStartScheduler+0x134>)
 80041a0:	2207      	movs	r2, #7
 80041a2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80041a4:	e009      	b.n	80041ba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80041a6:	4b2f      	ldr	r3, [pc, #188]	; (8004264 <xPortStartScheduler+0x134>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	3b01      	subs	r3, #1
 80041ac:	4a2d      	ldr	r2, [pc, #180]	; (8004264 <xPortStartScheduler+0x134>)
 80041ae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80041b0:	78fb      	ldrb	r3, [r7, #3]
 80041b2:	b2db      	uxtb	r3, r3
 80041b4:	005b      	lsls	r3, r3, #1
 80041b6:	b2db      	uxtb	r3, r3
 80041b8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80041ba:	78fb      	ldrb	r3, [r7, #3]
 80041bc:	b2db      	uxtb	r3, r3
 80041be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041c2:	2b80      	cmp	r3, #128	; 0x80
 80041c4:	d0ef      	beq.n	80041a6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80041c6:	4b27      	ldr	r3, [pc, #156]	; (8004264 <xPortStartScheduler+0x134>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f1c3 0307 	rsb	r3, r3, #7
 80041ce:	2b04      	cmp	r3, #4
 80041d0:	d00a      	beq.n	80041e8 <xPortStartScheduler+0xb8>
	__asm volatile
 80041d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041d6:	f383 8811 	msr	BASEPRI, r3
 80041da:	f3bf 8f6f 	isb	sy
 80041de:	f3bf 8f4f 	dsb	sy
 80041e2:	60bb      	str	r3, [r7, #8]
}
 80041e4:	bf00      	nop
 80041e6:	e7fe      	b.n	80041e6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80041e8:	4b1e      	ldr	r3, [pc, #120]	; (8004264 <xPortStartScheduler+0x134>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	021b      	lsls	r3, r3, #8
 80041ee:	4a1d      	ldr	r2, [pc, #116]	; (8004264 <xPortStartScheduler+0x134>)
 80041f0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80041f2:	4b1c      	ldr	r3, [pc, #112]	; (8004264 <xPortStartScheduler+0x134>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80041fa:	4a1a      	ldr	r2, [pc, #104]	; (8004264 <xPortStartScheduler+0x134>)
 80041fc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	b2da      	uxtb	r2, r3
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004206:	4b18      	ldr	r3, [pc, #96]	; (8004268 <xPortStartScheduler+0x138>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a17      	ldr	r2, [pc, #92]	; (8004268 <xPortStartScheduler+0x138>)
 800420c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004210:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004212:	4b15      	ldr	r3, [pc, #84]	; (8004268 <xPortStartScheduler+0x138>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a14      	ldr	r2, [pc, #80]	; (8004268 <xPortStartScheduler+0x138>)
 8004218:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800421c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800421e:	f000 f8dd 	bl	80043dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004222:	4b12      	ldr	r3, [pc, #72]	; (800426c <xPortStartScheduler+0x13c>)
 8004224:	2200      	movs	r2, #0
 8004226:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004228:	f000 f8fc 	bl	8004424 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800422c:	4b10      	ldr	r3, [pc, #64]	; (8004270 <xPortStartScheduler+0x140>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a0f      	ldr	r2, [pc, #60]	; (8004270 <xPortStartScheduler+0x140>)
 8004232:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004236:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004238:	f7ff ff66 	bl	8004108 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800423c:	f7ff f850 	bl	80032e0 <vTaskSwitchContext>
	prvTaskExitError();
 8004240:	f7ff ff1c 	bl	800407c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004244:	2300      	movs	r3, #0
}
 8004246:	4618      	mov	r0, r3
 8004248:	3718      	adds	r7, #24
 800424a:	46bd      	mov	sp, r7
 800424c:	bd80      	pop	{r7, pc}
 800424e:	bf00      	nop
 8004250:	e000ed00 	.word	0xe000ed00
 8004254:	410fc271 	.word	0x410fc271
 8004258:	410fc270 	.word	0x410fc270
 800425c:	e000e400 	.word	0xe000e400
 8004260:	20000e08 	.word	0x20000e08
 8004264:	20000e0c 	.word	0x20000e0c
 8004268:	e000ed20 	.word	0xe000ed20
 800426c:	2000000c 	.word	0x2000000c
 8004270:	e000ef34 	.word	0xe000ef34

08004274 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004274:	b480      	push	{r7}
 8004276:	b083      	sub	sp, #12
 8004278:	af00      	add	r7, sp, #0
	__asm volatile
 800427a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800427e:	f383 8811 	msr	BASEPRI, r3
 8004282:	f3bf 8f6f 	isb	sy
 8004286:	f3bf 8f4f 	dsb	sy
 800428a:	607b      	str	r3, [r7, #4]
}
 800428c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800428e:	4b0f      	ldr	r3, [pc, #60]	; (80042cc <vPortEnterCritical+0x58>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	3301      	adds	r3, #1
 8004294:	4a0d      	ldr	r2, [pc, #52]	; (80042cc <vPortEnterCritical+0x58>)
 8004296:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004298:	4b0c      	ldr	r3, [pc, #48]	; (80042cc <vPortEnterCritical+0x58>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	2b01      	cmp	r3, #1
 800429e:	d10f      	bne.n	80042c0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80042a0:	4b0b      	ldr	r3, [pc, #44]	; (80042d0 <vPortEnterCritical+0x5c>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	b2db      	uxtb	r3, r3
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d00a      	beq.n	80042c0 <vPortEnterCritical+0x4c>
	__asm volatile
 80042aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042ae:	f383 8811 	msr	BASEPRI, r3
 80042b2:	f3bf 8f6f 	isb	sy
 80042b6:	f3bf 8f4f 	dsb	sy
 80042ba:	603b      	str	r3, [r7, #0]
}
 80042bc:	bf00      	nop
 80042be:	e7fe      	b.n	80042be <vPortEnterCritical+0x4a>
	}
}
 80042c0:	bf00      	nop
 80042c2:	370c      	adds	r7, #12
 80042c4:	46bd      	mov	sp, r7
 80042c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ca:	4770      	bx	lr
 80042cc:	2000000c 	.word	0x2000000c
 80042d0:	e000ed04 	.word	0xe000ed04

080042d4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80042d4:	b480      	push	{r7}
 80042d6:	b083      	sub	sp, #12
 80042d8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80042da:	4b12      	ldr	r3, [pc, #72]	; (8004324 <vPortExitCritical+0x50>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d10a      	bne.n	80042f8 <vPortExitCritical+0x24>
	__asm volatile
 80042e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042e6:	f383 8811 	msr	BASEPRI, r3
 80042ea:	f3bf 8f6f 	isb	sy
 80042ee:	f3bf 8f4f 	dsb	sy
 80042f2:	607b      	str	r3, [r7, #4]
}
 80042f4:	bf00      	nop
 80042f6:	e7fe      	b.n	80042f6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80042f8:	4b0a      	ldr	r3, [pc, #40]	; (8004324 <vPortExitCritical+0x50>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	3b01      	subs	r3, #1
 80042fe:	4a09      	ldr	r2, [pc, #36]	; (8004324 <vPortExitCritical+0x50>)
 8004300:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004302:	4b08      	ldr	r3, [pc, #32]	; (8004324 <vPortExitCritical+0x50>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d105      	bne.n	8004316 <vPortExitCritical+0x42>
 800430a:	2300      	movs	r3, #0
 800430c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	f383 8811 	msr	BASEPRI, r3
}
 8004314:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004316:	bf00      	nop
 8004318:	370c      	adds	r7, #12
 800431a:	46bd      	mov	sp, r7
 800431c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004320:	4770      	bx	lr
 8004322:	bf00      	nop
 8004324:	2000000c 	.word	0x2000000c
	...

08004330 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004330:	f3ef 8009 	mrs	r0, PSP
 8004334:	f3bf 8f6f 	isb	sy
 8004338:	4b15      	ldr	r3, [pc, #84]	; (8004390 <pxCurrentTCBConst>)
 800433a:	681a      	ldr	r2, [r3, #0]
 800433c:	f01e 0f10 	tst.w	lr, #16
 8004340:	bf08      	it	eq
 8004342:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004346:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800434a:	6010      	str	r0, [r2, #0]
 800434c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004350:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004354:	f380 8811 	msr	BASEPRI, r0
 8004358:	f3bf 8f4f 	dsb	sy
 800435c:	f3bf 8f6f 	isb	sy
 8004360:	f7fe ffbe 	bl	80032e0 <vTaskSwitchContext>
 8004364:	f04f 0000 	mov.w	r0, #0
 8004368:	f380 8811 	msr	BASEPRI, r0
 800436c:	bc09      	pop	{r0, r3}
 800436e:	6819      	ldr	r1, [r3, #0]
 8004370:	6808      	ldr	r0, [r1, #0]
 8004372:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004376:	f01e 0f10 	tst.w	lr, #16
 800437a:	bf08      	it	eq
 800437c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004380:	f380 8809 	msr	PSP, r0
 8004384:	f3bf 8f6f 	isb	sy
 8004388:	4770      	bx	lr
 800438a:	bf00      	nop
 800438c:	f3af 8000 	nop.w

08004390 <pxCurrentTCBConst>:
 8004390:	200007dc 	.word	0x200007dc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004394:	bf00      	nop
 8004396:	bf00      	nop

08004398 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b082      	sub	sp, #8
 800439c:	af00      	add	r7, sp, #0
	__asm volatile
 800439e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043a2:	f383 8811 	msr	BASEPRI, r3
 80043a6:	f3bf 8f6f 	isb	sy
 80043aa:	f3bf 8f4f 	dsb	sy
 80043ae:	607b      	str	r3, [r7, #4]
}
 80043b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80043b2:	f7fe fedb 	bl	800316c <xTaskIncrementTick>
 80043b6:	4603      	mov	r3, r0
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d003      	beq.n	80043c4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80043bc:	4b06      	ldr	r3, [pc, #24]	; (80043d8 <xPortSysTickHandler+0x40>)
 80043be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043c2:	601a      	str	r2, [r3, #0]
 80043c4:	2300      	movs	r3, #0
 80043c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	f383 8811 	msr	BASEPRI, r3
}
 80043ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80043d0:	bf00      	nop
 80043d2:	3708      	adds	r7, #8
 80043d4:	46bd      	mov	sp, r7
 80043d6:	bd80      	pop	{r7, pc}
 80043d8:	e000ed04 	.word	0xe000ed04

080043dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80043dc:	b480      	push	{r7}
 80043de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80043e0:	4b0b      	ldr	r3, [pc, #44]	; (8004410 <vPortSetupTimerInterrupt+0x34>)
 80043e2:	2200      	movs	r2, #0
 80043e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80043e6:	4b0b      	ldr	r3, [pc, #44]	; (8004414 <vPortSetupTimerInterrupt+0x38>)
 80043e8:	2200      	movs	r2, #0
 80043ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80043ec:	4b0a      	ldr	r3, [pc, #40]	; (8004418 <vPortSetupTimerInterrupt+0x3c>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a0a      	ldr	r2, [pc, #40]	; (800441c <vPortSetupTimerInterrupt+0x40>)
 80043f2:	fba2 2303 	umull	r2, r3, r2, r3
 80043f6:	099b      	lsrs	r3, r3, #6
 80043f8:	4a09      	ldr	r2, [pc, #36]	; (8004420 <vPortSetupTimerInterrupt+0x44>)
 80043fa:	3b01      	subs	r3, #1
 80043fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80043fe:	4b04      	ldr	r3, [pc, #16]	; (8004410 <vPortSetupTimerInterrupt+0x34>)
 8004400:	2207      	movs	r2, #7
 8004402:	601a      	str	r2, [r3, #0]
}
 8004404:	bf00      	nop
 8004406:	46bd      	mov	sp, r7
 8004408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440c:	4770      	bx	lr
 800440e:	bf00      	nop
 8004410:	e000e010 	.word	0xe000e010
 8004414:	e000e018 	.word	0xe000e018
 8004418:	20000000 	.word	0x20000000
 800441c:	10624dd3 	.word	0x10624dd3
 8004420:	e000e014 	.word	0xe000e014

08004424 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004424:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004434 <vPortEnableVFP+0x10>
 8004428:	6801      	ldr	r1, [r0, #0]
 800442a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800442e:	6001      	str	r1, [r0, #0]
 8004430:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004432:	bf00      	nop
 8004434:	e000ed88 	.word	0xe000ed88

08004438 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004438:	b480      	push	{r7}
 800443a:	b085      	sub	sp, #20
 800443c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800443e:	f3ef 8305 	mrs	r3, IPSR
 8004442:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	2b0f      	cmp	r3, #15
 8004448:	d914      	bls.n	8004474 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800444a:	4a17      	ldr	r2, [pc, #92]	; (80044a8 <vPortValidateInterruptPriority+0x70>)
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	4413      	add	r3, r2
 8004450:	781b      	ldrb	r3, [r3, #0]
 8004452:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004454:	4b15      	ldr	r3, [pc, #84]	; (80044ac <vPortValidateInterruptPriority+0x74>)
 8004456:	781b      	ldrb	r3, [r3, #0]
 8004458:	7afa      	ldrb	r2, [r7, #11]
 800445a:	429a      	cmp	r2, r3
 800445c:	d20a      	bcs.n	8004474 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800445e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004462:	f383 8811 	msr	BASEPRI, r3
 8004466:	f3bf 8f6f 	isb	sy
 800446a:	f3bf 8f4f 	dsb	sy
 800446e:	607b      	str	r3, [r7, #4]
}
 8004470:	bf00      	nop
 8004472:	e7fe      	b.n	8004472 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004474:	4b0e      	ldr	r3, [pc, #56]	; (80044b0 <vPortValidateInterruptPriority+0x78>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800447c:	4b0d      	ldr	r3, [pc, #52]	; (80044b4 <vPortValidateInterruptPriority+0x7c>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	429a      	cmp	r2, r3
 8004482:	d90a      	bls.n	800449a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8004484:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004488:	f383 8811 	msr	BASEPRI, r3
 800448c:	f3bf 8f6f 	isb	sy
 8004490:	f3bf 8f4f 	dsb	sy
 8004494:	603b      	str	r3, [r7, #0]
}
 8004496:	bf00      	nop
 8004498:	e7fe      	b.n	8004498 <vPortValidateInterruptPriority+0x60>
	}
 800449a:	bf00      	nop
 800449c:	3714      	adds	r7, #20
 800449e:	46bd      	mov	sp, r7
 80044a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a4:	4770      	bx	lr
 80044a6:	bf00      	nop
 80044a8:	e000e3f0 	.word	0xe000e3f0
 80044ac:	20000e08 	.word	0x20000e08
 80044b0:	e000ed0c 	.word	0xe000ed0c
 80044b4:	20000e0c 	.word	0x20000e0c

080044b8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b08a      	sub	sp, #40	; 0x28
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80044c0:	2300      	movs	r3, #0
 80044c2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80044c4:	f7fe fd96 	bl	8002ff4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80044c8:	4b5b      	ldr	r3, [pc, #364]	; (8004638 <pvPortMalloc+0x180>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d101      	bne.n	80044d4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80044d0:	f000 f920 	bl	8004714 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80044d4:	4b59      	ldr	r3, [pc, #356]	; (800463c <pvPortMalloc+0x184>)
 80044d6:	681a      	ldr	r2, [r3, #0]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	4013      	ands	r3, r2
 80044dc:	2b00      	cmp	r3, #0
 80044de:	f040 8093 	bne.w	8004608 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d01d      	beq.n	8004524 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80044e8:	2208      	movs	r2, #8
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	4413      	add	r3, r2
 80044ee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	f003 0307 	and.w	r3, r3, #7
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d014      	beq.n	8004524 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	f023 0307 	bic.w	r3, r3, #7
 8004500:	3308      	adds	r3, #8
 8004502:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	f003 0307 	and.w	r3, r3, #7
 800450a:	2b00      	cmp	r3, #0
 800450c:	d00a      	beq.n	8004524 <pvPortMalloc+0x6c>
	__asm volatile
 800450e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004512:	f383 8811 	msr	BASEPRI, r3
 8004516:	f3bf 8f6f 	isb	sy
 800451a:	f3bf 8f4f 	dsb	sy
 800451e:	617b      	str	r3, [r7, #20]
}
 8004520:	bf00      	nop
 8004522:	e7fe      	b.n	8004522 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d06e      	beq.n	8004608 <pvPortMalloc+0x150>
 800452a:	4b45      	ldr	r3, [pc, #276]	; (8004640 <pvPortMalloc+0x188>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	687a      	ldr	r2, [r7, #4]
 8004530:	429a      	cmp	r2, r3
 8004532:	d869      	bhi.n	8004608 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004534:	4b43      	ldr	r3, [pc, #268]	; (8004644 <pvPortMalloc+0x18c>)
 8004536:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004538:	4b42      	ldr	r3, [pc, #264]	; (8004644 <pvPortMalloc+0x18c>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800453e:	e004      	b.n	800454a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004542:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800454a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	687a      	ldr	r2, [r7, #4]
 8004550:	429a      	cmp	r2, r3
 8004552:	d903      	bls.n	800455c <pvPortMalloc+0xa4>
 8004554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d1f1      	bne.n	8004540 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800455c:	4b36      	ldr	r3, [pc, #216]	; (8004638 <pvPortMalloc+0x180>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004562:	429a      	cmp	r2, r3
 8004564:	d050      	beq.n	8004608 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004566:	6a3b      	ldr	r3, [r7, #32]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	2208      	movs	r2, #8
 800456c:	4413      	add	r3, r2
 800456e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004572:	681a      	ldr	r2, [r3, #0]
 8004574:	6a3b      	ldr	r3, [r7, #32]
 8004576:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800457a:	685a      	ldr	r2, [r3, #4]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	1ad2      	subs	r2, r2, r3
 8004580:	2308      	movs	r3, #8
 8004582:	005b      	lsls	r3, r3, #1
 8004584:	429a      	cmp	r2, r3
 8004586:	d91f      	bls.n	80045c8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004588:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	4413      	add	r3, r2
 800458e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004590:	69bb      	ldr	r3, [r7, #24]
 8004592:	f003 0307 	and.w	r3, r3, #7
 8004596:	2b00      	cmp	r3, #0
 8004598:	d00a      	beq.n	80045b0 <pvPortMalloc+0xf8>
	__asm volatile
 800459a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800459e:	f383 8811 	msr	BASEPRI, r3
 80045a2:	f3bf 8f6f 	isb	sy
 80045a6:	f3bf 8f4f 	dsb	sy
 80045aa:	613b      	str	r3, [r7, #16]
}
 80045ac:	bf00      	nop
 80045ae:	e7fe      	b.n	80045ae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80045b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b2:	685a      	ldr	r2, [r3, #4]
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	1ad2      	subs	r2, r2, r3
 80045b8:	69bb      	ldr	r3, [r7, #24]
 80045ba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80045bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045be:	687a      	ldr	r2, [r7, #4]
 80045c0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80045c2:	69b8      	ldr	r0, [r7, #24]
 80045c4:	f000 f908 	bl	80047d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80045c8:	4b1d      	ldr	r3, [pc, #116]	; (8004640 <pvPortMalloc+0x188>)
 80045ca:	681a      	ldr	r2, [r3, #0]
 80045cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	1ad3      	subs	r3, r2, r3
 80045d2:	4a1b      	ldr	r2, [pc, #108]	; (8004640 <pvPortMalloc+0x188>)
 80045d4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80045d6:	4b1a      	ldr	r3, [pc, #104]	; (8004640 <pvPortMalloc+0x188>)
 80045d8:	681a      	ldr	r2, [r3, #0]
 80045da:	4b1b      	ldr	r3, [pc, #108]	; (8004648 <pvPortMalloc+0x190>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	429a      	cmp	r2, r3
 80045e0:	d203      	bcs.n	80045ea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80045e2:	4b17      	ldr	r3, [pc, #92]	; (8004640 <pvPortMalloc+0x188>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4a18      	ldr	r2, [pc, #96]	; (8004648 <pvPortMalloc+0x190>)
 80045e8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80045ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ec:	685a      	ldr	r2, [r3, #4]
 80045ee:	4b13      	ldr	r3, [pc, #76]	; (800463c <pvPortMalloc+0x184>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	431a      	orrs	r2, r3
 80045f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80045f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045fa:	2200      	movs	r2, #0
 80045fc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80045fe:	4b13      	ldr	r3, [pc, #76]	; (800464c <pvPortMalloc+0x194>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	3301      	adds	r3, #1
 8004604:	4a11      	ldr	r2, [pc, #68]	; (800464c <pvPortMalloc+0x194>)
 8004606:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004608:	f7fe fd02 	bl	8003010 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800460c:	69fb      	ldr	r3, [r7, #28]
 800460e:	f003 0307 	and.w	r3, r3, #7
 8004612:	2b00      	cmp	r3, #0
 8004614:	d00a      	beq.n	800462c <pvPortMalloc+0x174>
	__asm volatile
 8004616:	f04f 0350 	mov.w	r3, #80	; 0x50
 800461a:	f383 8811 	msr	BASEPRI, r3
 800461e:	f3bf 8f6f 	isb	sy
 8004622:	f3bf 8f4f 	dsb	sy
 8004626:	60fb      	str	r3, [r7, #12]
}
 8004628:	bf00      	nop
 800462a:	e7fe      	b.n	800462a <pvPortMalloc+0x172>
	return pvReturn;
 800462c:	69fb      	ldr	r3, [r7, #28]
}
 800462e:	4618      	mov	r0, r3
 8004630:	3728      	adds	r7, #40	; 0x28
 8004632:	46bd      	mov	sp, r7
 8004634:	bd80      	pop	{r7, pc}
 8004636:	bf00      	nop
 8004638:	20004a18 	.word	0x20004a18
 800463c:	20004a2c 	.word	0x20004a2c
 8004640:	20004a1c 	.word	0x20004a1c
 8004644:	20004a10 	.word	0x20004a10
 8004648:	20004a20 	.word	0x20004a20
 800464c:	20004a24 	.word	0x20004a24

08004650 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b086      	sub	sp, #24
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d04d      	beq.n	80046fe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004662:	2308      	movs	r3, #8
 8004664:	425b      	negs	r3, r3
 8004666:	697a      	ldr	r2, [r7, #20]
 8004668:	4413      	add	r3, r2
 800466a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800466c:	697b      	ldr	r3, [r7, #20]
 800466e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004670:	693b      	ldr	r3, [r7, #16]
 8004672:	685a      	ldr	r2, [r3, #4]
 8004674:	4b24      	ldr	r3, [pc, #144]	; (8004708 <vPortFree+0xb8>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4013      	ands	r3, r2
 800467a:	2b00      	cmp	r3, #0
 800467c:	d10a      	bne.n	8004694 <vPortFree+0x44>
	__asm volatile
 800467e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004682:	f383 8811 	msr	BASEPRI, r3
 8004686:	f3bf 8f6f 	isb	sy
 800468a:	f3bf 8f4f 	dsb	sy
 800468e:	60fb      	str	r3, [r7, #12]
}
 8004690:	bf00      	nop
 8004692:	e7fe      	b.n	8004692 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004694:	693b      	ldr	r3, [r7, #16]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d00a      	beq.n	80046b2 <vPortFree+0x62>
	__asm volatile
 800469c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046a0:	f383 8811 	msr	BASEPRI, r3
 80046a4:	f3bf 8f6f 	isb	sy
 80046a8:	f3bf 8f4f 	dsb	sy
 80046ac:	60bb      	str	r3, [r7, #8]
}
 80046ae:	bf00      	nop
 80046b0:	e7fe      	b.n	80046b0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80046b2:	693b      	ldr	r3, [r7, #16]
 80046b4:	685a      	ldr	r2, [r3, #4]
 80046b6:	4b14      	ldr	r3, [pc, #80]	; (8004708 <vPortFree+0xb8>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4013      	ands	r3, r2
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d01e      	beq.n	80046fe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80046c0:	693b      	ldr	r3, [r7, #16]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d11a      	bne.n	80046fe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80046c8:	693b      	ldr	r3, [r7, #16]
 80046ca:	685a      	ldr	r2, [r3, #4]
 80046cc:	4b0e      	ldr	r3, [pc, #56]	; (8004708 <vPortFree+0xb8>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	43db      	mvns	r3, r3
 80046d2:	401a      	ands	r2, r3
 80046d4:	693b      	ldr	r3, [r7, #16]
 80046d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80046d8:	f7fe fc8c 	bl	8002ff4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80046dc:	693b      	ldr	r3, [r7, #16]
 80046de:	685a      	ldr	r2, [r3, #4]
 80046e0:	4b0a      	ldr	r3, [pc, #40]	; (800470c <vPortFree+0xbc>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4413      	add	r3, r2
 80046e6:	4a09      	ldr	r2, [pc, #36]	; (800470c <vPortFree+0xbc>)
 80046e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80046ea:	6938      	ldr	r0, [r7, #16]
 80046ec:	f000 f874 	bl	80047d8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80046f0:	4b07      	ldr	r3, [pc, #28]	; (8004710 <vPortFree+0xc0>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	3301      	adds	r3, #1
 80046f6:	4a06      	ldr	r2, [pc, #24]	; (8004710 <vPortFree+0xc0>)
 80046f8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80046fa:	f7fe fc89 	bl	8003010 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80046fe:	bf00      	nop
 8004700:	3718      	adds	r7, #24
 8004702:	46bd      	mov	sp, r7
 8004704:	bd80      	pop	{r7, pc}
 8004706:	bf00      	nop
 8004708:	20004a2c 	.word	0x20004a2c
 800470c:	20004a1c 	.word	0x20004a1c
 8004710:	20004a28 	.word	0x20004a28

08004714 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004714:	b480      	push	{r7}
 8004716:	b085      	sub	sp, #20
 8004718:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800471a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800471e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004720:	4b27      	ldr	r3, [pc, #156]	; (80047c0 <prvHeapInit+0xac>)
 8004722:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	f003 0307 	and.w	r3, r3, #7
 800472a:	2b00      	cmp	r3, #0
 800472c:	d00c      	beq.n	8004748 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	3307      	adds	r3, #7
 8004732:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	f023 0307 	bic.w	r3, r3, #7
 800473a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800473c:	68ba      	ldr	r2, [r7, #8]
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	1ad3      	subs	r3, r2, r3
 8004742:	4a1f      	ldr	r2, [pc, #124]	; (80047c0 <prvHeapInit+0xac>)
 8004744:	4413      	add	r3, r2
 8004746:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800474c:	4a1d      	ldr	r2, [pc, #116]	; (80047c4 <prvHeapInit+0xb0>)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004752:	4b1c      	ldr	r3, [pc, #112]	; (80047c4 <prvHeapInit+0xb0>)
 8004754:	2200      	movs	r2, #0
 8004756:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	68ba      	ldr	r2, [r7, #8]
 800475c:	4413      	add	r3, r2
 800475e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004760:	2208      	movs	r2, #8
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	1a9b      	subs	r3, r3, r2
 8004766:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	f023 0307 	bic.w	r3, r3, #7
 800476e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	4a15      	ldr	r2, [pc, #84]	; (80047c8 <prvHeapInit+0xb4>)
 8004774:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004776:	4b14      	ldr	r3, [pc, #80]	; (80047c8 <prvHeapInit+0xb4>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	2200      	movs	r2, #0
 800477c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800477e:	4b12      	ldr	r3, [pc, #72]	; (80047c8 <prvHeapInit+0xb4>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	2200      	movs	r2, #0
 8004784:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	68fa      	ldr	r2, [r7, #12]
 800478e:	1ad2      	subs	r2, r2, r3
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004794:	4b0c      	ldr	r3, [pc, #48]	; (80047c8 <prvHeapInit+0xb4>)
 8004796:	681a      	ldr	r2, [r3, #0]
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	4a0a      	ldr	r2, [pc, #40]	; (80047cc <prvHeapInit+0xb8>)
 80047a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	4a09      	ldr	r2, [pc, #36]	; (80047d0 <prvHeapInit+0xbc>)
 80047aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80047ac:	4b09      	ldr	r3, [pc, #36]	; (80047d4 <prvHeapInit+0xc0>)
 80047ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80047b2:	601a      	str	r2, [r3, #0]
}
 80047b4:	bf00      	nop
 80047b6:	3714      	adds	r7, #20
 80047b8:	46bd      	mov	sp, r7
 80047ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047be:	4770      	bx	lr
 80047c0:	20000e10 	.word	0x20000e10
 80047c4:	20004a10 	.word	0x20004a10
 80047c8:	20004a18 	.word	0x20004a18
 80047cc:	20004a20 	.word	0x20004a20
 80047d0:	20004a1c 	.word	0x20004a1c
 80047d4:	20004a2c 	.word	0x20004a2c

080047d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80047d8:	b480      	push	{r7}
 80047da:	b085      	sub	sp, #20
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80047e0:	4b28      	ldr	r3, [pc, #160]	; (8004884 <prvInsertBlockIntoFreeList+0xac>)
 80047e2:	60fb      	str	r3, [r7, #12]
 80047e4:	e002      	b.n	80047ec <prvInsertBlockIntoFreeList+0x14>
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	60fb      	str	r3, [r7, #12]
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	687a      	ldr	r2, [r7, #4]
 80047f2:	429a      	cmp	r2, r3
 80047f4:	d8f7      	bhi.n	80047e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	68ba      	ldr	r2, [r7, #8]
 8004800:	4413      	add	r3, r2
 8004802:	687a      	ldr	r2, [r7, #4]
 8004804:	429a      	cmp	r2, r3
 8004806:	d108      	bne.n	800481a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	685a      	ldr	r2, [r3, #4]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	441a      	add	r2, r3
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	68ba      	ldr	r2, [r7, #8]
 8004824:	441a      	add	r2, r3
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	429a      	cmp	r2, r3
 800482c:	d118      	bne.n	8004860 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681a      	ldr	r2, [r3, #0]
 8004832:	4b15      	ldr	r3, [pc, #84]	; (8004888 <prvInsertBlockIntoFreeList+0xb0>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	429a      	cmp	r2, r3
 8004838:	d00d      	beq.n	8004856 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	685a      	ldr	r2, [r3, #4]
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	441a      	add	r2, r3
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	681a      	ldr	r2, [r3, #0]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	601a      	str	r2, [r3, #0]
 8004854:	e008      	b.n	8004868 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004856:	4b0c      	ldr	r3, [pc, #48]	; (8004888 <prvInsertBlockIntoFreeList+0xb0>)
 8004858:	681a      	ldr	r2, [r3, #0]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	601a      	str	r2, [r3, #0]
 800485e:	e003      	b.n	8004868 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681a      	ldr	r2, [r3, #0]
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004868:	68fa      	ldr	r2, [r7, #12]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	429a      	cmp	r2, r3
 800486e:	d002      	beq.n	8004876 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	687a      	ldr	r2, [r7, #4]
 8004874:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004876:	bf00      	nop
 8004878:	3714      	adds	r7, #20
 800487a:	46bd      	mov	sp, r7
 800487c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004880:	4770      	bx	lr
 8004882:	bf00      	nop
 8004884:	20004a10 	.word	0x20004a10
 8004888:	20004a18 	.word	0x20004a18

0800488c <std>:
 800488c:	2300      	movs	r3, #0
 800488e:	b510      	push	{r4, lr}
 8004890:	4604      	mov	r4, r0
 8004892:	e9c0 3300 	strd	r3, r3, [r0]
 8004896:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800489a:	6083      	str	r3, [r0, #8]
 800489c:	8181      	strh	r1, [r0, #12]
 800489e:	6643      	str	r3, [r0, #100]	; 0x64
 80048a0:	81c2      	strh	r2, [r0, #14]
 80048a2:	6183      	str	r3, [r0, #24]
 80048a4:	4619      	mov	r1, r3
 80048a6:	2208      	movs	r2, #8
 80048a8:	305c      	adds	r0, #92	; 0x5c
 80048aa:	f000 f9e5 	bl	8004c78 <memset>
 80048ae:	4b0d      	ldr	r3, [pc, #52]	; (80048e4 <std+0x58>)
 80048b0:	6263      	str	r3, [r4, #36]	; 0x24
 80048b2:	4b0d      	ldr	r3, [pc, #52]	; (80048e8 <std+0x5c>)
 80048b4:	62a3      	str	r3, [r4, #40]	; 0x28
 80048b6:	4b0d      	ldr	r3, [pc, #52]	; (80048ec <std+0x60>)
 80048b8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80048ba:	4b0d      	ldr	r3, [pc, #52]	; (80048f0 <std+0x64>)
 80048bc:	6323      	str	r3, [r4, #48]	; 0x30
 80048be:	4b0d      	ldr	r3, [pc, #52]	; (80048f4 <std+0x68>)
 80048c0:	6224      	str	r4, [r4, #32]
 80048c2:	429c      	cmp	r4, r3
 80048c4:	d006      	beq.n	80048d4 <std+0x48>
 80048c6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80048ca:	4294      	cmp	r4, r2
 80048cc:	d002      	beq.n	80048d4 <std+0x48>
 80048ce:	33d0      	adds	r3, #208	; 0xd0
 80048d0:	429c      	cmp	r4, r3
 80048d2:	d105      	bne.n	80048e0 <std+0x54>
 80048d4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80048d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80048dc:	f000 ba44 	b.w	8004d68 <__retarget_lock_init_recursive>
 80048e0:	bd10      	pop	{r4, pc}
 80048e2:	bf00      	nop
 80048e4:	08004ac9 	.word	0x08004ac9
 80048e8:	08004aeb 	.word	0x08004aeb
 80048ec:	08004b23 	.word	0x08004b23
 80048f0:	08004b47 	.word	0x08004b47
 80048f4:	20004a30 	.word	0x20004a30

080048f8 <stdio_exit_handler>:
 80048f8:	4a02      	ldr	r2, [pc, #8]	; (8004904 <stdio_exit_handler+0xc>)
 80048fa:	4903      	ldr	r1, [pc, #12]	; (8004908 <stdio_exit_handler+0x10>)
 80048fc:	4803      	ldr	r0, [pc, #12]	; (800490c <stdio_exit_handler+0x14>)
 80048fe:	f000 b869 	b.w	80049d4 <_fwalk_sglue>
 8004902:	bf00      	nop
 8004904:	20000010 	.word	0x20000010
 8004908:	08005089 	.word	0x08005089
 800490c:	2000001c 	.word	0x2000001c

08004910 <cleanup_stdio>:
 8004910:	6841      	ldr	r1, [r0, #4]
 8004912:	4b0c      	ldr	r3, [pc, #48]	; (8004944 <cleanup_stdio+0x34>)
 8004914:	4299      	cmp	r1, r3
 8004916:	b510      	push	{r4, lr}
 8004918:	4604      	mov	r4, r0
 800491a:	d001      	beq.n	8004920 <cleanup_stdio+0x10>
 800491c:	f000 fbb4 	bl	8005088 <_fflush_r>
 8004920:	68a1      	ldr	r1, [r4, #8]
 8004922:	4b09      	ldr	r3, [pc, #36]	; (8004948 <cleanup_stdio+0x38>)
 8004924:	4299      	cmp	r1, r3
 8004926:	d002      	beq.n	800492e <cleanup_stdio+0x1e>
 8004928:	4620      	mov	r0, r4
 800492a:	f000 fbad 	bl	8005088 <_fflush_r>
 800492e:	68e1      	ldr	r1, [r4, #12]
 8004930:	4b06      	ldr	r3, [pc, #24]	; (800494c <cleanup_stdio+0x3c>)
 8004932:	4299      	cmp	r1, r3
 8004934:	d004      	beq.n	8004940 <cleanup_stdio+0x30>
 8004936:	4620      	mov	r0, r4
 8004938:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800493c:	f000 bba4 	b.w	8005088 <_fflush_r>
 8004940:	bd10      	pop	{r4, pc}
 8004942:	bf00      	nop
 8004944:	20004a30 	.word	0x20004a30
 8004948:	20004a98 	.word	0x20004a98
 800494c:	20004b00 	.word	0x20004b00

08004950 <global_stdio_init.part.0>:
 8004950:	b510      	push	{r4, lr}
 8004952:	4b0b      	ldr	r3, [pc, #44]	; (8004980 <global_stdio_init.part.0+0x30>)
 8004954:	4c0b      	ldr	r4, [pc, #44]	; (8004984 <global_stdio_init.part.0+0x34>)
 8004956:	4a0c      	ldr	r2, [pc, #48]	; (8004988 <global_stdio_init.part.0+0x38>)
 8004958:	601a      	str	r2, [r3, #0]
 800495a:	4620      	mov	r0, r4
 800495c:	2200      	movs	r2, #0
 800495e:	2104      	movs	r1, #4
 8004960:	f7ff ff94 	bl	800488c <std>
 8004964:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004968:	2201      	movs	r2, #1
 800496a:	2109      	movs	r1, #9
 800496c:	f7ff ff8e 	bl	800488c <std>
 8004970:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004974:	2202      	movs	r2, #2
 8004976:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800497a:	2112      	movs	r1, #18
 800497c:	f7ff bf86 	b.w	800488c <std>
 8004980:	20004b68 	.word	0x20004b68
 8004984:	20004a30 	.word	0x20004a30
 8004988:	080048f9 	.word	0x080048f9

0800498c <__sfp_lock_acquire>:
 800498c:	4801      	ldr	r0, [pc, #4]	; (8004994 <__sfp_lock_acquire+0x8>)
 800498e:	f000 b9ec 	b.w	8004d6a <__retarget_lock_acquire_recursive>
 8004992:	bf00      	nop
 8004994:	20004b71 	.word	0x20004b71

08004998 <__sfp_lock_release>:
 8004998:	4801      	ldr	r0, [pc, #4]	; (80049a0 <__sfp_lock_release+0x8>)
 800499a:	f000 b9e7 	b.w	8004d6c <__retarget_lock_release_recursive>
 800499e:	bf00      	nop
 80049a0:	20004b71 	.word	0x20004b71

080049a4 <__sinit>:
 80049a4:	b510      	push	{r4, lr}
 80049a6:	4604      	mov	r4, r0
 80049a8:	f7ff fff0 	bl	800498c <__sfp_lock_acquire>
 80049ac:	6a23      	ldr	r3, [r4, #32]
 80049ae:	b11b      	cbz	r3, 80049b8 <__sinit+0x14>
 80049b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80049b4:	f7ff bff0 	b.w	8004998 <__sfp_lock_release>
 80049b8:	4b04      	ldr	r3, [pc, #16]	; (80049cc <__sinit+0x28>)
 80049ba:	6223      	str	r3, [r4, #32]
 80049bc:	4b04      	ldr	r3, [pc, #16]	; (80049d0 <__sinit+0x2c>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d1f5      	bne.n	80049b0 <__sinit+0xc>
 80049c4:	f7ff ffc4 	bl	8004950 <global_stdio_init.part.0>
 80049c8:	e7f2      	b.n	80049b0 <__sinit+0xc>
 80049ca:	bf00      	nop
 80049cc:	08004911 	.word	0x08004911
 80049d0:	20004b68 	.word	0x20004b68

080049d4 <_fwalk_sglue>:
 80049d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80049d8:	4607      	mov	r7, r0
 80049da:	4688      	mov	r8, r1
 80049dc:	4614      	mov	r4, r2
 80049de:	2600      	movs	r6, #0
 80049e0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80049e4:	f1b9 0901 	subs.w	r9, r9, #1
 80049e8:	d505      	bpl.n	80049f6 <_fwalk_sglue+0x22>
 80049ea:	6824      	ldr	r4, [r4, #0]
 80049ec:	2c00      	cmp	r4, #0
 80049ee:	d1f7      	bne.n	80049e0 <_fwalk_sglue+0xc>
 80049f0:	4630      	mov	r0, r6
 80049f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80049f6:	89ab      	ldrh	r3, [r5, #12]
 80049f8:	2b01      	cmp	r3, #1
 80049fa:	d907      	bls.n	8004a0c <_fwalk_sglue+0x38>
 80049fc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004a00:	3301      	adds	r3, #1
 8004a02:	d003      	beq.n	8004a0c <_fwalk_sglue+0x38>
 8004a04:	4629      	mov	r1, r5
 8004a06:	4638      	mov	r0, r7
 8004a08:	47c0      	blx	r8
 8004a0a:	4306      	orrs	r6, r0
 8004a0c:	3568      	adds	r5, #104	; 0x68
 8004a0e:	e7e9      	b.n	80049e4 <_fwalk_sglue+0x10>

08004a10 <_puts_r>:
 8004a10:	6a03      	ldr	r3, [r0, #32]
 8004a12:	b570      	push	{r4, r5, r6, lr}
 8004a14:	6884      	ldr	r4, [r0, #8]
 8004a16:	4605      	mov	r5, r0
 8004a18:	460e      	mov	r6, r1
 8004a1a:	b90b      	cbnz	r3, 8004a20 <_puts_r+0x10>
 8004a1c:	f7ff ffc2 	bl	80049a4 <__sinit>
 8004a20:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004a22:	07db      	lsls	r3, r3, #31
 8004a24:	d405      	bmi.n	8004a32 <_puts_r+0x22>
 8004a26:	89a3      	ldrh	r3, [r4, #12]
 8004a28:	0598      	lsls	r0, r3, #22
 8004a2a:	d402      	bmi.n	8004a32 <_puts_r+0x22>
 8004a2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004a2e:	f000 f99c 	bl	8004d6a <__retarget_lock_acquire_recursive>
 8004a32:	89a3      	ldrh	r3, [r4, #12]
 8004a34:	0719      	lsls	r1, r3, #28
 8004a36:	d513      	bpl.n	8004a60 <_puts_r+0x50>
 8004a38:	6923      	ldr	r3, [r4, #16]
 8004a3a:	b18b      	cbz	r3, 8004a60 <_puts_r+0x50>
 8004a3c:	3e01      	subs	r6, #1
 8004a3e:	68a3      	ldr	r3, [r4, #8]
 8004a40:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004a44:	3b01      	subs	r3, #1
 8004a46:	60a3      	str	r3, [r4, #8]
 8004a48:	b9e9      	cbnz	r1, 8004a86 <_puts_r+0x76>
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	da2e      	bge.n	8004aac <_puts_r+0x9c>
 8004a4e:	4622      	mov	r2, r4
 8004a50:	210a      	movs	r1, #10
 8004a52:	4628      	mov	r0, r5
 8004a54:	f000 f87b 	bl	8004b4e <__swbuf_r>
 8004a58:	3001      	adds	r0, #1
 8004a5a:	d007      	beq.n	8004a6c <_puts_r+0x5c>
 8004a5c:	250a      	movs	r5, #10
 8004a5e:	e007      	b.n	8004a70 <_puts_r+0x60>
 8004a60:	4621      	mov	r1, r4
 8004a62:	4628      	mov	r0, r5
 8004a64:	f000 f8b0 	bl	8004bc8 <__swsetup_r>
 8004a68:	2800      	cmp	r0, #0
 8004a6a:	d0e7      	beq.n	8004a3c <_puts_r+0x2c>
 8004a6c:	f04f 35ff 	mov.w	r5, #4294967295
 8004a70:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004a72:	07da      	lsls	r2, r3, #31
 8004a74:	d405      	bmi.n	8004a82 <_puts_r+0x72>
 8004a76:	89a3      	ldrh	r3, [r4, #12]
 8004a78:	059b      	lsls	r3, r3, #22
 8004a7a:	d402      	bmi.n	8004a82 <_puts_r+0x72>
 8004a7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004a7e:	f000 f975 	bl	8004d6c <__retarget_lock_release_recursive>
 8004a82:	4628      	mov	r0, r5
 8004a84:	bd70      	pop	{r4, r5, r6, pc}
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	da04      	bge.n	8004a94 <_puts_r+0x84>
 8004a8a:	69a2      	ldr	r2, [r4, #24]
 8004a8c:	429a      	cmp	r2, r3
 8004a8e:	dc06      	bgt.n	8004a9e <_puts_r+0x8e>
 8004a90:	290a      	cmp	r1, #10
 8004a92:	d004      	beq.n	8004a9e <_puts_r+0x8e>
 8004a94:	6823      	ldr	r3, [r4, #0]
 8004a96:	1c5a      	adds	r2, r3, #1
 8004a98:	6022      	str	r2, [r4, #0]
 8004a9a:	7019      	strb	r1, [r3, #0]
 8004a9c:	e7cf      	b.n	8004a3e <_puts_r+0x2e>
 8004a9e:	4622      	mov	r2, r4
 8004aa0:	4628      	mov	r0, r5
 8004aa2:	f000 f854 	bl	8004b4e <__swbuf_r>
 8004aa6:	3001      	adds	r0, #1
 8004aa8:	d1c9      	bne.n	8004a3e <_puts_r+0x2e>
 8004aaa:	e7df      	b.n	8004a6c <_puts_r+0x5c>
 8004aac:	6823      	ldr	r3, [r4, #0]
 8004aae:	250a      	movs	r5, #10
 8004ab0:	1c5a      	adds	r2, r3, #1
 8004ab2:	6022      	str	r2, [r4, #0]
 8004ab4:	701d      	strb	r5, [r3, #0]
 8004ab6:	e7db      	b.n	8004a70 <_puts_r+0x60>

08004ab8 <puts>:
 8004ab8:	4b02      	ldr	r3, [pc, #8]	; (8004ac4 <puts+0xc>)
 8004aba:	4601      	mov	r1, r0
 8004abc:	6818      	ldr	r0, [r3, #0]
 8004abe:	f7ff bfa7 	b.w	8004a10 <_puts_r>
 8004ac2:	bf00      	nop
 8004ac4:	20000068 	.word	0x20000068

08004ac8 <__sread>:
 8004ac8:	b510      	push	{r4, lr}
 8004aca:	460c      	mov	r4, r1
 8004acc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ad0:	f000 f8fc 	bl	8004ccc <_read_r>
 8004ad4:	2800      	cmp	r0, #0
 8004ad6:	bfab      	itete	ge
 8004ad8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004ada:	89a3      	ldrhlt	r3, [r4, #12]
 8004adc:	181b      	addge	r3, r3, r0
 8004ade:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004ae2:	bfac      	ite	ge
 8004ae4:	6563      	strge	r3, [r4, #84]	; 0x54
 8004ae6:	81a3      	strhlt	r3, [r4, #12]
 8004ae8:	bd10      	pop	{r4, pc}

08004aea <__swrite>:
 8004aea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004aee:	461f      	mov	r7, r3
 8004af0:	898b      	ldrh	r3, [r1, #12]
 8004af2:	05db      	lsls	r3, r3, #23
 8004af4:	4605      	mov	r5, r0
 8004af6:	460c      	mov	r4, r1
 8004af8:	4616      	mov	r6, r2
 8004afa:	d505      	bpl.n	8004b08 <__swrite+0x1e>
 8004afc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b00:	2302      	movs	r3, #2
 8004b02:	2200      	movs	r2, #0
 8004b04:	f000 f8d0 	bl	8004ca8 <_lseek_r>
 8004b08:	89a3      	ldrh	r3, [r4, #12]
 8004b0a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004b0e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004b12:	81a3      	strh	r3, [r4, #12]
 8004b14:	4632      	mov	r2, r6
 8004b16:	463b      	mov	r3, r7
 8004b18:	4628      	mov	r0, r5
 8004b1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004b1e:	f000 b8e7 	b.w	8004cf0 <_write_r>

08004b22 <__sseek>:
 8004b22:	b510      	push	{r4, lr}
 8004b24:	460c      	mov	r4, r1
 8004b26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b2a:	f000 f8bd 	bl	8004ca8 <_lseek_r>
 8004b2e:	1c43      	adds	r3, r0, #1
 8004b30:	89a3      	ldrh	r3, [r4, #12]
 8004b32:	bf15      	itete	ne
 8004b34:	6560      	strne	r0, [r4, #84]	; 0x54
 8004b36:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004b3a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004b3e:	81a3      	strheq	r3, [r4, #12]
 8004b40:	bf18      	it	ne
 8004b42:	81a3      	strhne	r3, [r4, #12]
 8004b44:	bd10      	pop	{r4, pc}

08004b46 <__sclose>:
 8004b46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b4a:	f000 b89d 	b.w	8004c88 <_close_r>

08004b4e <__swbuf_r>:
 8004b4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b50:	460e      	mov	r6, r1
 8004b52:	4614      	mov	r4, r2
 8004b54:	4605      	mov	r5, r0
 8004b56:	b118      	cbz	r0, 8004b60 <__swbuf_r+0x12>
 8004b58:	6a03      	ldr	r3, [r0, #32]
 8004b5a:	b90b      	cbnz	r3, 8004b60 <__swbuf_r+0x12>
 8004b5c:	f7ff ff22 	bl	80049a4 <__sinit>
 8004b60:	69a3      	ldr	r3, [r4, #24]
 8004b62:	60a3      	str	r3, [r4, #8]
 8004b64:	89a3      	ldrh	r3, [r4, #12]
 8004b66:	071a      	lsls	r2, r3, #28
 8004b68:	d525      	bpl.n	8004bb6 <__swbuf_r+0x68>
 8004b6a:	6923      	ldr	r3, [r4, #16]
 8004b6c:	b31b      	cbz	r3, 8004bb6 <__swbuf_r+0x68>
 8004b6e:	6823      	ldr	r3, [r4, #0]
 8004b70:	6922      	ldr	r2, [r4, #16]
 8004b72:	1a98      	subs	r0, r3, r2
 8004b74:	6963      	ldr	r3, [r4, #20]
 8004b76:	b2f6      	uxtb	r6, r6
 8004b78:	4283      	cmp	r3, r0
 8004b7a:	4637      	mov	r7, r6
 8004b7c:	dc04      	bgt.n	8004b88 <__swbuf_r+0x3a>
 8004b7e:	4621      	mov	r1, r4
 8004b80:	4628      	mov	r0, r5
 8004b82:	f000 fa81 	bl	8005088 <_fflush_r>
 8004b86:	b9e0      	cbnz	r0, 8004bc2 <__swbuf_r+0x74>
 8004b88:	68a3      	ldr	r3, [r4, #8]
 8004b8a:	3b01      	subs	r3, #1
 8004b8c:	60a3      	str	r3, [r4, #8]
 8004b8e:	6823      	ldr	r3, [r4, #0]
 8004b90:	1c5a      	adds	r2, r3, #1
 8004b92:	6022      	str	r2, [r4, #0]
 8004b94:	701e      	strb	r6, [r3, #0]
 8004b96:	6962      	ldr	r2, [r4, #20]
 8004b98:	1c43      	adds	r3, r0, #1
 8004b9a:	429a      	cmp	r2, r3
 8004b9c:	d004      	beq.n	8004ba8 <__swbuf_r+0x5a>
 8004b9e:	89a3      	ldrh	r3, [r4, #12]
 8004ba0:	07db      	lsls	r3, r3, #31
 8004ba2:	d506      	bpl.n	8004bb2 <__swbuf_r+0x64>
 8004ba4:	2e0a      	cmp	r6, #10
 8004ba6:	d104      	bne.n	8004bb2 <__swbuf_r+0x64>
 8004ba8:	4621      	mov	r1, r4
 8004baa:	4628      	mov	r0, r5
 8004bac:	f000 fa6c 	bl	8005088 <_fflush_r>
 8004bb0:	b938      	cbnz	r0, 8004bc2 <__swbuf_r+0x74>
 8004bb2:	4638      	mov	r0, r7
 8004bb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004bb6:	4621      	mov	r1, r4
 8004bb8:	4628      	mov	r0, r5
 8004bba:	f000 f805 	bl	8004bc8 <__swsetup_r>
 8004bbe:	2800      	cmp	r0, #0
 8004bc0:	d0d5      	beq.n	8004b6e <__swbuf_r+0x20>
 8004bc2:	f04f 37ff 	mov.w	r7, #4294967295
 8004bc6:	e7f4      	b.n	8004bb2 <__swbuf_r+0x64>

08004bc8 <__swsetup_r>:
 8004bc8:	b538      	push	{r3, r4, r5, lr}
 8004bca:	4b2a      	ldr	r3, [pc, #168]	; (8004c74 <__swsetup_r+0xac>)
 8004bcc:	4605      	mov	r5, r0
 8004bce:	6818      	ldr	r0, [r3, #0]
 8004bd0:	460c      	mov	r4, r1
 8004bd2:	b118      	cbz	r0, 8004bdc <__swsetup_r+0x14>
 8004bd4:	6a03      	ldr	r3, [r0, #32]
 8004bd6:	b90b      	cbnz	r3, 8004bdc <__swsetup_r+0x14>
 8004bd8:	f7ff fee4 	bl	80049a4 <__sinit>
 8004bdc:	89a3      	ldrh	r3, [r4, #12]
 8004bde:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004be2:	0718      	lsls	r0, r3, #28
 8004be4:	d422      	bmi.n	8004c2c <__swsetup_r+0x64>
 8004be6:	06d9      	lsls	r1, r3, #27
 8004be8:	d407      	bmi.n	8004bfa <__swsetup_r+0x32>
 8004bea:	2309      	movs	r3, #9
 8004bec:	602b      	str	r3, [r5, #0]
 8004bee:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004bf2:	81a3      	strh	r3, [r4, #12]
 8004bf4:	f04f 30ff 	mov.w	r0, #4294967295
 8004bf8:	e034      	b.n	8004c64 <__swsetup_r+0x9c>
 8004bfa:	0758      	lsls	r0, r3, #29
 8004bfc:	d512      	bpl.n	8004c24 <__swsetup_r+0x5c>
 8004bfe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004c00:	b141      	cbz	r1, 8004c14 <__swsetup_r+0x4c>
 8004c02:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004c06:	4299      	cmp	r1, r3
 8004c08:	d002      	beq.n	8004c10 <__swsetup_r+0x48>
 8004c0a:	4628      	mov	r0, r5
 8004c0c:	f000 f8be 	bl	8004d8c <_free_r>
 8004c10:	2300      	movs	r3, #0
 8004c12:	6363      	str	r3, [r4, #52]	; 0x34
 8004c14:	89a3      	ldrh	r3, [r4, #12]
 8004c16:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004c1a:	81a3      	strh	r3, [r4, #12]
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	6063      	str	r3, [r4, #4]
 8004c20:	6923      	ldr	r3, [r4, #16]
 8004c22:	6023      	str	r3, [r4, #0]
 8004c24:	89a3      	ldrh	r3, [r4, #12]
 8004c26:	f043 0308 	orr.w	r3, r3, #8
 8004c2a:	81a3      	strh	r3, [r4, #12]
 8004c2c:	6923      	ldr	r3, [r4, #16]
 8004c2e:	b94b      	cbnz	r3, 8004c44 <__swsetup_r+0x7c>
 8004c30:	89a3      	ldrh	r3, [r4, #12]
 8004c32:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004c36:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c3a:	d003      	beq.n	8004c44 <__swsetup_r+0x7c>
 8004c3c:	4621      	mov	r1, r4
 8004c3e:	4628      	mov	r0, r5
 8004c40:	f000 fa70 	bl	8005124 <__smakebuf_r>
 8004c44:	89a0      	ldrh	r0, [r4, #12]
 8004c46:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004c4a:	f010 0301 	ands.w	r3, r0, #1
 8004c4e:	d00a      	beq.n	8004c66 <__swsetup_r+0x9e>
 8004c50:	2300      	movs	r3, #0
 8004c52:	60a3      	str	r3, [r4, #8]
 8004c54:	6963      	ldr	r3, [r4, #20]
 8004c56:	425b      	negs	r3, r3
 8004c58:	61a3      	str	r3, [r4, #24]
 8004c5a:	6923      	ldr	r3, [r4, #16]
 8004c5c:	b943      	cbnz	r3, 8004c70 <__swsetup_r+0xa8>
 8004c5e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004c62:	d1c4      	bne.n	8004bee <__swsetup_r+0x26>
 8004c64:	bd38      	pop	{r3, r4, r5, pc}
 8004c66:	0781      	lsls	r1, r0, #30
 8004c68:	bf58      	it	pl
 8004c6a:	6963      	ldrpl	r3, [r4, #20]
 8004c6c:	60a3      	str	r3, [r4, #8]
 8004c6e:	e7f4      	b.n	8004c5a <__swsetup_r+0x92>
 8004c70:	2000      	movs	r0, #0
 8004c72:	e7f7      	b.n	8004c64 <__swsetup_r+0x9c>
 8004c74:	20000068 	.word	0x20000068

08004c78 <memset>:
 8004c78:	4402      	add	r2, r0
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d100      	bne.n	8004c82 <memset+0xa>
 8004c80:	4770      	bx	lr
 8004c82:	f803 1b01 	strb.w	r1, [r3], #1
 8004c86:	e7f9      	b.n	8004c7c <memset+0x4>

08004c88 <_close_r>:
 8004c88:	b538      	push	{r3, r4, r5, lr}
 8004c8a:	4d06      	ldr	r5, [pc, #24]	; (8004ca4 <_close_r+0x1c>)
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	4604      	mov	r4, r0
 8004c90:	4608      	mov	r0, r1
 8004c92:	602b      	str	r3, [r5, #0]
 8004c94:	f7fb fe3b 	bl	800090e <_close>
 8004c98:	1c43      	adds	r3, r0, #1
 8004c9a:	d102      	bne.n	8004ca2 <_close_r+0x1a>
 8004c9c:	682b      	ldr	r3, [r5, #0]
 8004c9e:	b103      	cbz	r3, 8004ca2 <_close_r+0x1a>
 8004ca0:	6023      	str	r3, [r4, #0]
 8004ca2:	bd38      	pop	{r3, r4, r5, pc}
 8004ca4:	20004b6c 	.word	0x20004b6c

08004ca8 <_lseek_r>:
 8004ca8:	b538      	push	{r3, r4, r5, lr}
 8004caa:	4d07      	ldr	r5, [pc, #28]	; (8004cc8 <_lseek_r+0x20>)
 8004cac:	4604      	mov	r4, r0
 8004cae:	4608      	mov	r0, r1
 8004cb0:	4611      	mov	r1, r2
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	602a      	str	r2, [r5, #0]
 8004cb6:	461a      	mov	r2, r3
 8004cb8:	f7fb fe50 	bl	800095c <_lseek>
 8004cbc:	1c43      	adds	r3, r0, #1
 8004cbe:	d102      	bne.n	8004cc6 <_lseek_r+0x1e>
 8004cc0:	682b      	ldr	r3, [r5, #0]
 8004cc2:	b103      	cbz	r3, 8004cc6 <_lseek_r+0x1e>
 8004cc4:	6023      	str	r3, [r4, #0]
 8004cc6:	bd38      	pop	{r3, r4, r5, pc}
 8004cc8:	20004b6c 	.word	0x20004b6c

08004ccc <_read_r>:
 8004ccc:	b538      	push	{r3, r4, r5, lr}
 8004cce:	4d07      	ldr	r5, [pc, #28]	; (8004cec <_read_r+0x20>)
 8004cd0:	4604      	mov	r4, r0
 8004cd2:	4608      	mov	r0, r1
 8004cd4:	4611      	mov	r1, r2
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	602a      	str	r2, [r5, #0]
 8004cda:	461a      	mov	r2, r3
 8004cdc:	f7fb fdde 	bl	800089c <_read>
 8004ce0:	1c43      	adds	r3, r0, #1
 8004ce2:	d102      	bne.n	8004cea <_read_r+0x1e>
 8004ce4:	682b      	ldr	r3, [r5, #0]
 8004ce6:	b103      	cbz	r3, 8004cea <_read_r+0x1e>
 8004ce8:	6023      	str	r3, [r4, #0]
 8004cea:	bd38      	pop	{r3, r4, r5, pc}
 8004cec:	20004b6c 	.word	0x20004b6c

08004cf0 <_write_r>:
 8004cf0:	b538      	push	{r3, r4, r5, lr}
 8004cf2:	4d07      	ldr	r5, [pc, #28]	; (8004d10 <_write_r+0x20>)
 8004cf4:	4604      	mov	r4, r0
 8004cf6:	4608      	mov	r0, r1
 8004cf8:	4611      	mov	r1, r2
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	602a      	str	r2, [r5, #0]
 8004cfe:	461a      	mov	r2, r3
 8004d00:	f7fb fde9 	bl	80008d6 <_write>
 8004d04:	1c43      	adds	r3, r0, #1
 8004d06:	d102      	bne.n	8004d0e <_write_r+0x1e>
 8004d08:	682b      	ldr	r3, [r5, #0]
 8004d0a:	b103      	cbz	r3, 8004d0e <_write_r+0x1e>
 8004d0c:	6023      	str	r3, [r4, #0]
 8004d0e:	bd38      	pop	{r3, r4, r5, pc}
 8004d10:	20004b6c 	.word	0x20004b6c

08004d14 <__errno>:
 8004d14:	4b01      	ldr	r3, [pc, #4]	; (8004d1c <__errno+0x8>)
 8004d16:	6818      	ldr	r0, [r3, #0]
 8004d18:	4770      	bx	lr
 8004d1a:	bf00      	nop
 8004d1c:	20000068 	.word	0x20000068

08004d20 <__libc_init_array>:
 8004d20:	b570      	push	{r4, r5, r6, lr}
 8004d22:	4d0d      	ldr	r5, [pc, #52]	; (8004d58 <__libc_init_array+0x38>)
 8004d24:	4c0d      	ldr	r4, [pc, #52]	; (8004d5c <__libc_init_array+0x3c>)
 8004d26:	1b64      	subs	r4, r4, r5
 8004d28:	10a4      	asrs	r4, r4, #2
 8004d2a:	2600      	movs	r6, #0
 8004d2c:	42a6      	cmp	r6, r4
 8004d2e:	d109      	bne.n	8004d44 <__libc_init_array+0x24>
 8004d30:	4d0b      	ldr	r5, [pc, #44]	; (8004d60 <__libc_init_array+0x40>)
 8004d32:	4c0c      	ldr	r4, [pc, #48]	; (8004d64 <__libc_init_array+0x44>)
 8004d34:	f000 fa64 	bl	8005200 <_init>
 8004d38:	1b64      	subs	r4, r4, r5
 8004d3a:	10a4      	asrs	r4, r4, #2
 8004d3c:	2600      	movs	r6, #0
 8004d3e:	42a6      	cmp	r6, r4
 8004d40:	d105      	bne.n	8004d4e <__libc_init_array+0x2e>
 8004d42:	bd70      	pop	{r4, r5, r6, pc}
 8004d44:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d48:	4798      	blx	r3
 8004d4a:	3601      	adds	r6, #1
 8004d4c:	e7ee      	b.n	8004d2c <__libc_init_array+0xc>
 8004d4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d52:	4798      	blx	r3
 8004d54:	3601      	adds	r6, #1
 8004d56:	e7f2      	b.n	8004d3e <__libc_init_array+0x1e>
 8004d58:	080052b8 	.word	0x080052b8
 8004d5c:	080052b8 	.word	0x080052b8
 8004d60:	080052b8 	.word	0x080052b8
 8004d64:	080052bc 	.word	0x080052bc

08004d68 <__retarget_lock_init_recursive>:
 8004d68:	4770      	bx	lr

08004d6a <__retarget_lock_acquire_recursive>:
 8004d6a:	4770      	bx	lr

08004d6c <__retarget_lock_release_recursive>:
 8004d6c:	4770      	bx	lr

08004d6e <memcpy>:
 8004d6e:	440a      	add	r2, r1
 8004d70:	4291      	cmp	r1, r2
 8004d72:	f100 33ff 	add.w	r3, r0, #4294967295
 8004d76:	d100      	bne.n	8004d7a <memcpy+0xc>
 8004d78:	4770      	bx	lr
 8004d7a:	b510      	push	{r4, lr}
 8004d7c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004d80:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004d84:	4291      	cmp	r1, r2
 8004d86:	d1f9      	bne.n	8004d7c <memcpy+0xe>
 8004d88:	bd10      	pop	{r4, pc}
	...

08004d8c <_free_r>:
 8004d8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004d8e:	2900      	cmp	r1, #0
 8004d90:	d044      	beq.n	8004e1c <_free_r+0x90>
 8004d92:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d96:	9001      	str	r0, [sp, #4]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	f1a1 0404 	sub.w	r4, r1, #4
 8004d9e:	bfb8      	it	lt
 8004da0:	18e4      	addlt	r4, r4, r3
 8004da2:	f000 f8df 	bl	8004f64 <__malloc_lock>
 8004da6:	4a1e      	ldr	r2, [pc, #120]	; (8004e20 <_free_r+0x94>)
 8004da8:	9801      	ldr	r0, [sp, #4]
 8004daa:	6813      	ldr	r3, [r2, #0]
 8004dac:	b933      	cbnz	r3, 8004dbc <_free_r+0x30>
 8004dae:	6063      	str	r3, [r4, #4]
 8004db0:	6014      	str	r4, [r2, #0]
 8004db2:	b003      	add	sp, #12
 8004db4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004db8:	f000 b8da 	b.w	8004f70 <__malloc_unlock>
 8004dbc:	42a3      	cmp	r3, r4
 8004dbe:	d908      	bls.n	8004dd2 <_free_r+0x46>
 8004dc0:	6825      	ldr	r5, [r4, #0]
 8004dc2:	1961      	adds	r1, r4, r5
 8004dc4:	428b      	cmp	r3, r1
 8004dc6:	bf01      	itttt	eq
 8004dc8:	6819      	ldreq	r1, [r3, #0]
 8004dca:	685b      	ldreq	r3, [r3, #4]
 8004dcc:	1949      	addeq	r1, r1, r5
 8004dce:	6021      	streq	r1, [r4, #0]
 8004dd0:	e7ed      	b.n	8004dae <_free_r+0x22>
 8004dd2:	461a      	mov	r2, r3
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	b10b      	cbz	r3, 8004ddc <_free_r+0x50>
 8004dd8:	42a3      	cmp	r3, r4
 8004dda:	d9fa      	bls.n	8004dd2 <_free_r+0x46>
 8004ddc:	6811      	ldr	r1, [r2, #0]
 8004dde:	1855      	adds	r5, r2, r1
 8004de0:	42a5      	cmp	r5, r4
 8004de2:	d10b      	bne.n	8004dfc <_free_r+0x70>
 8004de4:	6824      	ldr	r4, [r4, #0]
 8004de6:	4421      	add	r1, r4
 8004de8:	1854      	adds	r4, r2, r1
 8004dea:	42a3      	cmp	r3, r4
 8004dec:	6011      	str	r1, [r2, #0]
 8004dee:	d1e0      	bne.n	8004db2 <_free_r+0x26>
 8004df0:	681c      	ldr	r4, [r3, #0]
 8004df2:	685b      	ldr	r3, [r3, #4]
 8004df4:	6053      	str	r3, [r2, #4]
 8004df6:	440c      	add	r4, r1
 8004df8:	6014      	str	r4, [r2, #0]
 8004dfa:	e7da      	b.n	8004db2 <_free_r+0x26>
 8004dfc:	d902      	bls.n	8004e04 <_free_r+0x78>
 8004dfe:	230c      	movs	r3, #12
 8004e00:	6003      	str	r3, [r0, #0]
 8004e02:	e7d6      	b.n	8004db2 <_free_r+0x26>
 8004e04:	6825      	ldr	r5, [r4, #0]
 8004e06:	1961      	adds	r1, r4, r5
 8004e08:	428b      	cmp	r3, r1
 8004e0a:	bf04      	itt	eq
 8004e0c:	6819      	ldreq	r1, [r3, #0]
 8004e0e:	685b      	ldreq	r3, [r3, #4]
 8004e10:	6063      	str	r3, [r4, #4]
 8004e12:	bf04      	itt	eq
 8004e14:	1949      	addeq	r1, r1, r5
 8004e16:	6021      	streq	r1, [r4, #0]
 8004e18:	6054      	str	r4, [r2, #4]
 8004e1a:	e7ca      	b.n	8004db2 <_free_r+0x26>
 8004e1c:	b003      	add	sp, #12
 8004e1e:	bd30      	pop	{r4, r5, pc}
 8004e20:	20004b74 	.word	0x20004b74

08004e24 <sbrk_aligned>:
 8004e24:	b570      	push	{r4, r5, r6, lr}
 8004e26:	4e0e      	ldr	r6, [pc, #56]	; (8004e60 <sbrk_aligned+0x3c>)
 8004e28:	460c      	mov	r4, r1
 8004e2a:	6831      	ldr	r1, [r6, #0]
 8004e2c:	4605      	mov	r5, r0
 8004e2e:	b911      	cbnz	r1, 8004e36 <sbrk_aligned+0x12>
 8004e30:	f000 f9d6 	bl	80051e0 <_sbrk_r>
 8004e34:	6030      	str	r0, [r6, #0]
 8004e36:	4621      	mov	r1, r4
 8004e38:	4628      	mov	r0, r5
 8004e3a:	f000 f9d1 	bl	80051e0 <_sbrk_r>
 8004e3e:	1c43      	adds	r3, r0, #1
 8004e40:	d00a      	beq.n	8004e58 <sbrk_aligned+0x34>
 8004e42:	1cc4      	adds	r4, r0, #3
 8004e44:	f024 0403 	bic.w	r4, r4, #3
 8004e48:	42a0      	cmp	r0, r4
 8004e4a:	d007      	beq.n	8004e5c <sbrk_aligned+0x38>
 8004e4c:	1a21      	subs	r1, r4, r0
 8004e4e:	4628      	mov	r0, r5
 8004e50:	f000 f9c6 	bl	80051e0 <_sbrk_r>
 8004e54:	3001      	adds	r0, #1
 8004e56:	d101      	bne.n	8004e5c <sbrk_aligned+0x38>
 8004e58:	f04f 34ff 	mov.w	r4, #4294967295
 8004e5c:	4620      	mov	r0, r4
 8004e5e:	bd70      	pop	{r4, r5, r6, pc}
 8004e60:	20004b78 	.word	0x20004b78

08004e64 <_malloc_r>:
 8004e64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004e68:	1ccd      	adds	r5, r1, #3
 8004e6a:	f025 0503 	bic.w	r5, r5, #3
 8004e6e:	3508      	adds	r5, #8
 8004e70:	2d0c      	cmp	r5, #12
 8004e72:	bf38      	it	cc
 8004e74:	250c      	movcc	r5, #12
 8004e76:	2d00      	cmp	r5, #0
 8004e78:	4607      	mov	r7, r0
 8004e7a:	db01      	blt.n	8004e80 <_malloc_r+0x1c>
 8004e7c:	42a9      	cmp	r1, r5
 8004e7e:	d905      	bls.n	8004e8c <_malloc_r+0x28>
 8004e80:	230c      	movs	r3, #12
 8004e82:	603b      	str	r3, [r7, #0]
 8004e84:	2600      	movs	r6, #0
 8004e86:	4630      	mov	r0, r6
 8004e88:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004e8c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004f60 <_malloc_r+0xfc>
 8004e90:	f000 f868 	bl	8004f64 <__malloc_lock>
 8004e94:	f8d8 3000 	ldr.w	r3, [r8]
 8004e98:	461c      	mov	r4, r3
 8004e9a:	bb5c      	cbnz	r4, 8004ef4 <_malloc_r+0x90>
 8004e9c:	4629      	mov	r1, r5
 8004e9e:	4638      	mov	r0, r7
 8004ea0:	f7ff ffc0 	bl	8004e24 <sbrk_aligned>
 8004ea4:	1c43      	adds	r3, r0, #1
 8004ea6:	4604      	mov	r4, r0
 8004ea8:	d155      	bne.n	8004f56 <_malloc_r+0xf2>
 8004eaa:	f8d8 4000 	ldr.w	r4, [r8]
 8004eae:	4626      	mov	r6, r4
 8004eb0:	2e00      	cmp	r6, #0
 8004eb2:	d145      	bne.n	8004f40 <_malloc_r+0xdc>
 8004eb4:	2c00      	cmp	r4, #0
 8004eb6:	d048      	beq.n	8004f4a <_malloc_r+0xe6>
 8004eb8:	6823      	ldr	r3, [r4, #0]
 8004eba:	4631      	mov	r1, r6
 8004ebc:	4638      	mov	r0, r7
 8004ebe:	eb04 0903 	add.w	r9, r4, r3
 8004ec2:	f000 f98d 	bl	80051e0 <_sbrk_r>
 8004ec6:	4581      	cmp	r9, r0
 8004ec8:	d13f      	bne.n	8004f4a <_malloc_r+0xe6>
 8004eca:	6821      	ldr	r1, [r4, #0]
 8004ecc:	1a6d      	subs	r5, r5, r1
 8004ece:	4629      	mov	r1, r5
 8004ed0:	4638      	mov	r0, r7
 8004ed2:	f7ff ffa7 	bl	8004e24 <sbrk_aligned>
 8004ed6:	3001      	adds	r0, #1
 8004ed8:	d037      	beq.n	8004f4a <_malloc_r+0xe6>
 8004eda:	6823      	ldr	r3, [r4, #0]
 8004edc:	442b      	add	r3, r5
 8004ede:	6023      	str	r3, [r4, #0]
 8004ee0:	f8d8 3000 	ldr.w	r3, [r8]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d038      	beq.n	8004f5a <_malloc_r+0xf6>
 8004ee8:	685a      	ldr	r2, [r3, #4]
 8004eea:	42a2      	cmp	r2, r4
 8004eec:	d12b      	bne.n	8004f46 <_malloc_r+0xe2>
 8004eee:	2200      	movs	r2, #0
 8004ef0:	605a      	str	r2, [r3, #4]
 8004ef2:	e00f      	b.n	8004f14 <_malloc_r+0xb0>
 8004ef4:	6822      	ldr	r2, [r4, #0]
 8004ef6:	1b52      	subs	r2, r2, r5
 8004ef8:	d41f      	bmi.n	8004f3a <_malloc_r+0xd6>
 8004efa:	2a0b      	cmp	r2, #11
 8004efc:	d917      	bls.n	8004f2e <_malloc_r+0xca>
 8004efe:	1961      	adds	r1, r4, r5
 8004f00:	42a3      	cmp	r3, r4
 8004f02:	6025      	str	r5, [r4, #0]
 8004f04:	bf18      	it	ne
 8004f06:	6059      	strne	r1, [r3, #4]
 8004f08:	6863      	ldr	r3, [r4, #4]
 8004f0a:	bf08      	it	eq
 8004f0c:	f8c8 1000 	streq.w	r1, [r8]
 8004f10:	5162      	str	r2, [r4, r5]
 8004f12:	604b      	str	r3, [r1, #4]
 8004f14:	4638      	mov	r0, r7
 8004f16:	f104 060b 	add.w	r6, r4, #11
 8004f1a:	f000 f829 	bl	8004f70 <__malloc_unlock>
 8004f1e:	f026 0607 	bic.w	r6, r6, #7
 8004f22:	1d23      	adds	r3, r4, #4
 8004f24:	1af2      	subs	r2, r6, r3
 8004f26:	d0ae      	beq.n	8004e86 <_malloc_r+0x22>
 8004f28:	1b9b      	subs	r3, r3, r6
 8004f2a:	50a3      	str	r3, [r4, r2]
 8004f2c:	e7ab      	b.n	8004e86 <_malloc_r+0x22>
 8004f2e:	42a3      	cmp	r3, r4
 8004f30:	6862      	ldr	r2, [r4, #4]
 8004f32:	d1dd      	bne.n	8004ef0 <_malloc_r+0x8c>
 8004f34:	f8c8 2000 	str.w	r2, [r8]
 8004f38:	e7ec      	b.n	8004f14 <_malloc_r+0xb0>
 8004f3a:	4623      	mov	r3, r4
 8004f3c:	6864      	ldr	r4, [r4, #4]
 8004f3e:	e7ac      	b.n	8004e9a <_malloc_r+0x36>
 8004f40:	4634      	mov	r4, r6
 8004f42:	6876      	ldr	r6, [r6, #4]
 8004f44:	e7b4      	b.n	8004eb0 <_malloc_r+0x4c>
 8004f46:	4613      	mov	r3, r2
 8004f48:	e7cc      	b.n	8004ee4 <_malloc_r+0x80>
 8004f4a:	230c      	movs	r3, #12
 8004f4c:	603b      	str	r3, [r7, #0]
 8004f4e:	4638      	mov	r0, r7
 8004f50:	f000 f80e 	bl	8004f70 <__malloc_unlock>
 8004f54:	e797      	b.n	8004e86 <_malloc_r+0x22>
 8004f56:	6025      	str	r5, [r4, #0]
 8004f58:	e7dc      	b.n	8004f14 <_malloc_r+0xb0>
 8004f5a:	605b      	str	r3, [r3, #4]
 8004f5c:	deff      	udf	#255	; 0xff
 8004f5e:	bf00      	nop
 8004f60:	20004b74 	.word	0x20004b74

08004f64 <__malloc_lock>:
 8004f64:	4801      	ldr	r0, [pc, #4]	; (8004f6c <__malloc_lock+0x8>)
 8004f66:	f7ff bf00 	b.w	8004d6a <__retarget_lock_acquire_recursive>
 8004f6a:	bf00      	nop
 8004f6c:	20004b70 	.word	0x20004b70

08004f70 <__malloc_unlock>:
 8004f70:	4801      	ldr	r0, [pc, #4]	; (8004f78 <__malloc_unlock+0x8>)
 8004f72:	f7ff befb 	b.w	8004d6c <__retarget_lock_release_recursive>
 8004f76:	bf00      	nop
 8004f78:	20004b70 	.word	0x20004b70

08004f7c <__sflush_r>:
 8004f7c:	898a      	ldrh	r2, [r1, #12]
 8004f7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f82:	4605      	mov	r5, r0
 8004f84:	0710      	lsls	r0, r2, #28
 8004f86:	460c      	mov	r4, r1
 8004f88:	d458      	bmi.n	800503c <__sflush_r+0xc0>
 8004f8a:	684b      	ldr	r3, [r1, #4]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	dc05      	bgt.n	8004f9c <__sflush_r+0x20>
 8004f90:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	dc02      	bgt.n	8004f9c <__sflush_r+0x20>
 8004f96:	2000      	movs	r0, #0
 8004f98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f9c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004f9e:	2e00      	cmp	r6, #0
 8004fa0:	d0f9      	beq.n	8004f96 <__sflush_r+0x1a>
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004fa8:	682f      	ldr	r7, [r5, #0]
 8004faa:	6a21      	ldr	r1, [r4, #32]
 8004fac:	602b      	str	r3, [r5, #0]
 8004fae:	d032      	beq.n	8005016 <__sflush_r+0x9a>
 8004fb0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004fb2:	89a3      	ldrh	r3, [r4, #12]
 8004fb4:	075a      	lsls	r2, r3, #29
 8004fb6:	d505      	bpl.n	8004fc4 <__sflush_r+0x48>
 8004fb8:	6863      	ldr	r3, [r4, #4]
 8004fba:	1ac0      	subs	r0, r0, r3
 8004fbc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004fbe:	b10b      	cbz	r3, 8004fc4 <__sflush_r+0x48>
 8004fc0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004fc2:	1ac0      	subs	r0, r0, r3
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	4602      	mov	r2, r0
 8004fc8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004fca:	6a21      	ldr	r1, [r4, #32]
 8004fcc:	4628      	mov	r0, r5
 8004fce:	47b0      	blx	r6
 8004fd0:	1c43      	adds	r3, r0, #1
 8004fd2:	89a3      	ldrh	r3, [r4, #12]
 8004fd4:	d106      	bne.n	8004fe4 <__sflush_r+0x68>
 8004fd6:	6829      	ldr	r1, [r5, #0]
 8004fd8:	291d      	cmp	r1, #29
 8004fda:	d82b      	bhi.n	8005034 <__sflush_r+0xb8>
 8004fdc:	4a29      	ldr	r2, [pc, #164]	; (8005084 <__sflush_r+0x108>)
 8004fde:	410a      	asrs	r2, r1
 8004fe0:	07d6      	lsls	r6, r2, #31
 8004fe2:	d427      	bmi.n	8005034 <__sflush_r+0xb8>
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	6062      	str	r2, [r4, #4]
 8004fe8:	04d9      	lsls	r1, r3, #19
 8004fea:	6922      	ldr	r2, [r4, #16]
 8004fec:	6022      	str	r2, [r4, #0]
 8004fee:	d504      	bpl.n	8004ffa <__sflush_r+0x7e>
 8004ff0:	1c42      	adds	r2, r0, #1
 8004ff2:	d101      	bne.n	8004ff8 <__sflush_r+0x7c>
 8004ff4:	682b      	ldr	r3, [r5, #0]
 8004ff6:	b903      	cbnz	r3, 8004ffa <__sflush_r+0x7e>
 8004ff8:	6560      	str	r0, [r4, #84]	; 0x54
 8004ffa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004ffc:	602f      	str	r7, [r5, #0]
 8004ffe:	2900      	cmp	r1, #0
 8005000:	d0c9      	beq.n	8004f96 <__sflush_r+0x1a>
 8005002:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005006:	4299      	cmp	r1, r3
 8005008:	d002      	beq.n	8005010 <__sflush_r+0x94>
 800500a:	4628      	mov	r0, r5
 800500c:	f7ff febe 	bl	8004d8c <_free_r>
 8005010:	2000      	movs	r0, #0
 8005012:	6360      	str	r0, [r4, #52]	; 0x34
 8005014:	e7c0      	b.n	8004f98 <__sflush_r+0x1c>
 8005016:	2301      	movs	r3, #1
 8005018:	4628      	mov	r0, r5
 800501a:	47b0      	blx	r6
 800501c:	1c41      	adds	r1, r0, #1
 800501e:	d1c8      	bne.n	8004fb2 <__sflush_r+0x36>
 8005020:	682b      	ldr	r3, [r5, #0]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d0c5      	beq.n	8004fb2 <__sflush_r+0x36>
 8005026:	2b1d      	cmp	r3, #29
 8005028:	d001      	beq.n	800502e <__sflush_r+0xb2>
 800502a:	2b16      	cmp	r3, #22
 800502c:	d101      	bne.n	8005032 <__sflush_r+0xb6>
 800502e:	602f      	str	r7, [r5, #0]
 8005030:	e7b1      	b.n	8004f96 <__sflush_r+0x1a>
 8005032:	89a3      	ldrh	r3, [r4, #12]
 8005034:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005038:	81a3      	strh	r3, [r4, #12]
 800503a:	e7ad      	b.n	8004f98 <__sflush_r+0x1c>
 800503c:	690f      	ldr	r7, [r1, #16]
 800503e:	2f00      	cmp	r7, #0
 8005040:	d0a9      	beq.n	8004f96 <__sflush_r+0x1a>
 8005042:	0793      	lsls	r3, r2, #30
 8005044:	680e      	ldr	r6, [r1, #0]
 8005046:	bf08      	it	eq
 8005048:	694b      	ldreq	r3, [r1, #20]
 800504a:	600f      	str	r7, [r1, #0]
 800504c:	bf18      	it	ne
 800504e:	2300      	movne	r3, #0
 8005050:	eba6 0807 	sub.w	r8, r6, r7
 8005054:	608b      	str	r3, [r1, #8]
 8005056:	f1b8 0f00 	cmp.w	r8, #0
 800505a:	dd9c      	ble.n	8004f96 <__sflush_r+0x1a>
 800505c:	6a21      	ldr	r1, [r4, #32]
 800505e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005060:	4643      	mov	r3, r8
 8005062:	463a      	mov	r2, r7
 8005064:	4628      	mov	r0, r5
 8005066:	47b0      	blx	r6
 8005068:	2800      	cmp	r0, #0
 800506a:	dc06      	bgt.n	800507a <__sflush_r+0xfe>
 800506c:	89a3      	ldrh	r3, [r4, #12]
 800506e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005072:	81a3      	strh	r3, [r4, #12]
 8005074:	f04f 30ff 	mov.w	r0, #4294967295
 8005078:	e78e      	b.n	8004f98 <__sflush_r+0x1c>
 800507a:	4407      	add	r7, r0
 800507c:	eba8 0800 	sub.w	r8, r8, r0
 8005080:	e7e9      	b.n	8005056 <__sflush_r+0xda>
 8005082:	bf00      	nop
 8005084:	dfbffffe 	.word	0xdfbffffe

08005088 <_fflush_r>:
 8005088:	b538      	push	{r3, r4, r5, lr}
 800508a:	690b      	ldr	r3, [r1, #16]
 800508c:	4605      	mov	r5, r0
 800508e:	460c      	mov	r4, r1
 8005090:	b913      	cbnz	r3, 8005098 <_fflush_r+0x10>
 8005092:	2500      	movs	r5, #0
 8005094:	4628      	mov	r0, r5
 8005096:	bd38      	pop	{r3, r4, r5, pc}
 8005098:	b118      	cbz	r0, 80050a2 <_fflush_r+0x1a>
 800509a:	6a03      	ldr	r3, [r0, #32]
 800509c:	b90b      	cbnz	r3, 80050a2 <_fflush_r+0x1a>
 800509e:	f7ff fc81 	bl	80049a4 <__sinit>
 80050a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d0f3      	beq.n	8005092 <_fflush_r+0xa>
 80050aa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80050ac:	07d0      	lsls	r0, r2, #31
 80050ae:	d404      	bmi.n	80050ba <_fflush_r+0x32>
 80050b0:	0599      	lsls	r1, r3, #22
 80050b2:	d402      	bmi.n	80050ba <_fflush_r+0x32>
 80050b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80050b6:	f7ff fe58 	bl	8004d6a <__retarget_lock_acquire_recursive>
 80050ba:	4628      	mov	r0, r5
 80050bc:	4621      	mov	r1, r4
 80050be:	f7ff ff5d 	bl	8004f7c <__sflush_r>
 80050c2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80050c4:	07da      	lsls	r2, r3, #31
 80050c6:	4605      	mov	r5, r0
 80050c8:	d4e4      	bmi.n	8005094 <_fflush_r+0xc>
 80050ca:	89a3      	ldrh	r3, [r4, #12]
 80050cc:	059b      	lsls	r3, r3, #22
 80050ce:	d4e1      	bmi.n	8005094 <_fflush_r+0xc>
 80050d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80050d2:	f7ff fe4b 	bl	8004d6c <__retarget_lock_release_recursive>
 80050d6:	e7dd      	b.n	8005094 <_fflush_r+0xc>

080050d8 <__swhatbuf_r>:
 80050d8:	b570      	push	{r4, r5, r6, lr}
 80050da:	460c      	mov	r4, r1
 80050dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80050e0:	2900      	cmp	r1, #0
 80050e2:	b096      	sub	sp, #88	; 0x58
 80050e4:	4615      	mov	r5, r2
 80050e6:	461e      	mov	r6, r3
 80050e8:	da0d      	bge.n	8005106 <__swhatbuf_r+0x2e>
 80050ea:	89a3      	ldrh	r3, [r4, #12]
 80050ec:	f013 0f80 	tst.w	r3, #128	; 0x80
 80050f0:	f04f 0100 	mov.w	r1, #0
 80050f4:	bf0c      	ite	eq
 80050f6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80050fa:	2340      	movne	r3, #64	; 0x40
 80050fc:	2000      	movs	r0, #0
 80050fe:	6031      	str	r1, [r6, #0]
 8005100:	602b      	str	r3, [r5, #0]
 8005102:	b016      	add	sp, #88	; 0x58
 8005104:	bd70      	pop	{r4, r5, r6, pc}
 8005106:	466a      	mov	r2, sp
 8005108:	f000 f848 	bl	800519c <_fstat_r>
 800510c:	2800      	cmp	r0, #0
 800510e:	dbec      	blt.n	80050ea <__swhatbuf_r+0x12>
 8005110:	9901      	ldr	r1, [sp, #4]
 8005112:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8005116:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800511a:	4259      	negs	r1, r3
 800511c:	4159      	adcs	r1, r3
 800511e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005122:	e7eb      	b.n	80050fc <__swhatbuf_r+0x24>

08005124 <__smakebuf_r>:
 8005124:	898b      	ldrh	r3, [r1, #12]
 8005126:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005128:	079d      	lsls	r5, r3, #30
 800512a:	4606      	mov	r6, r0
 800512c:	460c      	mov	r4, r1
 800512e:	d507      	bpl.n	8005140 <__smakebuf_r+0x1c>
 8005130:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005134:	6023      	str	r3, [r4, #0]
 8005136:	6123      	str	r3, [r4, #16]
 8005138:	2301      	movs	r3, #1
 800513a:	6163      	str	r3, [r4, #20]
 800513c:	b002      	add	sp, #8
 800513e:	bd70      	pop	{r4, r5, r6, pc}
 8005140:	ab01      	add	r3, sp, #4
 8005142:	466a      	mov	r2, sp
 8005144:	f7ff ffc8 	bl	80050d8 <__swhatbuf_r>
 8005148:	9900      	ldr	r1, [sp, #0]
 800514a:	4605      	mov	r5, r0
 800514c:	4630      	mov	r0, r6
 800514e:	f7ff fe89 	bl	8004e64 <_malloc_r>
 8005152:	b948      	cbnz	r0, 8005168 <__smakebuf_r+0x44>
 8005154:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005158:	059a      	lsls	r2, r3, #22
 800515a:	d4ef      	bmi.n	800513c <__smakebuf_r+0x18>
 800515c:	f023 0303 	bic.w	r3, r3, #3
 8005160:	f043 0302 	orr.w	r3, r3, #2
 8005164:	81a3      	strh	r3, [r4, #12]
 8005166:	e7e3      	b.n	8005130 <__smakebuf_r+0xc>
 8005168:	89a3      	ldrh	r3, [r4, #12]
 800516a:	6020      	str	r0, [r4, #0]
 800516c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005170:	81a3      	strh	r3, [r4, #12]
 8005172:	9b00      	ldr	r3, [sp, #0]
 8005174:	6163      	str	r3, [r4, #20]
 8005176:	9b01      	ldr	r3, [sp, #4]
 8005178:	6120      	str	r0, [r4, #16]
 800517a:	b15b      	cbz	r3, 8005194 <__smakebuf_r+0x70>
 800517c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005180:	4630      	mov	r0, r6
 8005182:	f000 f81d 	bl	80051c0 <_isatty_r>
 8005186:	b128      	cbz	r0, 8005194 <__smakebuf_r+0x70>
 8005188:	89a3      	ldrh	r3, [r4, #12]
 800518a:	f023 0303 	bic.w	r3, r3, #3
 800518e:	f043 0301 	orr.w	r3, r3, #1
 8005192:	81a3      	strh	r3, [r4, #12]
 8005194:	89a3      	ldrh	r3, [r4, #12]
 8005196:	431d      	orrs	r5, r3
 8005198:	81a5      	strh	r5, [r4, #12]
 800519a:	e7cf      	b.n	800513c <__smakebuf_r+0x18>

0800519c <_fstat_r>:
 800519c:	b538      	push	{r3, r4, r5, lr}
 800519e:	4d07      	ldr	r5, [pc, #28]	; (80051bc <_fstat_r+0x20>)
 80051a0:	2300      	movs	r3, #0
 80051a2:	4604      	mov	r4, r0
 80051a4:	4608      	mov	r0, r1
 80051a6:	4611      	mov	r1, r2
 80051a8:	602b      	str	r3, [r5, #0]
 80051aa:	f7fb fbbc 	bl	8000926 <_fstat>
 80051ae:	1c43      	adds	r3, r0, #1
 80051b0:	d102      	bne.n	80051b8 <_fstat_r+0x1c>
 80051b2:	682b      	ldr	r3, [r5, #0]
 80051b4:	b103      	cbz	r3, 80051b8 <_fstat_r+0x1c>
 80051b6:	6023      	str	r3, [r4, #0]
 80051b8:	bd38      	pop	{r3, r4, r5, pc}
 80051ba:	bf00      	nop
 80051bc:	20004b6c 	.word	0x20004b6c

080051c0 <_isatty_r>:
 80051c0:	b538      	push	{r3, r4, r5, lr}
 80051c2:	4d06      	ldr	r5, [pc, #24]	; (80051dc <_isatty_r+0x1c>)
 80051c4:	2300      	movs	r3, #0
 80051c6:	4604      	mov	r4, r0
 80051c8:	4608      	mov	r0, r1
 80051ca:	602b      	str	r3, [r5, #0]
 80051cc:	f7fb fbbb 	bl	8000946 <_isatty>
 80051d0:	1c43      	adds	r3, r0, #1
 80051d2:	d102      	bne.n	80051da <_isatty_r+0x1a>
 80051d4:	682b      	ldr	r3, [r5, #0]
 80051d6:	b103      	cbz	r3, 80051da <_isatty_r+0x1a>
 80051d8:	6023      	str	r3, [r4, #0]
 80051da:	bd38      	pop	{r3, r4, r5, pc}
 80051dc:	20004b6c 	.word	0x20004b6c

080051e0 <_sbrk_r>:
 80051e0:	b538      	push	{r3, r4, r5, lr}
 80051e2:	4d06      	ldr	r5, [pc, #24]	; (80051fc <_sbrk_r+0x1c>)
 80051e4:	2300      	movs	r3, #0
 80051e6:	4604      	mov	r4, r0
 80051e8:	4608      	mov	r0, r1
 80051ea:	602b      	str	r3, [r5, #0]
 80051ec:	f7fb fbc4 	bl	8000978 <_sbrk>
 80051f0:	1c43      	adds	r3, r0, #1
 80051f2:	d102      	bne.n	80051fa <_sbrk_r+0x1a>
 80051f4:	682b      	ldr	r3, [r5, #0]
 80051f6:	b103      	cbz	r3, 80051fa <_sbrk_r+0x1a>
 80051f8:	6023      	str	r3, [r4, #0]
 80051fa:	bd38      	pop	{r3, r4, r5, pc}
 80051fc:	20004b6c 	.word	0x20004b6c

08005200 <_init>:
 8005200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005202:	bf00      	nop
 8005204:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005206:	bc08      	pop	{r3}
 8005208:	469e      	mov	lr, r3
 800520a:	4770      	bx	lr

0800520c <_fini>:
 800520c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800520e:	bf00      	nop
 8005210:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005212:	bc08      	pop	{r3}
 8005214:	469e      	mov	lr, r3
 8005216:	4770      	bx	lr
